package com.github.schmittjoaopedro.tsp;

import com.github.schmittjoaopedro.tsp.algorithms.MMAS_MEM_US_MADTSP;
import com.github.schmittjoaopedro.tsp.graph.Graph;
import com.github.schmittjoaopedro.tsp.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_US_MADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/KroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 10);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(24300.30899551509);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(24300.30899551509);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 89, 48, 91, 7, 30, 79, 88, 41, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 62, 5, 48, 89, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 8, 6, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 40, 70, 99, 13, 2, 42, 45, 28, 82, 54, 33, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 8, 6, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 82, 54, 33, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 79, 30, 55, 96, 74, 18, 52, 3, 64, 25, 65, 69, 21, 93, 15, 87, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 76, 61, 59, 34, 85, 26, 11, 19, 54, 82, 33, 45, 28, 2, 42, 40, 70, 99, 13, 47, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 63, 39, 53, 1, 68, 24, 80, 60, 50, 86, 8, 6, 56, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 74, 18, 96, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 19, 56, 8, 6, 11, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 81, 94, 32, 75, 12, 36, 4, 51, 77, 95, 29, 38, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 63, 39, 53, 1, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 55, 79, 30, 88, 41, 7, 91, 74, 3, 64, 65, 25, 69, 21, 15, 87, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 58, 20, 46, 16, 14, 10, 31, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 45, 28, 2, 42, 40, 70, 99, 13, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 83, 9, 71, 73, 58, 20, 14, 16, 10, 31, 90, 97, 22, 44, 76, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 57, 66, 27, 92, 46, 35, 98, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 44, 76, 59, 61, 34, 85, 26, 19, 11, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 88, 41, 30, 79, 55, 3, 64, 25, 65, 69, 21, 15, 87, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 19, 11, 6, 8, 86, 50, 56, 33, 82, 54, 28, 45, 42, 2, 13, 70, 40, 99, 47, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 29, 38, 84, 67, 43, 49, 72, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 79, 30, 55, 3, 64, 65, 25, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 58, 16, 14, 10, 31, 44, 97, 90, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 58, 73, 16, 14, 10, 31, 44, 97, 22, 59, 61, 34, 85, 26, 11, 19, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 76, 90, 46, 92, 66, 57, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 93, 21, 15, 87, 52, 78, 17, 37, 23, 98, 35, 83, 9, 71, 20, 73, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 82, 54, 33, 28, 45, 42, 2, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 27, 66, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 25, 64, 65, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 46, 31, 90, 44, 97, 22, 59, 61, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 34, 85, 26, 11, 19, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 14, 16, 10, 31, 46, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 19, 56, 6, 8, 86, 50, 11, 54, 82, 33, 45, 28, 2, 42, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 58, 73, 14, 16, 10, 31, 46, 90, 44, 97, 22, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 61, 76, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 46, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 42, 45, 2, 13, 99, 40, 70, 47, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 67, 84, 68, 63, 39, 53, 1, 43, 49, 72, 80, 24, 60, 50, 86, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 93, 21, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 76, 59, 61, 19, 54, 82, 33, 45, 28, 2, 42, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 50, 86, 56, 8, 6, 11, 85, 26, 34, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 58, 16, 14, 10, 31, 46, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 28, 45, 2, 42, 82, 54, 33, 50, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 22, 44, 97, 59, 61, 34, 85, 26, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 97, 44, 22, 59, 61, 76, 50, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 19, 56, 6, 8, 86, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 10, 16, 14, 31, 46, 90, 97, 44, 22, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 14, 16, 10, 31, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 27, 92, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 17, 23, 98, 35, 37, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 19, 56, 86, 8, 6, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 76, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 97, 90, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 50, 86, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 10, 16, 14, 31, 44, 90, 97, 22, 76, 59, 61, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 39, 63, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 86, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 73, 20, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 45, 28, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 86, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 44, 97, 22, 76, 59, 61, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 46, 31, 44, 97, 90, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 50, 24, 80, 68, 39, 63, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 60, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 90, 97, 44, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 12, 75, 32, 36, 4, 77, 51, 95, 38, 29, 99, 40, 70, 47, 13, 2, 42, 45, 28, 33, 82, 54, 60, 57, 92, 27, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 61, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 19, 11, 26, 85, 34, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 44, 22, 90, 97, 76, 59, 61, 19, 34, 85, 26, 11, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 44, 22, 97, 90, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 40, 70, 99, 13, 42, 2, 45, 28, 33, 82, 54, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 61, 76, 50, 86, 8, 6, 56, 19, 11, 85, 34, 26, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 26, 85, 19, 11, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 81, 94, 75, 12, 32, 36, 4, 51, 77, 95, 29, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 54, 82, 6, 56, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 50, 86, 8, 6, 56, 19, 85, 34, 26, 11, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 42, 45, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 56, 8, 6, 11, 54, 82, 33, 45, 28, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 2, 42, 45, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 38, 81, 94, 12, 75, 32, 36, 4, 29, 84, 67, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 67, 84, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 86, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 38, 84, 67, 49, 43, 1, 53, 39, 63, 68, 72, 80, 24, 86, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 50, 86, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 86, 50, 60, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 62, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 93, 15, 87, 78, 52, 23, 17, 37, 98, 35, 83, 9, 71, 20, 58, 73, 16, 14, 10, 31, 46, 90, 44, 22, 97, 76, 59, 61, 34, 85, 26, 19, 11, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 63, 39, 68, 80, 24, 60, 86, 50, 57, 66, 27, 92, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 31609.844507537066, 2056.349315821938, 0.0, 54.755918367346936, 25325.55591839433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 26894.053006187714, 1497.906903570778, 0.7, 19.325714285714287, 24581.351137237063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 25458.250290322187, 1682.0623217665498, 0.515, 6.940408163265306, 23903.763443059805);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 26835.233815687992, 2011.134302486977, 0.525, 15.208163265306123, 23955.524689431262);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 27279.974747852306, 1619.3000557564499, 0.775, 23.180408163265305, 23404.6878972256);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 26310.45693286457, 1927.7601477114242, 0.805, 19.165714285714287, 23244.266486179753);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 27698.242970999352, 1773.6108276139944, 0.795, 22.12816326530612, 23954.331011800547);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 26017.07837811286, 2334.707202929189, 0.89, 16.34938775510204, 23287.603646361356);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 24886.396985292988, 1635.980016693616, 0.89, 12.98938775510204, 23287.603646361356);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 27188.37781313167, 1496.2775723026489, 0.885, 20.4865306122449, 24256.641225725365);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 27396.80034494199, 1520.7128264205214, 0.885, 17.964897959183673, 24256.641225725365);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 27374.880987325054, 1550.4891627105008, 0.955, 18.228571428571428, 23377.654852822347);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 27103.5428195818, 1664.2125831866815, 0.975, 21.202448979591836, 23388.80513318958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 27522.616012521285, 1877.931230046135, 0.975, 21.24244897959184, 23388.80513318958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 27377.390726110447, 2110.7863514474398, 0.975, 19.866938775510203, 23388.80513318958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 27662.048698572056, 1972.7710967983517, 1.12, 22.827755102040815, 22905.006567900873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 28365.996778501674, 2691.9289777401623, 1.12, 22.75265306122449, 22905.006567900873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 27064.89208804577, 1964.2411827053247, 1.12, 19.37469387755102, 22905.006567900873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 28718.668232581367, 2306.5028699007275, 1.205, 21.616326530612245, 23957.465471963344);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 28543.918806768652, 2565.4545783478075, 1.205, 22.26938775510204, 23957.465471963344);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 27878.54811664127, 2497.099271990847, 1.33, 21.682448979591836, 23782.192218862354);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 30025.410579504893, 2331.663309437872, 1.32, 27.549387755102043, 25590.56747780845);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 29786.757982051364, 1846.277117151829, 1.345, 24.557551020408162, 24847.392805280804);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 29416.726911739446, 2524.288429310224, 1.345, 22.318367346938775, 24847.392805280804);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 27317.47026148748, 2036.7100598104462, 1.415, 21.053061224489795, 23068.676888281658);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 27312.688441391772, 2556.0818420911896, 1.415, 21.3534693877551, 23068.676888281658);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 27528.820917485995, 2653.875851109857, 1.415, 20.191836734693876, 23068.676888281658);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 28562.781215303014, 1846.2885435643611, 1.355, 25.461224489795917, 24053.86137382625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 28907.185291958023, 2348.4299432190787, 1.355, 25.542857142857144, 24053.86137382625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 28089.24580645708, 2409.018228833086, 1.45, 25.52, 24053.86137382625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 28955.744766234322, 2500.515128720423, 1.455, 24.204897959183672, 23410.360940398372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 28469.462761073875, 2268.8805493378013, 1.455, 22.146122448979593, 23410.360940398372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 28102.017583783312, 2668.2539232035733, 1.455, 18.936326530612245, 23410.360940398372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 28592.293080245505, 2647.069496476217, 1.46, 24.088979591836736, 24059.590384088653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 27814.419156718883, 2577.3470000501993, 1.46, 23.261224489795918, 24059.590384088653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 27794.067242261943, 2088.311048540482, 1.46, 22.791836734693877, 24059.590384088653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 28635.641778386314, 2270.7425003116978, 1.49, 22.80081632653061, 23043.395067749225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 29575.17347681341, 2210.3664064092472, 1.515, 22.162448979591836, 22751.395067749225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 28823.157769622234, 2512.3968192767175, 1.515, 20.35918367346939, 22751.395067749225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 29407.791714971267, 1783.7444564837624, 1.51, 22.972244897959182, 24030.765702498553);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 28815.71802783105, 1846.6141792887393, 1.51, 22.311836734693877, 24030.765702498553);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 27822.294598632852, 2062.7277247253446, 1.51, 22.030204081632654, 24030.765702498553);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 28001.04229064755, 2511.8772004268735, 1.575, 23.52979591836735, 23154.722214693647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 26886.026086985694, 1967.9102191851005, 1.575, 20.715102040816326, 23154.722214693647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 27572.41818437065, 2905.5608934654633, 1.56, 22.191836734693876, 22816.621641069687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 27967.56377742992, 1795.245673412051, 1.59, 20.28, 23503.325574987983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 27991.262394708312, 2729.1946624797697, 1.59, 21.003265306122447, 23503.325574987983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 27375.303193693286, 2611.863690445754, 1.59, 19.291428571428572, 23503.325574987983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 27350.210822057223, 1975.2150523506814, 1.53, 21.75755102040816, 23415.39145337869);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 27746.914403954175, 2322.6034139555245, 1.53, 22.318367346938775, 23415.39145337869);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 27795.17858694401, 2163.716405860479, 1.53, 21.571428571428573, 23415.39145337869);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 29161.91508375561, 2560.5762995769196, 1.55, 25.28326530612245, 23461.83614862465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 28032.60435124335, 1961.5005577193, 1.55, 23.459591836734695, 23461.83614862465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 27576.755295576764, 2246.9512620844876, 1.55, 23.164897959183673, 23461.83614862465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 28238.16649928857, 2730.721230282621, 1.56, 21.60326530612245, 24441.310102703406);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 28069.294524202425, 3756.733739929258, 1.57, 19.836734693877553, 22943.310882616974);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 27322.39790383869, 2272.9132564315805, 1.57, 20.623673469387754, 22943.310882616974);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 29428.08404108313, 2434.0975362739355, 1.57, 19.913469387755104, 23947.91375619573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 30202.114751410052, 2077.967655778489, 1.57, 22.846530612244898, 23947.91375619573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 28793.776321454734, 2424.462191512062, 1.53, 22.075102040816326, 23947.91375619573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 28608.66780889344, 1777.6312387750738, 1.535, 22.26530612244898, 23893.924405483303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 28826.408510298555, 1861.2281625612393, 1.535, 21.026122448979592, 23893.924405483303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 28476.68994090267, 1900.511968756814, 1.535, 19.697142857142858, 23893.924405483303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 27310.396444740218, 2329.637001426471, 1.51, 21.577142857142857, 23922.281896912435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 26609.56135717094, 2103.2183638381603, 1.51, 19.924897959183674, 23429.537038856273);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 26499.72716812443, 1753.178729747597, 1.51, 19.70938775510204, 23429.537038856273);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 26985.781134022563, 1801.6651708658524, 1.525, 21.848979591836734, 24173.724389665167);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 26836.63346029419, 1987.0271154792024, 1.525, 22.27265306122449, 23729.36848205192);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 26443.84218320251, 1758.4622141070947, 1.505, 21.274285714285714, 23438.874592894572);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 26826.468951996023, 1849.6246723522675, 1.535, 21.903673469387755, 23414.850645195613);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 26596.746425817637, 1731.2176099933124, 1.535, 20.23591836734694, 23414.850645195613);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 26309.78572571875, 1667.5328093888838, 1.535, 21.142857142857142, 23049.850645195613);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 27439.913949812133, 1861.1087346611369, 1.505, 20.463673469387754, 23267.26912147988);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 28249.83882383096, 2371.436040094178, 1.505, 21.268571428571427, 23267.26912147988);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 27281.119720490587, 2329.2136722889286, 1.505, 20.413061224489795, 23267.26912147988);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 26748.81010713864, 1655.0708172865986, 1.5, 19.10938775510204, 24012.149493176858);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 26453.17952373533, 2181.8082092480013, 1.5, 18.324081632653062, 23731.699050695224);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 26394.0287156556, 2120.0270131840075, 1.465, 19.293061224489797, 23485.699050695224);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 27705.47295901553, 1693.0632710846194, 1.46, 21.29061224489796, 23533.86024263806);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 28035.46977773469, 1756.315396211521, 1.46, 18.801632653061226, 23533.86024263806);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 27418.3451642216, 1609.198968344879, 1.46, 18.006530612244898, 23533.86024263806);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 27459.894957785396, 1584.4580084652032, 1.44, 17.089795918367347, 23438.917903959722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 26600.93610140084, 1705.3317963869547, 1.44, 17.97714285714286, 23438.917903959722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 26410.26437912707, 1570.303118406534, 1.44, 18.539591836734694, 23438.917903959722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 27872.180488538273, 1908.0087794112424, 1.42, 19.42938775510204, 23788.888151808478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 27567.069047776422, 1880.9690337875059, 1.42, 18.935510204081634, 23702.888151808478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 27187.739495637416, 1619.6645710905361, 1.42, 16.947755102040816, 23702.888151808478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 27650.028628476644, 1788.9677460022865, 1.36, 20.052244897959184, 24563.07875301414);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 26669.89714814867, 1376.0118426598076, 1.35, 18.36, 23775.339896100926);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 26429.609197448757, 1266.493181851573, 1.305, 18.39673469387755, 23775.339896100926);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 26766.38482570262, 2073.773785467081, 1.32, 18.80081632653061, 23833.404444394997);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 27122.803299711337, 2121.33212545118, 1.32, 18.688163265306123, 23833.404444394997);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 25909.85669870316, 1730.052030110589, 1.32, 16.698775510204083, 23833.404444394997);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 26295.721301868827, 1585.8788966537636, 1.315, 21.0334693877551, 23630.144379455603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 26437.513133496683, 1645.9227900045223, 1.315, 19.34285714285714, 23630.144379455603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 26373.38253117289, 1505.5770474646815, 1.315, 19.99918367346939, 23630.144379455603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 26476.321524515628, 1701.9769736197482, 1.35, 18.03918367346939, 24450.303408699216);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 26401.037944621417, 2079.4357833383606, 1.355, 18.492244897959182, 24172.201520053615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 26157.471301446767, 1795.0532068689618, 1.355, 17.366530612244897, 24172.201520053615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 25948.82058713767, 1652.9685941402304, 1.36, 16.3534693877551, 23494.616859350986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 25761.90300605069, 1225.246129230472, 1.36, 16.128979591836735, 23494.616859350986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 25973.484886607304, 1466.9976948173419, 1.36, 15.503673469387754, 23494.616859350986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 26200.113766079638, 1332.803007211122, 1.29, 17.947755102040816, 24177.757461354486);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 26281.39938508121, 1654.8505892285234, 1.29, 17.023673469387756, 24177.757461354486);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 25906.7855036914, 1297.4644485155131, 1.29, 16.398367346938777, 24177.757461354486);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 26694.0308888678, 1587.7055454818678, 1.275, 17.118367346938776, 24714.701399481513);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 26651.258095073048, 1603.0927904377688, 1.275, 15.594285714285714, 24714.701399481513);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 26983.52506378193, 2001.0748510174587, 1.275, 16.505306122448978, 24714.701399481513);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 26085.72864450626, 1772.4806148869752, 1.295, 17.36326530612245, 23715.857821343096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 25876.691648326032, 1523.189589455668, 1.275, 16.314285714285713, 23604.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 26027.63163200809, 1708.3738904887011, 1.275, 16.33061224489796, 23604.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 25875.167266287444, 1263.3492972791964, 1.265, 13.103673469387756, 24082.756820809445);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 25821.985805524415, 1637.0154836745737, 1.265, 12.17469387755102, 24082.756820809445);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 25793.687317585107, 1434.666677575719, 1.265, 12.33469387755102, 24082.756820809445);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 27789.046473358947, 1767.382939087156, 1.235, 14.728979591836735, 24129.440540687312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 27360.53824426129, 1682.6206816817037, 1.225, 16.226938775510202, 23904.440540687312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 27393.788770009152, 1757.4560452400065, 1.205, 15.72408163265306, 23726.10409638608);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 26717.48342497362, 1948.4501187456624, 1.175, 16.50938775510204, 24114.06582922983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 26155.725358946886, 1922.5420019215182, 1.18, 14.168979591836734, 23967.670502642985);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 26402.05098937908, 2376.826470316535, 1.115, 14.684897959183674, 23827.670502642985);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 26376.132202160727, 1317.179918779423, 1.11, 16.89142857142857, 23645.00603761358);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 26222.78140767556, 1351.656752447407, 1.11, 15.677551020408163, 23464.362650806208);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 26169.04878084524, 1461.3815685047357, 1.11, 14.791020408163265, 23464.362650806208);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 26590.302695974868, 1432.9274890625022, 1.075, 16.86285714285714, 23453.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 26651.946317844588, 1602.2502377971832, 1.075, 14.623673469387755, 23453.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 26589.738841166232, 1704.0315398553416, 1.075, 14.534693877551021, 23453.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 26847.897879609805, 1709.2908859330232, 1.08, 15.373877551020408, 24423.693635190244);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 27097.246664221122, 2101.1877202769674, 1.08, 14.548571428571428, 24423.693635190244);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 26645.408947364424, 1910.1789501015355, 1.08, 13.606530612244898, 24423.693635190244);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 27058.317475733482, 1308.8832666246806, 1.11, 16.339591836734694, 24374.32768693084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 26966.93657148369, 1367.582777041854, 1.115, 17.853877551020407, 24288.19416933002);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 26124.808975216984, 1045.343215792958, 1.115, 16.17142857142857, 24288.19416933002);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 26290.289299866323, 1710.2542165144478, 1.1, 13.696326530612245, 23551.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 25720.960537164803, 2064.8475255293156, 1.1, 11.524897959183674, 23551.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 25866.218885401475, 2013.5567513684225, 1.1, 10.80326530612245, 23551.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 26365.58625102126, 1745.8889103331942, 1.115, 10.361632653061225, 24011.40468692526);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 25863.15922150186, 1765.9066285288434, 1.115, 11.04408163265306, 24011.40468692526);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 26581.999941785343, 1910.7188257011821, 1.115, 11.553469387755102, 24011.40468692526);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 25605.270827807675, 1572.4382475060477, 1.135, 11.417142857142856, 23735.275294009076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 25308.65373862215, 1273.022205259981, 1.135, 11.628571428571428, 23735.275294009076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 25431.712154135308, 1566.5394833644027, 1.135, 11.681632653061225, 23735.275294009076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 25678.660412909434, 1425.648013829518, 1.145, 13.513469387755102, 23515.593986063977);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 26004.487295647355, 1578.5774057325027, 1.145, 11.902857142857142, 23515.593986063977);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 26195.308502029333, 1472.3029528347245, 1.145, 12.73795918367347, 23515.593986063977);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 25825.430605297573, 1473.368717043485, 1.09, 11.39265306122449, 24137.292614596467);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 26026.664850844172, 1719.7885017907201, 1.095, 11.88734693877551, 23735.556018420582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 25527.550555354697, 1400.5823875319159, 1.095, 10.222857142857142, 23735.556018420582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 25704.433506417976, 1574.7487096549019, 1.08, 11.762448979591836, 23463.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 24761.068020608673, 1382.3951526811763, 1.08, 9.871836734693877, 23463.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 24903.71184672796, 1485.7432465136098, 1.03, 10.368979591836736, 23463.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 25605.776635458747, 1932.9625516355927, 1.035, 9.446530612244898, 23704.862511798914);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 24878.65737794714, 1562.134111008456, 1.02, 8.093877551020409, 23680.862511798914);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 25197.361916898066, 1783.7087790504897, 1.02, 8.523265306122449, 23680.862511798914);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 26527.46764020903, 1398.6567402389767, 0.995, 12.45061224489796, 23581.663604676552);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 26815.052470692488, 1322.9630845965771, 0.995, 12.322448979591837, 23581.663604676552);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 26956.347725257845, 1465.894299672379, 0.995, 12.377142857142857, 23581.663604676552);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 26502.98372020353, 1509.3281674932061, 0.97, 11.132244897959184, 23675.03021001058);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 26559.986597190047, 1324.4436698614122, 0.97, 13.666122448979593, 23675.03021001058);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 26703.21449811752, 1342.2318829389123, 0.97, 13.663673469387755, 23675.03021001058);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 25402.776934333284, 1544.6940450235797, 1.0, 10.35673469387755, 23578.350218422704);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 25057.846791521482, 1759.9485892989896, 1.0, 7.963265306122449, 23578.350218422704);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 24429.26929574141, 1256.8439994687399, 0.99, 7.639183673469388, 23558.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 24972.649669591392, 1387.2938931946821, 0.97, 8.81795918367347, 23535.670200045817);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 25493.198280616944, 1802.2011386585866, 0.97, 9.82530612244898, 23535.670200045817);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 25414.120485470627, 1653.6264923312467, 0.97, 8.881632653061224, 23535.670200045817);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 25549.501544177947, 1695.7690428878, 0.945, 9.576326530612246, 23573.81692839063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 25345.93538909445, 1826.4297456965162, 0.945, 8.452244897959183, 23573.81692839063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 26072.295939184314, 1702.0874659805584, 0.945, 9.042448979591837, 23573.81692839063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 26223.227403239478, 1179.9990155918806, 0.875, 8.555102040816326, 23712.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 25972.181424730887, 1313.6756174406216, 0.875, 8.631836734693877, 23712.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 26159.50245440507, 1503.7246942024267, 0.85, 9.96408163265306, 23688.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 25990.56325848143, 1682.9459025120473, 0.85, 8.138775510204082, 23809.131724967836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 26314.420862427643, 1530.2754413637638, 0.85, 7.928979591836734, 23809.131724967836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 26352.080331723973, 1686.8853584897854, 0.85, 6.917551020408164, 23809.131724967836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 24940.01120504619, 1569.9388429058113, 0.84, 6.460408163265306, 23392.061284796306);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 25263.826499333183, 1802.8856792757063, 0.84, 6.918367346938775, 23392.061284796306);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 25107.176871915726, 1704.6845892411322, 0.84, 5.895510204081632, 23392.061284796306);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 24984.935559340385, 1722.5474181067136, 0.815, 6.616326530612245, 23466.748210273243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 25040.458166916735, 1678.5900010471628, 0.815, 6.857142857142857, 23466.748210273243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 24828.243996930174, 1566.9431290053385, 0.81, 6.013877551020408, 23466.748210273243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 26056.49666844031, 1590.007847250445, 0.81, 8.411428571428571, 24319.448099907415);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 25876.572523283838, 1643.9975533545555, 0.81, 6.856326530612245, 24319.448099907415);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 25754.614568523342, 1832.4208535837554, 0.785, 7.718367346938775, 23941.371163420947);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 26008.64531799499, 1750.0742413606638, 0.79, 8.659591836734695, 23461.773439680863);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 25625.74571804272, 1876.112832180379, 0.79, 8.017142857142858, 23461.773439680863);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 25784.879965558317, 1904.1934050087125, 0.79, 7.190204081632653, 23461.773439680863);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 25846.515092407066, 1654.6623668593872, 0.805, 6.284897959183674, 23900.51640931161);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 25501.265228379798, 1625.8776670892232, 0.805, 5.171428571428572, 23900.51640931161);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 25633.26649481183, 1640.7973617050816, 0.805, 5.644897959183673, 23900.51640931161);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 25461.86279198649, 1698.9518718832248, 0.77, 5.404081632653061, 23717.96271847219);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 24610.44883619616, 1338.6375533018584, 0.77, 5.057142857142857, 23717.96271847219);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 24733.818946631687, 1447.804416169762, 0.77, 5.150204081632653, 23717.96271847219);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 26341.504743484547, 1813.4014949077862, 0.755, 6.034285714285715, 23962.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 25316.286518190915, 1417.8730038286856, 0.755, 4.2995918367346935, 23962.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 25781.737393662217, 1653.9461089142544, 0.77, 5.948571428571428, 23933.26617724142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 25751.02650948143, 1600.7296484346884, 0.78, 6.972244897959183, 23941.29057291243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 26927.20938791027, 2185.1390313526076, 0.78, 7.32734693877551, 23941.29057291243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 26689.41876978783, 2053.3320614974755, 0.78, 6.635102040816326, 23941.29057291243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 26270.64511879924, 2069.472537168914, 0.765, 6.572244897959184, 23930.740522577136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 26030.50271677292, 1528.0903053218083, 0.765, 5.724897959183673, 23930.740522577136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 25371.59856202138, 1810.8926664634594, 0.765, 3.764081632653061, 23930.740522577136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 26466.241733021707, 1497.0941461178375, 0.755, 6.8, 24258.592336268965);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 26213.847922258657, 977.3233554437077, 0.755, 5.613061224489796, 24258.592336268965);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 26573.255596786774, 1173.7014935712518, 0.755, 6.174693877551021, 24258.592336268965);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 25480.82127528871, 1563.1567615961703, 0.73, 4.803265306122449, 24106.325235392564);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 25743.91914276818, 1567.5167270355694, 0.73, 6.140408163265306, 24106.325235392564);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 25608.56586964774, 1384.4263402413853, 0.73, 5.853877551020408, 24106.325235392564);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 25715.759828424863, 1660.3055400238418, 0.71, 6.510204081632653, 23977.53871428529);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 25394.013198343902, 1387.902154300682, 0.71, 5.003265306122449, 23977.53871428529);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 25331.646362683125, 1405.6667196689489, 0.72, 4.563265306122449, 23977.53871428529);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 25233.80199141528, 1428.319084804469, 0.735, 4.3795918367346935, 23920.71526441982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 25044.096342023433, 1516.846625995138, 0.735, 4.600816326530612, 23920.71526441982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 24735.952197640985, 1224.232038119362, 0.735, 2.9885714285714284, 23920.71526441982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 24320.752827357, 992.4981320562547, 0.75, 3.0775510204081633, 23665.809467887048);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 24174.93663274335, 939.2637532006806, 0.75, 2.2767346938775512, 23665.809467887048);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 24440.243442655308, 1285.203556709002, 0.735, 2.8546938775510204, 23515.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 25723.151298512985, 1809.5657946400906, 0.725, 4.803265306122449, 23655.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 24852.89222722316, 1651.2588242455533, 0.725, 4.284081632653061, 23655.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 24800.904448670106, 1477.3636799435471, 0.725, 4.871836734693877, 23655.30857334943);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 24791.114809522278, 1604.0483696407696, 0.74, 3.3314285714285714, 23725.119717628768);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 24233.003198015802, 1191.7183771360158, 0.74, 2.317551020408163, 23725.119717628768);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 24348.005801097137, 1339.925072043878, 0.74, 2.3379591836734694, 23725.119717628768);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 26798.60336767302, 883.7277395395919, 0.73, 7.457142857142857, 24103.36223771094);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 26176.005324605903, 1349.9834324816272, 0.73, 6.036734693877551, 24103.36223771094);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 25906.603898410845, 1394.3563001109205, 0.735, 6.03265306122449, 23969.36223771094);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 26117.723522269054, 1185.9275836847753, 0.745, 5.351020408163265, 23955.421974742712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 25382.083626101325, 1312.640867351013, 0.745, 4.75265306122449, 23955.421974742712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 25677.484526932156, 1373.8221269103005, 0.745, 4.356734693877551, 23955.421974742712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 24710.06271505184, 1366.7360971619087, 0.75, 3.7820408163265307, 23615.5243232707);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 24611.683236636054, 1248.0636017745924, 0.75, 3.6742857142857144, 23615.5243232707);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 24753.69895851047, 1340.0262084707088, 0.75, 3.8481632653061224, 23615.5243232707);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 25023.622951126792, 1069.3143902180125, 0.72, 4.052244897959183, 24106.30822055996);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 24987.617990191877, 1153.540580001019, 0.72, 3.263673469387755, 24106.30822055996);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 25041.297004181713, 1133.0750108885588, 0.72, 4.300408163265306, 24106.30822055996);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 24861.9946557767, 1243.1899197705948, 0.7, 3.260408163265306, 24051.44773327766);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 24664.252787615205, 1144.5839419345687, 0.7, 2.9159183673469387, 24051.44773327766);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 24640.02773327768, 1087.7673462610635, 0.685, 2.3836734693877553, 23975.44773327766);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 25416.1655529579, 1217.419550861042, 0.685, 4.233469387755102, 24043.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 25244.96466386363, 929.1380535378986, 0.685, 3.0040816326530613, 24043.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 25062.793800125484, 942.2773470241033, 0.68, 3.1028571428571428, 24043.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 25059.449128456614, 518.1443758461169, 0.67, 1.7314285714285715, 23965.060771093016);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 25168.077811461193, 796.621949173834, 0.67, 1.590204081632653, 23965.060771093016);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 25050.89354554118, 473.7001648236139, 0.67, 1.553469387755102, 23965.060771093016);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 26001.616117921476, 1724.322292547685, 0.685, 3.4857142857142858, 24148.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 25365.210553249428, 1471.4638069085106, 0.685, 2.599183673469388, 24148.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 25480.264762396986, 1683.1348166441164, 0.685, 2.63265306122449, 24148.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 24399.331666009602, 782.1688381855744, 0.67, 1.726530612244898, 24009.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 24341.61672833628, 759.0902141290086, 0.67, 1.4816326530612245, 24009.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 24320.29672833628, 680.1555451720423, 0.67, 1.4473469387755102, 24009.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 24384.944934470615, 479.6717758985723, 0.675, 1.7436734693877551, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 24335.271329432653, 502.1336305446796, 0.675, 0.8734693877551021, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 24348.411329432653, 610.1899730597672, 0.675, 1.2514285714285713, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 24079.8387017649, 175.17632317231957, 0.66, 1.030204081632653, 24009.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 24178.48454310766, 327.8097277020058, 0.66, 1.3575510204081633, 24009.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 24219.48927718452, 466.09291333787934, 0.66, 1.6261224489795918, 23936.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 24120.50106119823, 292.503628452195, 0.65, 1.4220408163265306, 24012.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 24115.64372901979, 329.8765272812433, 0.65, 1.0742857142857143, 24012.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 24185.15504212194, 517.3999006797869, 0.65, 1.3404081632653062, 24012.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 25442.130656142566, 718.0475721327506, 0.645, 4.126530612244898, 24080.279317062963);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 25638.050111139764, 682.5060519860424, 0.645, 2.9518367346938774, 24080.279317062963);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 25726.07627639712, 576.4150460100586, 0.645, 2.9926530612244897, 24080.279317062963);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 24568.377191735897, 730.8800720552066, 0.64, 1.516734693877551, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 24235.359921237206, 495.4488722006075, 0.64, 0.35591836734693877, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 24165.537362702147, 47.27501468258192, 0.64, 0.08, 24155.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 24236.04556028959, 94.41653909921229, 0.635, 1.1934693877551021, 24132.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 24296.48483124791, 350.53155372025515, 0.635, 1.453061224489796, 24132.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 24288.939409298062, 343.5328396733739, 0.635, 1.5526530612244898, 24132.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 24300.401214925987, 543.8560070987628, 0.615, 1.4285714285714286, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 24210.1116660096, 72.05519709619442, 0.615, 1.0742857142857143, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 24206.251666009604, 69.91452507402543, 0.595, 1.2163265306122448, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 24298.963304230572, 193.55332096327754, 0.59, 0.8906122448979592, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 24522.666849452948, 502.08883929860093, 0.59, 1.8473469387755102, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 24321.62271336017, 194.78444956478432, 0.59, 1.1387755102040817, 24080.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 24641.64893076518, 261.6444297115127, 0.585, 1.3942857142857144, 24226.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 24597.798348956858, 261.0477907478362, 0.585, 1.6, 24226.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 24581.8796798972, 216.6614245428236, 0.585, 1.4473469387755102, 24226.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 24281.861183364275, 213.54657253344368, 0.59, 1.6310204081632653, 24168.788160498534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 24239.00721215184, 201.75574199117912, 0.59, 1.1183673469387756, 24168.788160498534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 24266.489752372283, 249.99187602727295, 0.585, 1.476734693877551, 24095.788160498534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 24218.251666009604, 155.90578002401955, 0.585, 1.343673469387755, 24153.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 24242.271666009605, 224.0016481353361, 0.585, 1.5224489795918368, 24153.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 24251.9516660096, 223.78955584683226, 0.585, 1.5273469387755103, 24153.8516660096);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 24785.633845163607, 517.1162095830924, 0.59, 1.986122448979592, 24284.82418266289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 24486.787042125125, 344.2211231964763, 0.59, 0.8351020408163266, 24284.82418266289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 24455.07275605401, 323.8220400614843, 0.59, 0.7004081632653061, 24284.82418266289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 24574.30734548239, 124.59110623122028, 0.58, 1.116734693877551, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 24444.62967831636, 125.32311348552204, 0.58, 1.5355102040816326, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 24392.74378926101, 89.95850226893452, 0.58, 1.1020408163265305, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 24340.709708562397, 65.46671766437865, 0.585, 1.0481632653061224, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 24327.608995515104, 51.26053898607442, 0.585, 0.9428571428571428, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 24326.109708562395, 55.65119248308443, 0.585, 0.8073469387755102, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 24973.31209651704, 276.15031255155355, 0.58, 0.7118367346938775, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 24972.426771256014, 294.9079152832868, 0.58, 0.6024489795918367, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 24942.030782195485, 317.98152813652666, 0.58, 0.7004081632653061, 24349.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 24313.048995515102, 21.711287386979155, 0.57, 0.7853061224489796, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 24300.308995515104, 1.469965419604284E-11, 0.57, 0.0, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 24300.308995515104, 1.469965419604284E-11, 0.57, 0.0, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 24300.308995515104, 1.469965419604284E-11, 0.565, 0.0, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 24300.308995515104, 1.469965419604284E-11, 0.565, 0.0, 24300.30899551509);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 24300.308995515104, 1.469965419604284E-11, 0.565, 0.0, 24300.30899551509);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(15000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 100);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(22602.85477478154);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(22602.85477478154);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 89, 48, 91, 7, 30, 79, 88, 41, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 6, 56, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 40, 70, 99, 13, 2, 42, 45, 28, 82, 54, 33, 57, 27, 92, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 27, 92, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 44, 46, 92, 27, 57, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 61, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 33, 54, 82, 11, 26, 85, 34, 76, 59, 44, 46, 92, 27, 57, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 82, 54, 33, 11, 26, 85, 34, 19, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 19, 85, 34, 26, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 68, 63, 39, 53, 1, 49, 43, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 68, 63, 39, 53, 1, 49, 43, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 6, 8, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 26, 85, 19, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 24, 80, 86, 56, 6, 8, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 8, 6, 56, 86, 50, 85, 34, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 8, 6, 56, 86, 50, 85, 34, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 43, 1, 49, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 45, 28, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 2, 42, 45, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 19, 56, 86, 8, 6, 85, 34, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 63, 39, 53, 1, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 63, 39, 53, 1, 43, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 63, 39, 53, 1, 43, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 63, 39, 53, 1, 43, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 63, 39, 53, 1, 43, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 49, 72, 63, 39, 53, 1, 43, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 76, 86, 8, 6, 56, 19, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 19, 6, 8, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 62, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 66, 57, 27, 92, 46, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 31609.844507537066, 2056.349315821938, 0.0, 54.755918367346936, 25325.55591839433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 24279.378324876245, 2134.224224078609, 0.495, 3.4881632653061225, 22916.787921968014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 23862.038560846235, 2022.9903824228718, 0.5, 2.9355102040816328, 22789.787921968014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 25324.907772683175, 2035.0711467115152, 0.5, 7.2995918367346935, 23207.90468263777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 25130.312251350177, 2056.559484162631, 0.72, 8.576326530612246, 22843.103780273785);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 24060.965423612506, 1086.1141901776648, 0.675, 6.126530612244898, 22843.103780273785);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 27554.21859668729, 1902.996488403635, 0.655, 17.748571428571427, 24329.836857629794);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 24354.96920785471, 1527.1893376148596, 0.97, 14.18530612244898, 22655.909320779698);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 23877.17942331237, 1582.7115715665493, 0.85, 8.656326530612246, 22593.97940082742);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 25953.131381533887, 1522.8417780554148, 0.845, 13.747755102040816, 22879.145265982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 24775.451363149878, 2027.091837065632, 0.91, 11.259591836734694, 22270.537258934797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 24170.76586894959, 1816.7293364605566, 0.78, 8.662040816326531, 21988.434611312492);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 24632.757001826063, 1706.571442157799, 0.77, 8.706122448979592, 22141.26967952641);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 24517.861930860567, 1925.6613875447783, 0.77, 8.616326530612245, 22042.26967952641);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 24062.53779551949, 2069.5899017760303, 0.605, 5.435102040816327, 22042.26967952641);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 24819.166518550915, 2034.9078891979793, 0.615, 6.92, 22555.840741066866);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 23866.30705209071, 2316.136058840487, 0.61, 3.8546938775510204, 22349.85477478154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 22912.491709223745, 1216.1231179577471, 0.58, 3.2122448979591836, 22289.22548207527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 25872.339861573004, 2076.389497159203, 0.585, 8.297142857142857, 22454.407010864645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 23604.0183252171, 1453.4631654483553, 0.585, 3.213877551020408, 22454.407010864645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 22814.444602921667, 961.9759532464825, 0.585, 1.1371428571428572, 22454.407010864645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 25202.842117840984, 1043.6130065180905, 0.575, 5.2, 23039.892808502496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 23306.49569794999, 687.891208147837, 0.635, 4.012244897959183, 22647.892808502496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 23129.369765804837, 676.112392739804, 0.57, 2.782857142857143, 22647.892808502496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 23488.795934339956, 969.181114829263, 0.575, 2.715918367346939, 22308.07144875813);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 22526.255787920534, 622.5384547325847, 0.575, 1.4114285714285715, 22308.07144875813);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 22600.427115278606, 738.5196111851534, 0.535, 0.9771428571428571, 22308.07144875813);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 23148.996838913732, 313.30676024341375, 0.53, 2.5575510204081633, 22602.85477478154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 22886.743233832425, 295.6836671428475, 0.53, 1.9746938775510203, 22602.85477478154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 22602.854774781525, 1.469965419604284E-11, 0.525, 0.0, 22602.85477478154);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(10000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 10);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(29682.122291926444);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(29682.122291926444);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 46, 112, 71, 9, 83, 98, 110, 101, 103, 37, 23, 17, 78, 52, 133, 105, 89, 48, 18, 74, 7, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 130, 92, 27, 104, 141, 57, 107, 66, 147, 137, 132, 88, 30, 79, 121, 41, 138, 55, 118, 142, 96, 117, 3, 64, 65, 25, 123, 128, 69, 21, 93, 15, 87, 136, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 16, 14, 10, 31, 108, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 119, 114, 45, 28, 131, 111, 145, 146, 38, 100, 120, 29, 106, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 102, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 127, 135, 42, 122, 33, 148, 82, 54, 11, 26, 85, 19, 56, 116, 134, 139, 6, 8, 144, 86, 124, 50, 60, 24, 80, 62, 46, 112, 71, 9, 83, 17, 78, 133, 52, 105, 89, 5, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 130, 92, 27, 91, 7, 41, 121, 55, 142, 118, 3, 64, 65, 128, 123, 25, 117, 96, 18, 74, 138, 79, 30, 88, 132, 137, 39, 53, 63, 143, 1, 113, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 42, 122, 127, 135, 119, 114, 11, 24, 80, 68, 72, 49, 67, 84, 147, 141, 104, 66, 107, 57, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 54, 82, 148, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 136, 87, 15, 93, 21, 69, 52, 133, 105, 89, 5, 48, 62, 112, 71, 9, 83, 46, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 138, 74, 18, 96, 117, 25, 123, 128, 65, 64, 3, 118, 142, 55, 79, 30, 121, 41, 88, 137, 132, 147, 141, 104, 66, 107, 57, 34, 19, 56, 8, 6, 116, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 50, 124, 86, 144, 139, 134, 33, 106, 29, 120, 100, 38, 146, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 95, 77, 51, 13, 40, 70, 99, 47, 131, 111, 28, 45, 2, 127, 135, 42, 122, 114, 119, 148, 82, 54, 11, 26, 85, 149, 61, 59, 76, 109, 97, 22, 44, 90, 108, 31, 16, 14, 10, 46, 112, 71, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 23, 37, 93, 105, 133, 52, 69, 21, 15, 87, 136, 78, 17, 83, 9, 89, 48, 5, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 30, 79, 142, 55, 96, 74, 18, 52, 133, 105, 78, 136, 17, 37, 103, 110, 101, 98, 126, 58, 140, 73, 20, 71, 112, 83, 9, 89, 5, 48, 62, 46, 44, 108, 90, 97, 22, 109, 76, 59, 61, 149, 85, 19, 56, 8, 6, 116, 139, 134, 33, 54, 82, 148, 26, 11, 34, 119, 114, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 131, 111, 28, 45, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 75, 12, 32, 145, 102, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 50, 124, 86, 144, 57, 107, 66, 104, 141, 147, 137, 132, 88, 41, 138, 118, 3, 64, 117, 123, 25, 128, 65, 69, 15, 87, 21, 93, 23, 35, 16, 14, 10, 31, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 96, 18, 74, 5, 48, 89, 105, 78, 136, 133, 52, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 112, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 19, 56, 8, 6, 116, 139, 134, 33, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 106, 47, 99, 70, 40, 13, 11, 34, 86, 144, 50, 124, 60, 24, 80, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 96, 18, 74, 55, 142, 118, 3, 65, 128, 25, 123, 117, 64, 69, 93, 21, 15, 87, 52, 133, 136, 78, 105, 89, 5, 48, 62, 112, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 83, 9, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 116, 6, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 32, 145, 102, 75, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 134, 139, 19, 34, 119, 114, 122, 42, 135, 127, 57, 107, 66, 132, 137, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 96, 18, 74, 48, 5, 62, 46, 112, 83, 9, 89, 105, 133, 52, 136, 78, 15, 87, 93, 21, 69, 17, 23, 37, 103, 110, 101, 98, 35, 126, 140, 58, 73, 20, 71, 16, 14, 10, 31, 108, 90, 97, 22, 44, 149, 85, 26, 19, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 135, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 146, 38, 100, 120, 29, 106, 111, 28, 131, 45, 127, 11, 34, 61, 59, 109, 76, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 113, 43, 49, 72, 67, 84, 115, 81, 125, 94, 12, 75, 32, 145, 102, 1, 143, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 117, 123, 25, 128, 65, 69, 21, 93, 15, 87, 136, 78, 105, 133, 52, 18, 74, 96, 62, 5, 48, 89, 9, 83, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 113, 143, 1, 43, 49, 72, 67, 84, 106, 120, 29, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 47, 99, 40, 70, 13, 2, 135, 42, 122, 45, 28, 131, 111, 116, 6, 8, 56, 19, 34, 119, 114, 127, 57, 107, 66, 132, 137, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 96, 74, 18, 133, 52, 87, 15, 21, 69, 93, 136, 78, 105, 89, 5, 48, 62, 112, 71, 9, 83, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 16, 14, 10, 31, 46, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 51, 77, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 135, 42, 122, 45, 28, 131, 111, 2, 127, 114, 119, 34, 19, 56, 8, 6, 116, 57, 66, 104, 107, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 15, 87, 136, 78, 105, 89, 48, 5, 62, 112, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 83, 9, 133, 52, 18, 74, 96, 132, 137, 147, 141, 104, 66, 107, 57, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 120, 29, 100, 38, 146, 84, 67, 139, 134, 33, 54, 82, 148, 26, 85, 149, 34, 19, 11, 119, 114, 122, 45, 28, 131, 111, 106, 47, 99, 70, 40, 135, 2, 13, 127, 42, 116, 8, 6, 56, 144, 86, 124, 50, 109, 76, 59, 61, 22, 97, 90, 108, 31, 10, 14, 16, 44, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 96, 74, 18, 52, 133, 105, 78, 136, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 89, 48, 5, 62, 112, 71, 83, 9, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 109, 76, 59, 61, 149, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 124, 50, 60, 24, 80, 68, 72, 49, 43, 143, 113, 39, 63, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 120, 29, 106, 100, 38, 146, 84, 67, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 135, 2, 45, 28, 131, 111, 13, 40, 70, 99, 47, 127, 34, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 93, 21, 69, 15, 87, 136, 78, 105, 89, 9, 83, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 112, 62, 5, 48, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 11, 148, 54, 82, 6, 8, 116, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 145, 102, 12, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 84, 67, 134, 139, 19, 34, 119, 114, 122, 42, 127, 33, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 69, 93, 21, 15, 87, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 62, 5, 48, 74, 96, 18, 52, 133, 105, 89, 83, 9, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 76, 109, 59, 61, 19, 149, 34, 85, 26, 119, 114, 122, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 135, 42, 127, 2, 33, 82, 54, 148, 11, 116, 8, 6, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 84, 67, 139, 134, 113, 143, 63, 39, 53, 1, 43, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 69, 21, 15, 87, 93, 17, 136, 78, 105, 89, 48, 5, 62, 112, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 83, 9, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 76, 109, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 116, 6, 8, 56, 19, 34, 119, 114, 45, 2, 135, 127, 42, 122, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 47, 99, 70, 40, 13, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 107, 66, 104, 57, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 105, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 90, 97, 22, 44, 31, 16, 14, 10, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 119, 114, 122, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 42, 127, 33, 82, 54, 148, 6, 116, 139, 134, 84, 67, 72, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 1, 53, 39, 63, 143, 68, 80, 24, 60, 124, 50, 144, 86, 56, 8, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 140, 58, 73, 20, 71, 112, 9, 83, 105, 89, 5, 48, 62, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 54, 82, 148, 119, 114, 122, 42, 127, 135, 13, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 75, 32, 145, 102, 12, 84, 67, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 105, 89, 48, 5, 62, 112, 71, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 83, 9, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 19, 56, 6, 8, 116, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 146, 84, 67, 139, 134, 33, 82, 54, 148, 11, 26, 85, 119, 114, 122, 42, 127, 135, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 98, 101, 110, 103, 35, 126, 58, 140, 73, 71, 9, 83, 105, 89, 48, 5, 62, 46, 112, 20, 16, 14, 10, 108, 31, 90, 44, 97, 22, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 84, 67, 72, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 109, 76, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 116, 8, 6, 56, 19, 34, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 51, 77, 47, 99, 70, 40, 13, 2, 135, 42, 122, 45, 28, 131, 111, 29, 120, 106, 100, 38, 146, 84, 67, 72, 68, 139, 134, 119, 114, 127, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 140, 58, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 11, 19, 56, 8, 6, 116, 54, 82, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 84, 67, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 126, 58, 140, 16, 14, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 114, 119, 122, 42, 127, 135, 2, 13, 47, 99, 40, 70, 131, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 134, 139, 33, 28, 45, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 62, 5, 48, 89, 105, 112, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 75, 32, 145, 102, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 2, 45, 28, 131, 111, 134, 139, 82, 54, 148, 114, 119, 122, 42, 13, 33, 127, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 101, 110, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 59, 61, 149, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 84, 67, 72, 107, 57, 66, 104, 141, 147, 132, 137, 109, 76, 34, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 5, 48, 62, 112, 46, 108, 90, 31, 10, 16, 14, 44, 97, 22, 59, 61, 149, 85, 26, 11, 148, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 127, 42, 114, 119, 34, 56, 6, 8, 116, 19, 109, 76, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 11, 50, 124, 86, 144, 60, 24, 80, 68, 72, 67, 84, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 49, 43, 113, 143, 63, 39, 53, 1, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 62, 5, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 76, 109, 59, 61, 149, 34, 85, 26, 11, 148, 82, 54, 33, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 84, 67, 72, 49, 115, 81, 125, 94, 75, 32, 145, 102, 12, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 50, 124, 86, 144, 56, 6, 8, 116, 139, 134, 19, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 51, 77, 95, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 127, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 141, 147, 132, 137, 66, 104, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 62, 112, 46, 14, 16, 10, 31, 108, 90, 44, 97, 22, 59, 61, 109, 76, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 51, 77, 95, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 127, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 54, 82, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 146, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 32, 145, 102, 75, 84, 67, 107, 57, 66, 104, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 31, 14, 16, 10, 44, 108, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 54, 82, 148, 119, 114, 122, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 32, 75, 145, 102, 47, 99, 70, 40, 13, 135, 127, 42, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 113, 143, 72, 49, 67, 84, 107, 57, 104, 66, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 102, 145, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 67, 84, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 13, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 54, 82, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 51, 77, 47, 99, 70, 40, 13, 135, 127, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 107, 57, 66, 147, 132, 137, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 95, 77, 51, 47, 99, 70, 40, 135, 127, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 145, 102, 12, 4, 36, 146, 84, 67, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 56, 6, 8, 116, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 76, 109, 59, 61, 149, 85, 26, 19, 11, 148, 54, 82, 33, 134, 139, 86, 144, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 114, 119, 34, 6, 8, 116, 56, 57, 107, 66, 104, 141, 137, 132, 147, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 8, 139, 134, 33, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 111, 131, 28, 45, 2, 135, 127, 42, 122, 119, 114, 148, 82, 54, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 119, 114, 122, 127, 42, 2, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 111, 131, 28, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 107, 57, 66, 137, 132, 147, 141, 104, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 33, 134, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 144, 86, 139, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 146, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 84, 67, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 84, 67, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 119, 114, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38, 100, 120, 29, 106, 111, 131, 28, 13, 127, 122, 42, 2, 45, 135, 70, 40, 99, 47, 77, 51, 95, 84, 67, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 86, 144, 50, 124, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 146, 67, 84, 134, 139, 116, 6, 8, 56, 82, 54, 148, 114, 119, 122, 42, 127, 33, 60, 57, 107, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 13, 40, 70, 99, 47, 102, 145, 32, 75, 12, 94, 125, 81, 115, 1, 53, 39, 63, 143, 113, 43, 49, 72, 67, 84, 146, 36, 4, 51, 77, 95, 38, 100, 29, 120, 106, 111, 131, 28, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 119, 114, 122, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 42, 127, 33, 134, 139, 144, 86, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 84, 67, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 146, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 50, 124, 144, 86, 139, 134, 33, 13, 70, 40, 99, 47, 51, 77, 95, 84, 67, 72, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 84, 67, 72, 113, 143, 63, 39, 53, 1, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 28, 131, 111, 106, 29, 120, 100, 38, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 77, 95, 51, 47, 99, 40, 70, 13, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 45, 42, 127, 135, 2, 13, 70, 40, 99, 47, 51, 77, 95, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 1, 53, 39, 63, 143, 113, 43, 49, 72, 67, 84, 100, 29, 120, 106, 111, 131, 28, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 45, 28, 131, 111, 106, 29, 120, 100, 38, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 12, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 2, 33, 134, 139, 144, 86, 124, 50, 24, 80, 68, 60, 57, 107, 66, 137, 132, 147, 141, 104, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 131, 111, 106, 120, 29, 100, 38, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 28, 33, 134, 139, 67, 84, 72, 143, 113, 43, 49, 115, 102, 145, 32, 75, 12, 94, 125, 81, 1, 53, 39, 63, 68, 80, 24, 86, 144, 124, 50, 60, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 84, 67, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 47, 99, 40, 70, 13, 33, 134, 139, 86, 144, 124, 50, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 84, 67, 60, 57, 107, 66, 104, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 146, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 1, 53, 39, 63, 143, 113, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 63, 39, 53, 143, 1, 43, 113, 72, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 146, 84, 67, 107, 57, 104, 66, 137, 132, 147, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 1, 53, 39, 63, 143, 113, 43, 49, 72, 68, 24, 80, 67, 84, 38, 100, 120, 106, 29, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 57, 107, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 1, 53, 39, 63, 143, 113, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 113, 43, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 72, 113, 1, 53, 39, 63, 143, 43, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 81, 125, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 139, 134, 144, 86, 124, 50, 60, 80, 24, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 125, 94, 81, 115, 49, 43, 143, 63, 39, 53, 1, 113, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 1, 53, 39, 63, 143, 113, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 1, 53, 39, 63, 143, 113, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 66, 104, 141, 147, 132, 137, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 1, 53, 39, 63, 143, 113, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 50, 124, 24, 80, 60, 57, 107, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 2, 45, 33, 134, 139, 86, 144, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 107, 57, 66, 104, 141, 137, 132, 147, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 100, 38, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 137, 132, 147, 107, 57, 66, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 45, 2, 33, 134, 139, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 50, 124, 60, 80, 24, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 2, 45, 28, 33, 139, 134, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 139, 134, 144, 86, 124, 50, 60, 24, 80, 68, 137, 132, 147, 141, 104, 66, 107, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 57, 107, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 50, 124, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 132, 137, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 137, 132, 147, 104, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 104, 141, 66, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 57, 107, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 91, 129, 7, 121, 41, 88, 30, 79, 138, 55, 142, 118, 3, 64, 65, 128, 25, 117, 123, 96, 74, 18, 52, 133, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 98, 110, 101, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 48, 5, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 67, 84, 38, 100, 29, 120, 106, 111, 131, 28, 2, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 107, 57, 66, 104, 141, 147, 137, 132, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 40248.55777154385, 2529.8649955440183, 0.0, 80.83591836734693, 34751.04929171269);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 36056.20571593482, 2120.966565233629, 0.49, 23.38530612244898, 31746.128794490905);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 35600.01174297381, 2017.6264499032152, 0.5, 10.28734693877551, 31628.71049880187);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 38424.2594327183, 2385.0164424986656, 0.51, 39.46204081632653, 33912.33167895023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 36576.0582468185, 1871.2625528839321, 1.2633333333333334, 48.51510204081632, 30921.63961186969);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 35856.49306713245, 1828.3844641086075, 1.2633333333333334, 40.309387755102044, 30921.63961186969);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 36792.30683370004, 1540.0918255914228, 1.3633333333333333, 45.6, 32978.704565897075);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 36743.407991414024, 1351.8443200646138, 1.3633333333333333, 45.922448979591834, 32978.704565897075);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 36843.94914168634, 1419.141599907911, 1.6466666666666667, 43.90775510204082, 32015.71750455309);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 37817.783474423, 2239.2697007022093, 1.68, 49.87428571428571, 32367.975368720177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 37455.058459642125, 1898.5420481417714, 1.68, 49.0865306122449, 32367.975368720177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 37544.153422530304, 1889.0469389180805, 1.68, 42.91918367346939, 32367.975368720177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 37818.94404178338, 2469.6012204969334, 1.9066666666666667, 46.64163265306122, 33327.79087106926);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 37251.92093766841, 2046.0312965258418, 1.9066666666666667, 46.984489795918364, 33327.79087106926);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 37169.617106620775, 2702.321964746785, 1.9233333333333333, 47.243265306122446, 31182.628017711002);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 37119.38458455277, 1754.1646003466553, 1.96, 44.91673469387755, 31315.450024666814);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 36538.574779577735, 2546.3253699524676, 1.96, 40.01387755102041, 31315.450024666814);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 36446.76713193405, 1488.6875863282435, 1.96, 42.818775510204084, 31315.450024666814);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 37272.4297259408, 2202.007708855245, 1.9466666666666668, 42.95183673469388, 32402.89505682089);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 36422.90435069044, 1647.0263363568613, 1.9733333333333334, 42.63918367346939, 31015.005571576534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 36535.469883014004, 1857.4968624562878, 1.9733333333333334, 41.8465306122449, 31015.005571576534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 37484.2870625257, 1726.1200297596, 2.0166666666666666, 47.21795918367347, 34051.79234061878);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 37746.9709641716, 2010.1418925931494, 2.06, 46.66122448979592, 33675.62855596213);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 36893.275038317435, 1836.6593370608377, 2.14, 45.6865306122449, 32217.270334444765);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 37271.390972992995, 1987.9565568309376, 2.15, 44.034285714285716, 32964.794952961456);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 37066.90917140504, 1889.8712171174418, 2.1466666666666665, 42.85061224489796, 30963.618613995735);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 36766.02968863657, 1927.0363540992125, 2.1466666666666665, 40.87183673469388, 30963.618613995735);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 36188.881069228526, 1998.035379189735, 2.0766666666666667, 42.70938775510204, 31665.95119420201);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 36379.57957091523, 1621.0402722196702, 2.0766666666666667, 42.75020408163265, 31665.95119420201);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 35613.04844252939, 1653.6599368565035, 2.1133333333333333, 40.52816326530612, 31580.4915281803);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 36618.083504208305, 2383.271915865267, 2.1066666666666665, 42.17632653061224, 31928.682897661616);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 36458.2261969169, 2054.554527038789, 2.11, 40.690612244897956, 31086.7957794494);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 36902.30276319195, 2198.374186486894, 2.11, 40.38775510204081, 31086.7957794494);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 35604.1731563425, 2103.0274382824123, 2.0833333333333335, 38.58938775510204, 32277.013470772225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 35208.714174592686, 1886.4311904617423, 2.0766666666666667, 37.3665306122449, 30672.876942794763);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 35098.83011583023, 1888.728629857851, 2.0766666666666667, 36.248979591836736, 30672.876942794763);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 36711.75574668744, 1896.0403928572584, 2.05, 38.47673469387755, 31958.998035701807);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 36834.50268778866, 2042.6081866173188, 2.05, 39.838367346938774, 31958.998035701807);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 35748.706849535505, 1576.2733031679043, 2.05, 36.09469387755102, 31958.998035701807);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 37476.592821381804, 1950.065690323875, 2.0366666666666666, 42.51020408163265, 32841.52791242827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 37067.63208910426, 2184.5850318787266, 2.0366666666666666, 41.95591836734694, 32841.52791242827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 36749.78374977572, 1845.002617699568, 2.1033333333333335, 41.38448979591837, 32270.12690613924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 36396.64149569281, 1687.749883970482, 2.07, 36.4334693877551, 32504.49186426846);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 36521.52909241289, 1869.2200456099317, 2.06, 38.12489795918367, 32195.739923291112);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 36416.40480750404, 2110.5818148600715, 2.06, 37.027755102040814, 32195.739923291112);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 36996.14455676456, 2622.3521144971423, 2.02, 37.928163265306125, 32295.585605445493);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 37004.71975843318, 2061.4947232824093, 2.02, 38.543673469387755, 32295.585605445493);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 36398.53434284921, 2002.9870668663655, 2.02, 36.57061224489796, 32295.585605445493);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 35384.389472503964, 2080.2532932384156, 2.006666666666667, 37.8465306122449, 31649.57994242813);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 35613.83372058722, 1632.5584668287688, 2.013333333333333, 34.46775510204082, 31296.187209769712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 35323.44594039659, 1834.8774106880942, 2.013333333333333, 34.54857142857143, 31296.187209769712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 36348.504642761734, 2048.8194294537557, 1.9566666666666668, 36.76244897959184, 31687.92127771716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 36294.809051617325, 1968.0168276215154, 1.9566666666666668, 33.82693877551021, 31687.92127771716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 36350.02006730301, 2539.9817069432033, 1.9566666666666668, 34.46122448979592, 31687.92127771716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 35344.32617021925, 2440.008749794429, 1.9233333333333333, 31.47020408163265, 30888.315492880083);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 34763.415714534574, 1641.1175066108738, 1.93, 29.777142857142856, 30262.207654510217);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 35040.719438078624, 1758.5477766888127, 1.93, 29.55673469387755, 30262.207654510217);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 37198.88378566428, 2356.7611499066807, 1.8233333333333333, 33.44244897959184, 33329.65707371196);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 34903.71691772679, 1956.2159306427204, 1.8333333333333333, 29.754285714285714, 31450.942945778486);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 34356.626665880605, 1568.0188287170288, 1.79, 27.23673469387755, 31353.833427015434);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 34636.69109697398, 1486.260797705584, 1.84, 31.26204081632653, 30691.927048109945);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 34797.0786333857, 1568.731421835767, 1.84, 29.420408163265307, 30691.927048109945);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 34371.6782931462, 1756.7258403865617, 1.84, 30.121632653061223, 30691.927048109945);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 35283.50919126175, 1488.3689389304334, 1.7666666666666666, 38.61469387755102, 31994.14463980942);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 35317.35498439337, 1392.7070448203165, 1.7666666666666666, 35.84326530612245, 31994.14463980942);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 35362.728310226434, 1940.0120040151478, 1.8733333333333333, 33.65469387755102, 31604.47244225666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 37079.99218427749, 2804.341520182938, 1.8533333333333333, 34.40081632653061, 32564.598815022975);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 36511.798096861516, 1842.0374631668171, 1.8466666666666667, 33.60979591836735, 31691.70001643154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 36380.85630063206, 2109.158693097875, 1.8466666666666667, 32.353469387755105, 31367.319932963983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 35570.23143406186, 1715.1353535354453, 1.7966666666666666, 30.53469387755102, 32851.70786335294);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 35485.42461756099, 2043.1674239937663, 1.7833333333333334, 32.01632653061225, 30645.27889505742);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 35429.00832324644, 2000.42251305059, 1.7833333333333334, 31.073469387755104, 30645.27889505742);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 37526.867627352214, 2145.4421324810905, 1.8033333333333332, 33.55591836734694, 32141.39485408887);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 35671.42866395096, 1444.5328088684878, 1.8133333333333332, 32.093877551020405, 31888.487446904073);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 35911.07005529201, 1603.1541560272387, 1.8133333333333332, 31.848163265306123, 31888.487446904073);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 34994.28907386674, 1957.897856062896, 1.7833333333333334, 30.280816326530612, 31824.02646053174);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 34857.61118491498, 1957.9070460582348, 1.78, 31.110204081632652, 30859.50311079307);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 34743.03693736456, 1570.4424232013173, 1.78, 28.194285714285716, 30859.50311079307);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 35007.259262117215, 1490.418082910095, 1.72, 28.204897959183672, 31865.45379162106);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 34643.01399018796, 1682.8274648023046, 1.71, 26.65795918367347, 30555.807616815135);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 34302.74274394744, 1532.550229629327, 1.71, 27.091428571428573, 30555.807616815135);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 34208.204035863484, 1306.20902343835, 1.66, 26.729795918367348, 31308.218988481105);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 34356.67875437604, 1130.440457118028, 1.66, 28.144489795918368, 31308.218988481105);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 34442.41707403764, 1402.8591028033586, 1.6366666666666667, 27.39673469387755, 31105.24717792129);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 34278.57148889561, 1137.6998202219452, 1.6133333333333333, 28.583673469387755, 30871.47175720599);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 34381.132346264465, 1470.3440856483053, 1.5966666666666667, 28.057142857142857, 30799.037017038143);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 34025.41679661891, 1164.2313667729359, 1.5766666666666667, 26.311020408163266, 30630.808467622952);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 33805.46809677038, 1302.835684132574, 1.5933333333333333, 24.568979591836733, 30828.038864837712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 33927.3394342623, 1482.5888710927097, 1.5966666666666667, 25.780408163265307, 30727.030665644023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 33727.792686558096, 1409.0774309362832, 1.55, 23.768979591836736, 30445.069069350913);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 35348.5151940892, 1658.2875817669471, 1.5266666666666666, 31.917551020408162, 31930.22278164084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 35097.792324086695, 1352.369412435881, 1.5233333333333334, 27.460408163265306, 31520.733057572626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 34593.534999759584, 1312.3729246584596, 1.5233333333333334, 28.91183673469388, 31520.733057572626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 34604.87555772163, 1791.545034326651, 1.4933333333333334, 27.05142857142857, 31971.493293506654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 34139.18973862661, 1214.205902135408, 1.4866666666666666, 27.699591836734694, 31465.191638033142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 34374.80914912403, 1516.2991914740285, 1.4833333333333334, 27.648163265306124, 31019.92121445784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 33094.04455137378, 1453.9675201614034, 1.48, 22.70122448979592, 30655.376924175198);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 33136.188926679395, 1755.6219167339295, 1.47, 23.186122448979592, 30248.28127314497);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 33187.8567010854, 1597.8660179196577, 1.47, 22.268571428571427, 30248.28127314497);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 34695.72711690497, 2461.1592879496848, 1.43, 26.10612244897959, 31271.590069860216);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 34895.439943585254, 2072.678531687952, 1.4366666666666668, 26.816326530612244, 30967.86349387287);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 34397.717934102744, 2111.8306594206383, 1.4466666666666668, 27.075102040816326, 30928.83132513734);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 33540.099842328666, 1191.3960488806376, 1.4266666666666667, 23.485714285714284, 30631.234367869467);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 33085.66523731353, 1257.4537437113033, 1.4233333333333333, 22.34857142857143, 30277.63817330498);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 33317.83141817819, 1232.1946682164123, 1.4233333333333333, 22.9665306122449, 30277.63817330498);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 35372.79163897389, 1825.5057113682276, 1.37, 26.389387755102042, 31927.3422738468);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 34919.46880976709, 1190.2791822462973, 1.3733333333333333, 24.706122448979592, 31624.3422738468);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 34460.93247103236, 1604.402670365808, 1.3533333333333333, 23.819591836734695, 31495.71138142202);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 34394.882409163896, 1777.0825096841122, 1.3433333333333333, 23.256326530612245, 30775.778115772922);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 34297.80456491194, 1768.039951442338, 1.3433333333333333, 22.720816326530613, 30775.778115772922);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 34575.86028072191, 1817.312472311906, 1.3433333333333333, 21.09795918367347, 30775.778115772922);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 33845.2470463083, 1642.3252929221876, 1.3166666666666667, 22.60326530612245, 29962.294389031853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 33621.81057275599, 1323.060626995656, 1.3166666666666667, 19.58122448979592, 29962.294389031853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 33641.65659905351, 1384.8958988505376, 1.3166666666666667, 21.46204081632653, 29962.294389031853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 34272.514806788204, 1036.568414092187, 1.3033333333333332, 23.11673469387755, 31973.426596820562);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 34165.394608115035, 1041.857608129687, 1.3066666666666666, 22.790204081632652, 30826.958014447584);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 33817.057110279726, 1360.5599689328692, 1.3066666666666666, 21.853061224489796, 30826.958014447584);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 33156.69921734408, 1564.4369960168126, 1.28, 19.951020408163266, 30465.280961991535);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 33170.82901408767, 1507.7596671096273, 1.2733333333333334, 19.588571428571427, 30233.280961991535);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 32708.945382113936, 1361.800260401705, 1.2433333333333334, 19.602448979591838, 30118.623866955342);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 33731.3757826766, 1874.8692859969028, 1.22, 21.68408163265306, 30813.73796075133);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 33458.351545442514, 1774.595227279909, 1.2266666666666666, 21.270204081632652, 30458.73796075133);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 33147.80835230092, 1952.316162514427, 1.2266666666666666, 18.386938775510203, 30458.73796075133);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 32056.034668053253, 1695.1245120611811, 1.2066666666666668, 16.591020408163267, 30066.519912463657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 32157.61758242811, 1619.7613278796616, 1.1866666666666668, 16.85469387755102, 30065.519912463657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 32138.274460556964, 1678.3535408859184, 1.1833333333333333, 16.184489795918367, 29878.519912463657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 33369.5407429054, 1145.1407911280287, 1.19, 19.955102040816328, 30767.112181815566);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 32993.76078335611, 1390.0085710352116, 1.2033333333333334, 19.2865306122449, 30205.761900875445);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 33283.59115929527, 1419.1128155596969, 1.2033333333333334, 19.288979591836735, 30205.761900875445);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 33318.772141438836, 1051.9242385883676, 1.1966666666666668, 20.537142857142857, 30877.791978112353);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 32908.890796618965, 1168.7553954217797, 1.21, 20.6, 30466.325966202825);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 32988.67096857342, 1097.1609519657025, 1.21, 18.852244897959185, 30466.325966202825);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 32546.66314311874, 1495.6874692808317, 1.16, 16.837551020408164, 30376.176886446206);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 32477.75014138165, 1564.8884655025456, 1.17, 15.840816326530613, 29713.77533129625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 32577.466537778084, 1704.287031185336, 1.17, 15.960816326530612, 29713.77533129625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 34349.41698390151, 1707.5868321404707, 1.12, 20.49795918367347, 30591.419258443042);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 34370.2153554245, 2336.791347362877, 1.12, 20.344489795918367, 30591.419258443042);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 33964.90660419519, 2059.5118334649387, 1.12, 19.866938775510203, 30591.419258443042);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 32835.78136474821, 1229.4748435475165, 1.1233333333333333, 17.73387755102041, 30261.52057272022);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 32526.444185845558, 1438.1515656435904, 1.1166666666666667, 16.715918367346937, 29923.413710588586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 32473.925689367927, 1496.1961429977343, 1.1233333333333333, 15.383673469387755, 29439.30025528077);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 32623.049941705893, 1288.5293518164272, 1.1233333333333333, 17.052244897959184, 30490.42543262013);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 32903.59654040875, 1470.844876680189, 1.1233333333333333, 18.16081632653061, 30453.42543262013);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 32614.16798321876, 1484.6382507555948, 1.1066666666666667, 16.73551020408163, 30333.42543262013);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 33354.72766770353, 2165.4322460368235, 1.0866666666666667, 16.238367346938777, 29698.18588684187);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 33044.87903892455, 1791.976970347992, 1.0866666666666667, 18.44326530612245, 29698.18588684187);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 33241.20462707593, 2004.287075746945, 1.0866666666666667, 16.507755102040818, 29698.18588684187);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 32330.114778942894, 1235.1256329186808, 1.0833333333333333, 13.834285714285715, 30135.73350869623);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 32352.76547929541, 1434.956098919164, 1.0833333333333333, 14.798367346938775, 30135.73350869623);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 32290.812988527538, 1243.088639231135, 1.04, 13.315918367346939, 30135.73350869623);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 33625.72952781355, 1119.354182283432, 1.0633333333333332, 14.675918367346938, 30029.859336189318);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 33776.31479583472, 1234.159611923161, 1.0633333333333332, 15.058775510204082, 30029.859336189318);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 33801.996171895415, 1536.264835717822, 1.0633333333333332, 13.688979591836734, 30029.859336189318);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 33134.09764584786, 1388.1516876458222, 1.0, 14.546122448979592, 30833.754320676297);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 32914.317736637415, 1642.121622640983, 1.01, 15.666938775510204, 30492.37954450944);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 32442.75858804563, 1307.2195049529607, 1.0266666666666666, 14.456326530612245, 30172.082222960016);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 32745.746094650818, 1543.0244776698291, 1.01, 14.028571428571428, 30014.484807539357);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 32859.49836418709, 1890.876330824109, 1.0233333333333334, 14.031020408163265, 29840.08060677238);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 32526.560897436488, 1694.1133923207433, 1.0233333333333334, 12.523265306122449, 29840.08060677238);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 32898.883128068046, 1251.1463122287528, 1.04, 14.855510204081632, 30790.42856554752);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 32763.99019977369, 1231.284014580831, 1.04, 13.897142857142857, 30790.42856554752);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 32984.08827790623, 1260.308169157953, 1.04, 13.938775510204081, 30790.42856554752);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 31745.329120506776, 1183.020738050948, 0.9966666666666667, 12.591020408163265, 29496.19005805663);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 31748.456985058732, 1245.7180354709558, 0.9966666666666667, 13.306122448979592, 29496.19005805663);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 30997.925169969465, 1098.987093176713, 0.9966666666666667, 10.879183673469388, 29496.19005805663);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 32115.580192296402, 1558.7078633324634, 0.9766666666666667, 14.25061224489796, 30114.08433864015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 31271.44863794183, 1096.7885233535847, 0.9766666666666667, 12.395918367346939, 30114.08433864015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 31491.292623018086, 1353.769889188428, 0.9766666666666667, 13.755918367346938, 30114.08433864015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 33284.52175488181, 1437.3326167355428, 0.9733333333333334, 14.528979591836734, 29880.20350973582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 32289.19236459101, 1510.7878849885544, 0.9733333333333334, 12.288163265306123, 29880.20350973582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 32180.935914772832, 1190.2603195319273, 0.9733333333333334, 12.55265306122449, 29880.20350973582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 31764.05443416345, 1413.9260954211093, 1.0, 14.311020408163266, 29709.44936859664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 31413.292472098627, 1431.3897265419073, 1.0, 12.720816326530612, 29709.44936859664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 31618.323646651646, 1579.6747332792434, 1.0, 11.875918367346939, 29709.44936859664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 31642.44427153426, 2178.0125899588247, 0.96, 10.398367346938775, 29562.24004782222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 30964.304693152302, 1520.0066219689993, 0.96, 8.78204081632653, 29562.24004782222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 30766.640851963326, 1350.9154248983355, 0.96, 7.21795918367347, 29562.24004782222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 31328.314116061985, 1779.4999435044938, 0.9366666666666666, 9.237551020408164, 29497.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 31197.86943825166, 1620.3982752005106, 0.9366666666666666, 9.097142857142858, 29497.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 30952.205074910158, 1220.4889509858608, 0.93, 10.225306122448979, 29497.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 31983.2180942575, 1294.2545939589902, 0.9366666666666666, 9.411428571428571, 29904.05999542462);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 32034.715979836827, 1164.9030626245294, 0.9366666666666666, 9.591020408163265, 29904.05999542462);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 31942.48360914459, 1482.577842612914, 0.9366666666666666, 7.473469387755102, 29904.05999542462);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 33151.62371655545, 749.0961975260038, 0.8933333333333333, 11.03591836734694, 30571.865070440414);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 32485.049373981677, 1060.589705547384, 0.8933333333333333, 10.907755102040817, 30571.865070440414);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 32786.135953644516, 1399.3089293087398, 0.9, 10.421224489795918, 30289.53410526311);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 31646.810203288896, 1620.402276943775, 0.9033333333333333, 8.412244897959184, 29759.779612425828);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 31303.188998160353, 1694.394519801752, 0.8833333333333333, 6.572244897959184, 29701.779612425828);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 30846.611500496245, 1161.0845309474648, 0.8833333333333333, 6.561632653061224, 29701.779612425828);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 30849.31161633811, 1146.738906268158, 0.8866666666666667, 6.52, 29583.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 30722.07440642493, 1171.8060404948235, 0.8866666666666667, 4.88, 29583.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 30888.829420099806, 1244.2496421786425, 0.8866666666666667, 6.123265306122449, 29583.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 31062.096309391567, 1111.2179220713792, 0.87, 6.568979591836735, 30075.645116347638);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 30862.85811753805, 735.2589545414039, 0.8666666666666667, 5.8212244897959184, 29800.127626170437);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 30927.307123054296, 937.6974630494345, 0.8666666666666667, 6.246530612244898, 29800.127626170437);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 30866.901315230432, 902.8874979026531, 0.86, 6.319183673469388, 29506.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 31056.647694255073, 1295.292205797775, 0.86, 6.568163265306122, 29506.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 31161.13499441207, 1322.695524275811, 0.86, 6.683265306122449, 29506.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 30632.99988692154, 1094.2338946728064, 0.8533333333333334, 6.430204081632653, 29646.985199386003);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 30654.340294744372, 1105.0059516801873, 0.85, 7.533877551020408, 29522.51745881845);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 30624.920719587695, 1111.454779075869, 0.85, 7.153469387755102, 29522.51745881845);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 32036.238190287993, 1620.7062375576654, 0.84, 9.188571428571429, 29964.59043813606);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 32232.790238908074, 1523.5259897477833, 0.8333333333333334, 8.390204081632653, 29855.2651887343);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 32408.034637939305, 1516.1442283482666, 0.82, 8.64734693877551, 29663.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 30368.150924511516, 1184.961787409483, 0.8266666666666667, 6.876734693877551, 29560.76895332846);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 30240.706723992964, 1018.601499617801, 0.8266666666666667, 5.721632653061224, 29560.76895332846);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 30213.360252689785, 1038.533616493565, 0.8266666666666667, 5.198367346938776, 29560.76895332846);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 30771.691844881443, 1278.2595069235254, 0.8133333333333334, 5.036734693877551, 29514.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 30597.664082033472, 1189.9712208551573, 0.8133333333333334, 4.946938775510204, 29514.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 31167.852355595573, 1567.3983369209889, 0.77, 5.396734693877551, 29514.19437068826);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 31884.28569639569, 788.1618071061415, 0.7766666666666666, 9.374693877551021, 30012.407308380654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 31780.508939986415, 804.4434619817451, 0.7766666666666666, 8.751020408163265, 30012.407308380654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 31301.715403467646, 787.7231646732776, 0.7766666666666666, 5.338775510204082, 30012.407308380654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 30001.125330561223, 759.7862321536217, 0.77, 4.502040816326531, 29529.797902816405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 30210.017733242516, 961.7050550609218, 0.77, 4.926530612244898, 29529.797902816405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 29994.65654577142, 721.0432561350455, 0.77, 3.559183673469388, 29529.797902816405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 31466.583104822897, 1129.2871096451834, 0.7566666666666667, 5.36734693877551, 29733.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 31238.198759078834, 802.7960301307079, 0.7566666666666667, 4.65469387755102, 29733.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 31107.99696072041, 1107.5075494977057, 0.7566666666666667, 3.0408163265306123, 29733.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 30377.19257639239, 917.6926839376964, 0.7466666666666667, 4.187755102040816, 29625.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 30395.702854349405, 1008.5963190509794, 0.7466666666666667, 3.6187755102040815, 29625.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 29922.843860258792, 400.63934286627887, 0.7466666666666667, 2.766530612244898, 29625.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 30329.818884976175, 474.0972050900443, 0.7166666666666667, 3.697142857142857, 29757.898671712646);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 29996.990415949203, 291.5052160666491, 0.7166666666666667, 2.1477551020408163, 29757.898671712646);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 30022.514405125232, 521.7200278027751, 0.7166666666666667, 2.4604081632653063, 29757.898671712646);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 32107.807703111524, 533.341165341018, 0.7033333333333334, 2.8114285714285714, 30096.8583878387);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 31590.481472662344, 1299.5327825160705, 0.7033333333333334, 3.0987755102040815, 30096.8583878387);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 31370.79701838441, 1031.5115183422859, 0.7033333333333334, 2.976326530612245, 30096.8583878387);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 29978.33185111453, 443.7984793224231, 0.71, 2.3077551020408165, 29711.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 29954.473115223154, 480.78719018639316, 0.71, 2.4538775510204083, 29711.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 30055.883281086102, 597.9961253724379, 0.71, 2.866122448979592, 29711.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 31539.174533299018, 1442.3739152904507, 0.6733333333333333, 2.4089795918367347, 30204.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 31040.058819518505, 787.7882927921429, 0.6733333333333333, 2.3616326530612244, 30204.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 30966.494844336277, 838.5240056178028, 0.6733333333333333, 1.826938775510204, 30031.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 30892.923966190134, 711.7113393450261, 0.6866666666666666, 3.642448979591837, 29749.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 30740.197901967782, 850.5531794837897, 0.6866666666666666, 3.219591836734694, 29749.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 30386.312260718063, 813.527526628018, 0.6866666666666666, 3.382857142857143, 29749.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 29997.95294929485, 676.1701415709257, 0.6833333333333333, 2.5616326530612246, 29628.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 29879.552810307065, 371.87268617701153, 0.6833333333333333, 3.2342857142857144, 29628.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 29802.73924532742, 231.8476447860089, 0.67, 3.0351020408163265, 29628.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 29784.428071351744, 164.23005783452868, 0.67, 2.027755102040816, 29697.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 29822.968071351745, 302.65885371903784, 0.67, 2.1175510204081633, 29697.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 29770.36611141694, 198.16542117533686, 0.67, 1.513469387755102, 29697.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 31042.94666744182, 389.95457466134815, 0.6566666666666666, 2.6644897959183673, 29813.084046432312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 31015.41567269935, 371.8052644984885, 0.6566666666666666, 2.5616326530612246, 29813.084046432312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 31100.990160085625, 399.3803927624887, 0.6566666666666666, 1.2636734693877552, 29813.084046432312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 29879.21555479403, 115.94489364490748, 0.6366666666666667, 1.5053061224489797, 29703.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 29865.4296650657, 107.16247439457221, 0.6366666666666667, 1.0791836734693878, 29703.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 29902.5496650657, 144.57075663310815, 0.6366666666666667, 1.2783673469387755, 29703.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 30163.293513856508, 309.36115088921014, 0.6266666666666667, 3.5175510204081633, 29773.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 30064.48878827274, 403.127339773519, 0.6266666666666667, 3.073469387755102, 29773.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 29908.704321516892, 268.78453933556926, 0.6266666666666667, 1.6408163265306122, 29773.32415148214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 30133.230904884564, 67.08593301446744, 0.6366666666666667, 1.546122448979592, 29758.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 30149.96389514048, 40.02013792502272, 0.6366666666666667, 1.246530612244898, 29758.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 30148.54389514048, 34.67446839609529, 0.6366666666666667, 1.2636734693877552, 29758.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 29872.172992057618, 407.4274057790577, 0.61, 1.7657142857142858, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 29731.936114586013, 185.48819466895873, 0.61, 1.3371428571428572, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 29776.953802154847, 330.63185554485295, 0.61, 1.473469387755102, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 29711.036885396406, 79.80262386356853, 0.6133333333333333, 1.2775510204081633, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 29729.776885396404, 99.80814452881941, 0.6133333333333333, 1.7942857142857143, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 29676.276885396404, 35.89699549703689, 0.6133333333333333, 0.9942857142857143, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 29677.716885396407, 35.63075946998832, 0.6033333333333334, 0.9795918367346939, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 29679.156885396405, 35.30263330641705, 0.6033333333333334, 0.9616326530612245, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 29676.276885396404, 35.89699549703689, 0.6033333333333334, 0.9942857142857143, 29634.516885396417);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 29716.682291926463, 36.3363875643203, 0.59, 1.0187755102040816, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 29710.92229192646, 35.63075946998834, 0.59, 0.9795918367346939, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 29682.122291926462, 1.837456774505355E-11, 0.59, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 29682.122291926462, 1.837456774505355E-11, 0.5766666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 29682.122291926462, 1.837456774505355E-11, 0.5766666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 29682.122291926462, 1.837456774505355E-11, 0.5666666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 29682.122291926462, 1.837456774505355E-11, 0.5666666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 29682.122291926462, 1.837456774505355E-11, 0.5666666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 29682.122291926462, 1.837456774505355E-11, 0.5666666666666667, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 29682.122291926462, 1.837456774505355E-11, 0.5466666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 29682.122291926462, 1.837456774505355E-11, 0.5466666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 29682.122291926462, 1.837456774505355E-11, 0.5466666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 29682.122291926462, 1.837456774505355E-11, 0.5433333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 29682.122291926462, 1.837456774505355E-11, 0.5433333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 29682.122291926462, 1.837456774505355E-11, 0.5433333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 29682.122291926462, 1.837456774505355E-11, 0.54, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 29682.122291926462, 1.837456774505355E-11, 0.54, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 29682.122291926462, 1.837456774505355E-11, 0.54, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 29682.122291926462, 1.837456774505355E-11, 0.5333333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 29682.122291926462, 1.837456774505355E-11, 0.5333333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 29682.122291926462, 1.837456774505355E-11, 0.5333333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 29682.122291926462, 1.837456774505355E-11, 0.53, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 29682.122291926462, 1.837456774505355E-11, 0.5266666666666666, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 29682.122291926462, 1.837456774505355E-11, 0.5233333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 29682.122291926462, 1.837456774505355E-11, 0.5233333333333333, 0.0, 29682.122291926444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 29682.122291926462, 1.837456774505355E-11, 0.5233333333333333, 0.0, 29682.122291926444);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(20000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 100);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(28745.0);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(28745.0);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 46, 112, 71, 9, 83, 98, 110, 101, 103, 37, 23, 17, 78, 52, 133, 105, 89, 48, 18, 74, 7, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 92, 27, 57, 107, 68, 80, 24, 60, 124, 50, 86, 144, 8, 6, 116, 56, 19, 85, 26, 11, 54, 82, 148, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 106, 29, 120, 100, 146, 102, 38, 134, 139, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 77, 51, 95, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 89, 5, 48, 62, 133, 52, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 77, 51, 95, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 89, 5, 48, 62, 133, 52, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 77, 51, 95, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 89, 5, 48, 62, 133, 52, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 77, 51, 95, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 89, 5, 48, 62, 133, 52, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 47, 99, 70, 40, 135, 122, 42, 127, 119, 114, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 58, 140, 73, 20, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 47, 99, 70, 40, 135, 122, 42, 127, 119, 114, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 58, 140, 73, 20, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 47, 99, 70, 40, 135, 122, 42, 127, 119, 114, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 58, 140, 73, 20, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 8, 116, 6, 56, 19, 11, 148, 54, 82, 33, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 120, 29, 106, 100, 38, 146, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 134, 139, 111, 131, 28, 122, 114, 119, 26, 34, 85, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 8, 116, 6, 19, 11, 26, 148, 114, 119, 122, 127, 42, 2, 45, 28, 47, 99, 40, 70, 135, 13, 131, 111, 106, 120, 29, 100, 38, 146, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 139, 134, 33, 82, 54, 34, 149, 85, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 8, 116, 6, 19, 11, 26, 148, 114, 119, 122, 127, 42, 2, 45, 28, 47, 99, 40, 70, 135, 13, 131, 111, 106, 120, 29, 100, 38, 146, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 139, 134, 33, 82, 54, 34, 149, 85, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 8, 116, 6, 19, 11, 26, 148, 114, 119, 122, 127, 42, 2, 45, 28, 47, 99, 40, 70, 135, 13, 131, 111, 106, 120, 29, 100, 38, 146, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 139, 134, 33, 82, 54, 34, 149, 85, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 106, 120, 29, 100, 38, 146, 111, 131, 28, 45, 2, 33, 139, 134, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 40, 70, 99, 13, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 40, 70, 99, 13, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 40, 70, 99, 13, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 33, 134, 139, 8, 6, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 106, 120, 29, 100, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 146, 38, 95, 51, 77, 47, 99, 40, 70, 135, 13, 127, 26, 85, 19, 149, 61, 59, 76, 109, 34, 11, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 122, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 97, 90, 108, 31, 10, 16, 14, 44, 22, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 111, 131, 28, 45, 2, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 97, 90, 108, 31, 10, 16, 14, 44, 22, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 13, 99, 70, 40, 135, 127, 42, 11, 19, 85, 26, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 47, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 84, 67, 72, 38, 100, 106, 120, 29, 13, 99, 70, 40, 135, 127, 42, 11, 19, 85, 26, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 146, 4, 36, 51, 77, 95, 47, 99, 40, 70, 13, 135, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 146, 4, 36, 51, 77, 95, 47, 99, 40, 70, 13, 135, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 146, 4, 36, 51, 77, 95, 47, 99, 40, 70, 13, 135, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 146, 4, 36, 51, 77, 95, 47, 99, 40, 70, 13, 135, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 146, 4, 51, 77, 95, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 97, 22, 44, 31, 108, 90, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 146, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 44, 31, 108, 90, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 146, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 44, 31, 108, 90, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 146, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 44, 31, 108, 90, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 70, 40, 135, 13, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 135, 13, 42, 127, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 137, 132, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 119, 114, 122, 2, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 127, 42, 11, 26, 85, 34, 19, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 103, 101, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 129, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 40248.55777154385, 2529.8649955440183, 0.0, 80.83591836734693, 34751.04929171269);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 32802.89887519965, 2556.0239846643544, 0.5066666666666667, 10.557551020408162, 29701.359963706673);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 31699.869721654155, 2111.566203563572, 0.5066666666666667, 8.70122448979592, 29568.122555601272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 36713.554776198864, 1807.1223138123546, 0.5, 25.591020408163267, 29944.697525334872);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 35838.19509720905, 2154.984489329296, 0.5, 31.048163265306123, 29944.697525334872);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 32355.393675856394, 2072.231981038689, 0.9166666666666666, 15.05795918367347, 29293.871768183017);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 35806.157642696395, 1866.149191058084, 0.9133333333333333, 23.823673469387757, 30317.36910043947);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 33635.08345790436, 1988.054268697162, 1.0333333333333334, 24.366530612244897, 29462.650263469863);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 32805.598913078335, 2382.5152660273206, 0.95, 18.485714285714284, 29331.7656785563);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 34813.7718262188, 1642.2451869896695, 0.95, 24.90612244897959, 30685.253204107787);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 33465.714251291996, 2060.5261989628043, 1.0233333333333334, 16.507755102040818, 30459.117818267056);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 33941.96770135601, 1461.8763240595736, 0.9366666666666666, 17.731428571428573, 29950.680500318627);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 34195.13537174961, 2238.477166267716, 0.92, 18.18285714285714, 29305.433569319142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 33385.19830989185, 1747.031889970191, 0.9466666666666667, 11.179591836734694, 28981.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 30520.349674071706, 2312.2481372678453, 0.8333333333333334, 4.673469387755102, 28618.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 31793.98849682217, 1735.3391738444307, 0.8433333333333334, 8.199183673469388, 29113.713350129427);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 31140.598752658065, 1956.0731723722433, 0.82, 6.182857142857143, 28768.631219508767);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 29584.30844927295, 1404.939689816474, 0.64, 1.980408163265306, 28768.631219508767);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 31044.49039902946, 1462.7795553284698, 0.65, 5.528979591836735, 28510.06195913487);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 30062.967966877495, 1412.1106034439224, 0.65, 3.750204081632653, 28510.06195913487);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 29177.9017549974, 1205.4277893005055, 0.59, 1.463673469387755, 28510.06195913487);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 29452.283721296135, 1162.9960742304934, 0.58, 2.057959183673469, 28689.985384372863);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 28749.96222330834, 672.5657404157145, 0.58, 1.7183673469387755, 28505.6310935356);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 28509.318179352325, 26.07163383837299, 0.53, 0.08, 28505.6310935356);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 29760.731476283352, 1018.1499215767677, 0.5266666666666666, 2.5477551020408162, 28745.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 30430.278571401406, 494.8487590140117, 0.5266666666666666, 1.656326530612245, 28745.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 28745.0, 0.0, 0.55, 0.0, 28745.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 28745.0, 0.0, 0.55, 0.0, 28745.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 28745.0, 0.0, 0.55, 0.0, 28745.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 28745.0, 0.0, 0.51, 0.0, 28745.0);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(20000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.75, 10);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(44351.93726498337);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(44351.93726498337);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 5, 48, 18, 96, 74, 55, 3, 64, 65, 25, 87, 15, 21, 69, 93, 78, 52, 17, 83, 9, 35, 23, 37, 98, 58, 73, 20, 71, 89, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 11, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 46, 44, 90, 97, 22, 59, 61, 19, 26, 34, 85, 11, 56, 6, 8, 24, 80, 68, 67, 72, 49, 43, 1, 53, 39, 63, 81, 94, 12, 75, 32, 4, 36, 51, 77, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 38, 29, 84, 57, 60, 50, 86, 76, 14, 16, 31, 10, 91, 74, 96, 18, 65, 25, 64, 3, 52, 78, 17, 93, 21, 87, 15, 69, 23, 37, 98, 35, 58, 73, 20, 71, 83, 9, 89, 62, 5, 48, 55, 7, 41, 30, 79, 88, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 46, 18, 89, 83, 35, 23, 37, 98, 17, 93, 52, 78, 87, 21, 15, 69, 25, 64, 65, 3, 74, 96, 55, 7, 41, 30, 79, 88, 66, 27, 92, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 47, 99, 51, 77, 95, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 24, 80, 81, 94, 12, 75, 32, 38, 4, 36, 61, 59, 76, 22, 10, 31, 90, 97, 44, 14, 16, 58, 73, 20, 71, 9, 62, 5, 48, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 46, 18, 21, 15, 87, 93, 69, 65, 3, 64, 25, 96, 55, 30, 88, 79, 7, 41, 92, 27, 66, 57, 80, 24, 50, 60, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 11, 85, 26, 54, 82, 86, 56, 8, 6, 19, 34, 76, 61, 59, 90, 44, 22, 97, 31, 16, 14, 10, 20, 73, 58, 35, 23, 37, 98, 17, 78, 52, 89, 83, 71, 9, 48, 5, 62, 91, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 46, 18, 21, 89, 48, 91, 7, 41, 79, 55, 30, 88, 53, 72, 49, 43, 1, 63, 39, 68, 67, 84, 38, 95, 36, 4, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 11, 19, 85, 34, 26, 54, 82, 33, 28, 42, 45, 2, 13, 99, 40, 70, 47, 51, 77, 29, 57, 66, 27, 92, 76, 61, 59, 97, 22, 90, 31, 44, 14, 16, 10, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 69, 65, 3, 64, 25, 96, 74, 5, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 5, 48, 91, 7, 41, 88, 30, 79, 55, 96, 25, 64, 65, 3, 15, 69, 52, 78, 87, 93, 17, 23, 37, 98, 35, 20, 58, 73, 10, 16, 14, 31, 90, 44, 22, 97, 76, 59, 61, 34, 26, 85, 11, 19, 56, 6, 8, 86, 50, 60, 80, 24, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 43, 49, 40, 70, 99, 47, 13, 2, 42, 45, 28, 82, 33, 54, 57, 92, 27, 66, 71, 83, 9, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 41, 79, 30, 88, 55, 96, 3, 52, 78, 87, 15, 93, 17, 23, 37, 98, 35, 69, 65, 25, 64, 74, 48, 5, 83, 9, 71, 73, 20, 58, 10, 16, 14, 31, 90, 44, 22, 97, 76, 61, 59, 11, 85, 26, 34, 19, 33, 82, 54, 45, 2, 42, 28, 99, 13, 40, 70, 47, 95, 51, 77, 38, 29, 4, 36, 12, 32, 75, 94, 81, 43, 1, 53, 63, 39, 49, 72, 67, 84, 50, 86, 56, 6, 8, 24, 60, 80, 68, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 74, 52, 93, 69, 64, 65, 25, 30, 79, 41, 88, 55, 96, 3, 87, 15, 17, 78, 23, 37, 98, 35, 9, 83, 71, 58, 20, 73, 14, 16, 10, 31, 90, 44, 22, 97, 59, 76, 61, 34, 26, 85, 11, 6, 8, 86, 50, 60, 24, 80, 53, 39, 63, 1, 68, 84, 67, 72, 49, 43, 81, 32, 94, 75, 12, 4, 36, 38, 95, 77, 29, 51, 99, 47, 70, 40, 13, 2, 45, 42, 28, 33, 54, 82, 19, 56, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 74, 96, 79, 30, 88, 41, 55, 3, 64, 65, 25, 69, 15, 93, 87, 52, 78, 17, 23, 37, 35, 98, 9, 83, 58, 73, 20, 71, 10, 14, 16, 31, 44, 97, 22, 90, 92, 27, 66, 57, 50, 60, 80, 24, 86, 56, 8, 19, 85, 26, 34, 59, 61, 76, 11, 6, 82, 54, 33, 45, 2, 28, 29, 38, 77, 51, 95, 4, 36, 32, 75, 94, 12, 81, 43, 63, 1, 53, 39, 68, 49, 72, 67, 84, 47, 70, 40, 99, 13, 42, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 74, 41, 88, 30, 79, 55, 96, 3, 65, 25, 64, 69, 93, 15, 52, 87, 78, 17, 35, 98, 23, 37, 83, 9, 71, 20, 73, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 26, 11, 19, 85, 34, 82, 54, 6, 8, 56, 86, 60, 50, 84, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 49, 43, 72, 1, 53, 39, 63, 68, 24, 80, 67, 38, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 66, 57, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 73, 58, 20, 35, 23, 37, 98, 83, 17, 78, 93, 87, 15, 69, 52, 3, 64, 65, 25, 96, 74, 55, 88, 30, 79, 41, 27, 66, 57, 50, 86, 56, 8, 6, 19, 61, 59, 76, 97, 90, 22, 10, 16, 14, 31, 44, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 38, 29, 84, 67, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 16, 10, 31, 44, 22, 90, 97, 59, 61, 76, 34, 85, 26, 11, 6, 56, 8, 86, 24, 60, 50, 80, 68, 72, 49, 43, 81, 94, 75, 32, 12, 1, 39, 53, 63, 67, 84, 38, 4, 36, 77, 51, 95, 29, 47, 99, 70, 40, 2, 42, 13, 28, 45, 33, 82, 54, 19, 27, 66, 57, 92, 52, 78, 83, 35, 98, 37, 23, 17, 93, 87, 15, 69, 3, 65, 64, 25, 30, 79, 41, 88, 55, 96, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 16, 10, 31, 90, 97, 44, 22, 59, 76, 56, 8, 6, 85, 19, 11, 26, 34, 61, 86, 60, 80, 24, 50, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 75, 12, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 42, 28, 2, 13, 45, 33, 54, 82, 67, 84, 29, 38, 30, 41, 88, 79, 55, 74, 96, 78, 52, 3, 65, 64, 25, 93, 87, 15, 69, 17, 23, 98, 35, 83, 37, 57, 27, 66, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 16, 10, 44, 31, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 56, 6, 8, 86, 50, 68, 39, 63, 53, 1, 43, 49, 81, 94, 32, 75, 12, 95, 77, 51, 47, 99, 70, 40, 13, 42, 2, 45, 28, 33, 82, 54, 67, 72, 84, 29, 38, 4, 36, 24, 80, 60, 66, 27, 92, 57, 74, 96, 55, 41, 30, 88, 79, 25, 64, 3, 65, 69, 15, 87, 93, 17, 23, 83, 35, 98, 37, 78, 52, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 16, 14, 31, 10, 44, 90, 97, 22, 59, 61, 76, 85, 34, 26, 19, 11, 6, 8, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 95, 29, 38, 77, 4, 36, 12, 32, 75, 94, 81, 72, 49, 84, 67, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 50, 86, 92, 27, 66, 79, 30, 88, 41, 55, 96, 3, 25, 64, 65, 69, 15, 87, 78, 52, 93, 17, 23, 37, 98, 35, 83, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 85, 34, 26, 19, 11, 33, 54, 82, 6, 8, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 95, 77, 36, 75, 12, 32, 94, 81, 4, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 72, 49, 43, 1, 63, 39, 53, 68, 66, 27, 92, 41, 88, 30, 79, 74, 55, 25, 64, 3, 96, 65, 15, 87, 93, 69, 52, 23, 37, 35, 98, 17, 78, 83, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 16, 31, 90, 97, 22, 44, 76, 61, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 72, 43, 49, 1, 39, 63, 53, 66, 92, 27, 57, 85, 26, 11, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 67, 84, 34, 59, 88, 30, 79, 41, 55, 74, 96, 3, 25, 64, 65, 52, 69, 15, 87, 93, 78, 17, 37, 98, 23, 35, 83, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 16, 44, 90, 97, 22, 66, 27, 92, 57, 60, 80, 24, 68, 72, 67, 84, 29, 95, 77, 51, 47, 99, 40, 70, 13, 28, 2, 42, 45, 54, 33, 11, 26, 34, 61, 76, 59, 86, 50, 85, 6, 8, 56, 19, 82, 49, 43, 1, 39, 63, 53, 81, 94, 75, 12, 32, 36, 4, 38, 88, 41, 79, 30, 55, 96, 74, 64, 65, 3, 25, 69, 15, 93, 17, 37, 35, 98, 23, 83, 78, 87, 52, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 22, 97, 90, 16, 83, 98, 35, 37, 23, 17, 78, 52, 93, 87, 15, 69, 65, 64, 25, 3, 96, 74, 55, 41, 88, 79, 30, 66, 92, 27, 57, 60, 24, 80, 68, 72, 49, 43, 1, 63, 39, 53, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 42, 2, 45, 28, 33, 82, 54, 11, 26, 19, 56, 6, 8, 86, 50, 84, 67, 38, 29, 34, 85, 59, 76, 61, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 19, 26, 11, 54, 33, 82, 45, 2, 42, 28, 47, 13, 40, 70, 99, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 72, 63, 53, 39, 1, 67, 84, 38, 29, 24, 80, 68, 66, 27, 92, 57, 60, 50, 86, 8, 6, 56, 76, 16, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 69, 25, 65, 64, 3, 74, 96, 30, 79, 88, 41, 55, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 97, 76, 59, 61, 19, 26, 85, 34, 56, 86, 8, 6, 11, 82, 54, 33, 45, 2, 42, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 49, 72, 68, 24, 50, 57, 92, 27, 66, 60, 80, 67, 84, 38, 29, 28, 41, 88, 30, 79, 55, 96, 74, 52, 3, 64, 25, 65, 69, 15, 87, 93, 78, 17, 98, 37, 83, 23, 35, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 86, 50, 60, 24, 80, 67, 84, 29, 38, 95, 77, 51, 36, 4, 32, 12, 94, 75, 81, 72, 49, 43, 1, 63, 39, 53, 68, 66, 57, 92, 27, 88, 41, 30, 79, 55, 96, 74, 52, 93, 87, 15, 69, 65, 64, 3, 25, 83, 78, 17, 23, 37, 98, 35, 16, 97, 85, 26, 54, 82, 33, 28, 70, 40, 99, 47, 13, 2, 45, 42, 34, 11, 19, 56, 8, 6, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 16, 83, 35, 98, 23, 37, 93, 87, 15, 69, 17, 78, 52, 3, 64, 65, 25, 74, 96, 55, 30, 79, 88, 41, 27, 92, 57, 60, 50, 86, 6, 56, 8, 11, 26, 19, 34, 85, 54, 82, 33, 45, 28, 2, 42, 70, 40, 47, 99, 13, 29, 38, 84, 95, 77, 51, 4, 36, 75, 32, 12, 81, 94, 43, 49, 1, 39, 53, 63, 68, 72, 67, 24, 80, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 16, 98, 37, 35, 83, 23, 17, 78, 52, 69, 93, 87, 15, 3, 64, 65, 25, 96, 74, 55, 79, 30, 88, 41, 66, 92, 27, 57, 50, 86, 56, 19, 11, 85, 26, 34, 8, 6, 33, 82, 54, 80, 24, 60, 68, 49, 84, 67, 72, 43, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 51, 29, 95, 77, 38, 13, 45, 2, 42, 70, 40, 99, 47, 28, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 26, 34, 85, 11, 19, 6, 8, 56, 50, 86, 60, 80, 24, 57, 27, 92, 66, 53, 39, 63, 68, 43, 49, 72, 1, 81, 94, 32, 75, 12, 36, 4, 38, 84, 67, 29, 95, 51, 77, 47, 13, 99, 70, 40, 42, 45, 2, 28, 33, 82, 54, 16, 78, 83, 35, 98, 37, 23, 17, 93, 52, 69, 87, 15, 64, 3, 25, 65, 96, 74, 55, 79, 30, 88, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 60, 24, 80, 68, 39, 53, 43, 49, 72, 63, 1, 94, 81, 12, 32, 75, 36, 4, 51, 77, 95, 38, 29, 84, 67, 86, 50, 56, 8, 6, 54, 82, 11, 26, 19, 34, 85, 33, 28, 45, 2, 42, 13, 47, 99, 70, 40, 16, 98, 35, 83, 37, 23, 17, 78, 52, 93, 87, 15, 69, 65, 64, 25, 3, 96, 79, 30, 88, 41, 55, 74, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 92, 66, 80, 24, 60, 86, 50, 56, 6, 8, 19, 11, 82, 54, 33, 28, 2, 42, 45, 40, 70, 13, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 85, 34, 26, 16, 83, 78, 87, 15, 52, 17, 23, 37, 35, 98, 69, 93, 25, 65, 64, 3, 74, 96, 55, 79, 30, 88, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 56, 8, 6, 26, 85, 34, 19, 11, 82, 54, 33, 28, 45, 2, 42, 40, 99, 70, 13, 47, 51, 95, 77, 4, 36, 12, 75, 32, 94, 81, 1, 43, 49, 29, 38, 84, 67, 68, 63, 39, 53, 72, 80, 24, 60, 92, 66, 88, 30, 79, 41, 55, 74, 96, 3, 64, 25, 65, 69, 87, 15, 93, 23, 17, 52, 78, 83, 35, 37, 98, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 6, 8, 56, 11, 19, 85, 34, 26, 54, 82, 33, 28, 42, 45, 2, 13, 47, 40, 70, 99, 51, 77, 95, 29, 38, 67, 84, 72, 43, 49, 81, 94, 12, 75, 32, 4, 36, 1, 39, 53, 63, 68, 80, 60, 24, 66, 92, 88, 30, 79, 41, 74, 96, 55, 3, 64, 25, 83, 35, 98, 37, 23, 87, 93, 15, 69, 65, 52, 78, 17, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 6, 56, 11, 19, 85, 26, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 77, 95, 51, 4, 36, 12, 32, 75, 94, 81, 49, 67, 84, 29, 38, 68, 63, 1, 72, 43, 53, 39, 92, 66, 88, 30, 79, 41, 55, 96, 74, 83, 35, 23, 37, 98, 17, 78, 87, 15, 69, 93, 52, 65, 25, 64, 3, 16, 80, 24, 60, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 82, 33, 28, 70, 40, 99, 13, 47, 29, 95, 51, 77, 4, 36, 38, 12, 75, 32, 81, 94, 43, 49, 72, 68, 24, 80, 60, 92, 66, 63, 39, 53, 1, 67, 84, 54, 19, 11, 26, 85, 34, 45, 2, 42, 16, 78, 17, 23, 37, 98, 35, 83, 52, 87, 15, 69, 93, 65, 64, 25, 3, 41, 88, 30, 79, 55, 96, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 19, 26, 85, 34, 11, 82, 54, 33, 42, 70, 40, 99, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 1, 63, 39, 53, 68, 66, 92, 24, 72, 43, 49, 67, 84, 38, 29, 13, 2, 45, 28, 80, 60, 88, 79, 30, 41, 74, 55, 96, 3, 64, 65, 25, 69, 15, 87, 93, 17, 23, 98, 37, 52, 78, 83, 35, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 26, 85, 34, 19, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 29, 38, 95, 51, 77, 4, 36, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 92, 66, 39, 53, 63, 1, 43, 84, 72, 67, 41, 88, 30, 79, 96, 74, 69, 15, 87, 93, 17, 78, 23, 37, 98, 35, 16, 83, 52, 65, 64, 25, 3, 55, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 82, 54, 33, 2, 13, 28, 45, 42, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 60, 92, 66, 88, 41, 30, 79, 55, 74, 96, 3, 65, 25, 64, 78, 52, 93, 15, 87, 69, 17, 23, 37, 35, 98, 16, 83, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 45, 42, 28, 2, 13, 99, 40, 70, 47, 29, 38, 77, 51, 95, 4, 36, 12, 32, 75, 94, 81, 43, 1, 39, 53, 63, 68, 72, 49, 67, 84, 80, 24, 60, 92, 66, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 69, 52, 93, 15, 87, 78, 17, 37, 23, 98, 83, 35, 16, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 28, 42, 45, 2, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 53, 39, 63, 68, 72, 84, 67, 80, 24, 60, 92, 66, 41, 30, 88, 79, 55, 96, 74, 3, 64, 25, 65, 69, 15, 52, 78, 87, 83, 16, 17, 37, 35, 98, 23, 93, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 82, 54, 33, 28, 45, 2, 42, 99, 70, 40, 47, 13, 67, 84, 38, 29, 95, 51, 77, 36, 4, 32, 94, 12, 75, 81, 72, 49, 43, 1, 63, 53, 39, 60, 68, 80, 24, 92, 66, 79, 30, 41, 88, 74, 96, 55, 3, 64, 65, 25, 69, 93, 17, 23, 37, 35, 98, 52, 87, 15, 78, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 45, 28, 2, 42, 13, 47, 99, 40, 70, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 29, 38, 84, 67, 80, 24, 68, 72, 63, 39, 53, 66, 60, 92, 79, 30, 88, 41, 55, 96, 74, 52, 78, 17, 23, 37, 35, 83, 15, 69, 3, 64, 25, 65, 87, 93, 98, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 72, 43, 1, 63, 39, 53, 66, 92, 60, 24, 80, 68, 67, 84, 38, 29, 41, 88, 30, 79, 55, 96, 74, 52, 87, 15, 93, 78, 17, 23, 37, 83, 35, 98, 16, 69, 65, 64, 3, 25, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 38, 29, 2, 28, 45, 42, 13, 99, 70, 40, 47, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 72, 68, 53, 39, 63, 1, 43, 49, 84, 67, 24, 80, 60, 92, 66, 88, 41, 30, 79, 55, 96, 74, 52, 87, 15, 93, 69, 64, 25, 65, 3, 78, 17, 16, 35, 98, 37, 23, 83, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 75, 94, 32, 12, 81, 43, 49, 72, 67, 84, 38, 29, 42, 45, 2, 28, 24, 80, 60, 68, 53, 39, 63, 1, 92, 66, 88, 41, 30, 79, 55, 96, 74, 3, 25, 64, 65, 78, 17, 93, 15, 87, 69, 52, 83, 23, 35, 98, 37, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 29, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 92, 30, 79, 88, 41, 55, 96, 74, 52, 78, 83, 35, 98, 37, 23, 17, 87, 15, 93, 69, 65, 25, 64, 3, 94, 81, 12, 32, 75, 51, 77, 95, 4, 36, 28, 45, 2, 42, 60, 24, 80, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 47, 36, 4, 12, 75, 32, 94, 81, 49, 43, 72, 67, 84, 38, 29, 51, 77, 95, 99, 42, 2, 45, 28, 24, 60, 80, 68, 1, 53, 63, 39, 92, 66, 88, 41, 30, 79, 55, 74, 96, 3, 25, 64, 65, 52, 69, 15, 87, 93, 78, 17, 23, 37, 35, 98, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 42, 2, 45, 28, 36, 4, 32, 12, 75, 94, 81, 72, 68, 43, 1, 63, 39, 53, 66, 92, 60, 24, 80, 84, 67, 49, 38, 77, 51, 95, 47, 29, 88, 30, 79, 41, 55, 74, 96, 25, 64, 65, 3, 69, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 63, 39, 68, 43, 72, 84, 67, 49, 38, 29, 45, 28, 2, 42, 60, 24, 80, 66, 88, 41, 79, 30, 55, 74, 96, 64, 65, 25, 3, 87, 15, 93, 69, 98, 35, 37, 23, 17, 83, 52, 78, 16, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 1, 43, 49, 72, 68, 63, 39, 53, 84, 67, 38, 29, 45, 2, 42, 28, 80, 24, 60, 66, 16, 83, 98, 35, 37, 23, 17, 78, 69, 93, 15, 87, 52, 25, 3, 64, 65, 74, 96, 55, 88, 30, 79, 41, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 39, 53, 63, 68, 67, 84, 38, 29, 2, 42, 28, 45, 24, 80, 60, 66, 92, 88, 30, 79, 41, 55, 96, 3, 25, 64, 65, 74, 78, 52, 93, 69, 15, 87, 17, 37, 23, 83, 35, 98, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 63, 39, 68, 24, 80, 60, 72, 84, 67, 38, 29, 42, 2, 28, 45, 16, 98, 35, 37, 23, 83, 17, 93, 15, 87, 78, 52, 69, 65, 64, 25, 3, 55, 96, 74, 30, 79, 88, 41, 92, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 12, 75, 94, 81, 72, 43, 49, 67, 84, 29, 42, 2, 45, 28, 38, 1, 39, 53, 63, 68, 60, 24, 80, 92, 66, 41, 88, 30, 79, 55, 74, 96, 3, 64, 25, 65, 69, 87, 15, 93, 52, 78, 17, 98, 37, 23, 83, 35, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 12, 32, 75, 94, 81, 84, 67, 49, 72, 43, 1, 39, 53, 68, 80, 24, 60, 66, 92, 74, 55, 96, 83, 35, 98, 37, 23, 17, 93, 15, 87, 69, 52, 78, 65, 64, 25, 3, 41, 79, 30, 88, 63, 42, 2, 28, 45, 29, 38, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 42, 2, 45, 28, 29, 38, 63, 39, 53, 68, 60, 24, 80, 92, 41, 88, 79, 30, 55, 96, 74, 3, 65, 64, 25, 69, 78, 17, 52, 93, 15, 87, 23, 37, 35, 98, 16, 83, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 38, 29, 2, 42, 45, 28, 84, 67, 80, 24, 60, 92, 66, 55, 96, 74, 52, 78, 83, 23, 37, 98, 35, 16, 17, 93, 87, 15, 69, 3, 64, 65, 25, 30, 41, 88, 79, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 49, 72, 43, 67, 84, 38, 29, 28, 45, 42, 2, 1, 63, 39, 53, 24, 60, 80, 68, 66, 92, 41, 30, 88, 79, 55, 96, 74, 3, 25, 64, 65, 69, 15, 87, 52, 78, 93, 17, 37, 98, 23, 35, 16, 83, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 28, 2, 45, 42, 29, 84, 67, 49, 63, 53, 39, 1, 43, 72, 68, 80, 24, 60, 66, 41, 30, 88, 79, 55, 96, 74, 3, 64, 25, 65, 93, 15, 87, 69, 52, 78, 17, 37, 23, 83, 35, 98, 16, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 49, 72, 68, 60, 80, 24, 66, 92, 53, 63, 39, 1, 43, 38, 29, 45, 42, 2, 28, 84, 67, 88, 30, 79, 55, 41, 74, 96, 3, 64, 25, 65, 69, 93, 15, 87, 17, 52, 78, 23, 37, 98, 35, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 84, 67, 49, 72, 1, 43, 39, 63, 53, 41, 88, 30, 79, 55, 96, 3, 25, 64, 65, 69, 87, 15, 93, 78, 17, 23, 37, 35, 98, 16, 83, 52, 74, 66, 80, 24, 68, 60, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 28, 45, 2, 42, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 66, 92, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 52, 87, 69, 15, 93, 83, 78, 17, 16, 35, 37, 23, 98, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 28, 2, 42, 84, 67, 72, 43, 63, 39, 53, 1, 49, 68, 60, 24, 80, 66, 92, 88, 30, 79, 55, 96, 3, 65, 25, 64, 69, 87, 15, 93, 17, 83, 16, 98, 35, 37, 23, 78, 52, 41, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 66, 92, 41, 30, 88, 79, 55, 96, 3, 64, 65, 25, 87, 15, 69, 93, 17, 23, 37, 16, 35, 83, 98, 78, 52, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 84, 67, 24, 80, 72, 49, 43, 1, 53, 63, 39, 68, 60, 66, 92, 41, 88, 79, 30, 55, 96, 74, 65, 25, 64, 3, 52, 78, 93, 15, 87, 69, 17, 35, 98, 23, 37, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 84, 67, 68, 49, 43, 1, 53, 39, 63, 72, 24, 80, 60, 66, 16, 83, 98, 35, 37, 23, 17, 87, 15, 93, 69, 3, 64, 65, 25, 52, 78, 74, 96, 55, 79, 30, 88, 41, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 72, 84, 67, 49, 43, 1, 53, 39, 63, 68, 66, 92, 41, 88, 30, 79, 55, 96, 74, 25, 3, 65, 64, 69, 87, 15, 93, 17, 23, 37, 35, 98, 83, 78, 52, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 92, 16, 17, 23, 37, 35, 98, 83, 78, 52, 87, 15, 93, 69, 65, 64, 25, 3, 55, 96, 74, 79, 30, 88, 41, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 49, 67, 84, 72, 43, 1, 53, 39, 63, 66, 92, 88, 41, 79, 30, 55, 96, 3, 25, 64, 65, 69, 87, 15, 93, 35, 37, 17, 78, 52, 23, 98, 83, 16, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 39, 53, 63, 1, 43, 49, 67, 84, 72, 66, 92, 88, 41, 30, 79, 55, 74, 96, 87, 93, 78, 83, 16, 35, 37, 23, 17, 98, 69, 52, 15, 25, 3, 65, 64, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 63, 1, 49, 72, 84, 67, 43, 66, 92, 88, 41, 55, 79, 30, 96, 74, 52, 25, 65, 64, 3, 69, 93, 15, 87, 78, 17, 23, 83, 35, 98, 37, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 63, 72, 84, 67, 49, 43, 1, 41, 88, 30, 79, 55, 74, 52, 83, 35, 98, 37, 23, 17, 78, 15, 69, 87, 93, 65, 25, 3, 64, 96, 66, 92, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 67, 84, 63, 66, 41, 88, 79, 30, 55, 96, 3, 25, 64, 65, 52, 87, 15, 93, 78, 23, 37, 35, 98, 16, 83, 17, 69, 74, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 84, 67, 43, 63, 66, 92, 88, 41, 79, 30, 55, 96, 74, 78, 52, 83, 35, 16, 98, 37, 23, 17, 15, 87, 93, 69, 65, 25, 64, 3, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 67, 84, 43, 63, 92, 66, 88, 41, 30, 79, 55, 96, 74, 65, 3, 25, 64, 87, 15, 93, 69, 52, 78, 17, 37, 35, 98, 23, 83, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 67, 84, 63, 92, 41, 88, 30, 79, 3, 64, 65, 25, 52, 78, 17, 37, 23, 98, 35, 83, 93, 15, 87, 69, 74, 96, 55, 66, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 84, 67, 66, 92, 16, 98, 35, 23, 37, 83, 78, 17, 87, 15, 93, 69, 25, 65, 64, 3, 52, 74, 96, 55, 79, 30, 88, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 41, 88, 30, 79, 55, 74, 96, 52, 87, 15, 93, 17, 37, 23, 98, 35, 83, 78, 69, 3, 64, 65, 25, 67, 84, 92, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 79, 41, 88, 30, 55, 96, 64, 65, 3, 52, 78, 17, 98, 23, 37, 83, 35, 93, 87, 15, 69, 25, 74, 67, 84, 16, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 30, 79, 88, 41, 55, 96, 25, 64, 3, 65, 69, 52, 78, 16, 15, 87, 93, 17, 37, 23, 98, 35, 83, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 79, 41, 30, 88, 55, 96, 64, 25, 52, 78, 83, 16, 23, 35, 98, 37, 17, 93, 87, 15, 69, 65, 3, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 35, 16, 98, 23, 37, 17, 78, 52, 15, 87, 93, 69, 65, 64, 25, 3, 74, 96, 55, 30, 79, 88, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 98, 35, 37, 23, 17, 69, 93, 15, 87, 78, 52, 3, 25, 64, 65, 55, 30, 79, 88, 41, 96, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 35, 98, 37, 17, 78, 87, 52, 15, 93, 69, 25, 65, 64, 3, 96, 74, 55, 79, 30, 41, 88, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 37, 35, 98, 78, 52, 69, 15, 87, 93, 25, 65, 64, 74, 3, 96, 55, 88, 30, 79, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 93, 87, 15, 78, 52, 69, 3, 64, 25, 65, 74, 96, 55, 41, 79, 30, 88, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 93, 87, 52, 78, 15, 69, 65, 64, 25, 3, 74, 96, 55, 79, 41, 88, 30, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 78, 87, 15, 69, 93, 52, 65, 25, 64, 3, 74, 96, 55, 41, 30, 79, 88, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 52, 69, 15, 87, 93, 78, 3, 65, 64, 25, 96, 55, 88, 79, 30, 41, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 88, 41, 55, 96, 3, 64, 65, 25, 52, 15, 87, 93, 69, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 3, 64, 25, 69, 15, 93, 87, 78, 52, 65, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 3, 65, 64, 25, 15, 87, 93, 69, 52, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 3, 65, 25, 64, 69, 15, 87, 93, 78, 52, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 64, 65, 25, 69, 93, 15, 87, 52, 78, 3, 96, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 64, 78, 52, 87, 15, 93, 69, 65, 25, 3, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 25, 64, 3, 93, 78, 52, 87, 15, 69, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 15, 93, 87, 69, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 52, 78, 87, 15, 93, 69, 25, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 69, 87, 15, 93, 78, 52, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 93, 69, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 93, 69, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 46, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 46, 18, 21, 89, 62, 91, 7, 48, 5, 9, 71, 20, 73, 58, 14, 10, 31, 44, 90, 22, 76, 61, 59, 97, 57, 27, 50, 86, 8, 56, 6, 11, 19, 34, 85, 26, 54, 82, 33, 13, 70, 40, 99, 47, 51, 95, 77, 36, 4, 32, 75, 12, 94, 81, 38, 29, 45, 42, 2, 28, 60, 24, 80, 68, 53, 39, 1, 49, 72, 43, 63, 66, 92, 67, 84, 83, 16, 23, 17, 98, 35, 37, 74, 79, 30, 41, 88, 55, 96, 65, 3, 64, 25, 52, 87, 15, 69, 93, 78, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 46769.09656629814, 3333.253890879287, 0.0, 56.904489795918366, 36890.61282739475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 39113.13209697457, 2602.7741588644435, 0.495, 19.360816326530614, 31649.15846031544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 36843.051769982696, 2251.6632565337095, 0.495, 6.641632653061224, 31649.15846031544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 42966.126265693834, 2509.406708000742, 0.47, 35.70285714285714, 33881.8689105333);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 39769.06738557878, 2580.686472136058, 1.015, 37.04, 33270.706258281105);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 37832.87804138498, 3020.048576050569, 0.875, 23.72408163265306, 31998.980493288305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 44855.48331033987, 3116.8490007405085, 0.925, 41.602448979591834, 37531.09243373547);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 43715.4692340932, 2954.2248195462194, 0.925, 37.01795918367347, 37531.09243373547);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 43163.62555471266, 3207.95221911706, 1.61, 38.56081632653061, 34770.77901367842);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 45547.234826244254, 3985.815879784095, 1.48, 40.92408163265306, 31617.57813646868);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 42459.16127713596, 3323.5847298966173, 1.48, 37.910204081632656, 31617.57813646868);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 40484.78919857574, 3661.1029373737724, 1.48, 32.84, 31617.57813646868);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 42077.577591964386, 3782.6522727880147, 1.82, 43.266122448979594, 32386.90161851566);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 41068.286522323026, 3015.1700047853856, 1.82, 39.542040816326534, 32386.90161851566);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 40786.5030452192, 3801.66126891058, 1.82, 38.49306122448979, 32386.90161851566);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 41012.35257714799, 3540.185828651085, 2.1, 36.8930612244898, 32922.59965621778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 37809.92641185072, 3598.5676674698407, 2.1, 27.380408163265304, 32922.59965621778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 37889.82903909019, 2867.8599880035126, 2.1, 24.417142857142856, 32922.59965621778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 44137.43498898856, 2973.1357250456317, 2.2, 38.24734693877551, 34903.12480906527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 43299.28267013993, 3406.7184755919934, 2.2, 35.986938775510204, 34903.12480906527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 43258.948260977806, 3289.0184972806433, 2.2, 36.48326530612245, 34903.12480906527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 43329.59504711574, 3100.5709084546843, 2.37, 35.48489795918368, 34067.34795595594);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 42313.67501390241, 2471.539411887943, 2.37, 33.04163265306122, 34067.34795595594);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 41885.731840932174, 2440.9989585687904, 2.37, 29.504489795918367, 34067.34795595594);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 42587.506720261816, 3516.007210120339, 2.33, 38.70938775510204, 33496.031807037856);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 42038.294534578345, 3248.5180941309754, 2.33, 38.60734693877551, 33496.031807037856);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 41272.94854819127, 2987.203059931334, 2.33, 34.946122448979594, 33496.031807037856);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 42954.995894463034, 3013.208368124107, 2.51, 38.71918367346939, 34443.00316561181);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 43622.77643902703, 3395.6817402951665, 2.51, 36.58204081632653, 34443.00316561181);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 43824.11167791, 3544.3557071418054, 2.635, 35.35265306122449, 34443.00316561181);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 42743.652616577296, 2818.77045319073, 2.545, 38.84897959183674, 34172.99857820208);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 42773.358241913935, 3306.570045027303, 2.545, 38.45469387755102, 34172.99857820208);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 42759.98253216537, 2896.6897291749337, 2.545, 38.01959183673469, 34172.99857820208);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 44712.176046224566, 3570.1771859601067, 2.6, 37.68489795918367, 36474.36076165986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 44076.79037587917, 3420.3062000958384, 2.6, 36.14367346938776, 36474.36076165986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 44165.209447551184, 3488.389192612099, 2.725, 34.822857142857146, 34715.13805116416);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 45803.784792193954, 3335.4736766332244, 2.76, 41.40408163265306, 37861.68340410741);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 45456.281999281906, 2941.3121047949094, 2.865, 39.333061224489796, 35643.088546235595);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 44913.32641585191, 3334.6637753058517, 2.865, 38.74040816326531, 35643.088546235595);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 42061.35811573021, 2721.0671646712067, 2.805, 34.1665306122449, 34733.52500995371);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 41904.69714021329, 2743.009460698717, 2.805, 32.946938775510205, 34733.52500995371);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 41707.59812167949, 2887.6381810613943, 2.805, 31.368163265306123, 34733.52500995371);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 42087.494965156664, 2808.4702610268064, 2.775, 34.97061224489796, 32544.910681317466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 41817.520993126884, 2763.8576758258055, 2.775, 33.33795918367347, 32544.910681317466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 42931.43721036478, 3233.697415260677, 2.775, 33.89632653061224, 32544.910681317466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 44524.70416199729, 2979.5092452251233, 2.76, 36.73714285714286, 35809.55787328229);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 44553.83825598109, 3087.965942075644, 2.76, 35.267755102040816, 35809.55787328229);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 44350.334632254584, 2667.6648643404415, 2.76, 34.157551020408164, 35809.55787328229);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 42543.61141131714, 2864.4529326220036, 2.775, 35.712653061224486, 35581.895102848015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 42108.43334097153, 2916.1894827182705, 2.775, 34.12408163265306, 35581.895102848015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 42211.18735023138, 3013.1302042622556, 2.775, 32.60081632653061, 35581.895102848015);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 44357.69460208597, 2885.720773569318, 2.65, 36.33959183673469, 37515.83958177103);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 43880.65564813599, 2990.131031221821, 2.675, 36.73795918367347, 33387.93976773742);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 43889.698227905064, 3363.659720204713, 2.675, 36.1665306122449, 33387.93976773742);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 43490.38258609036, 2853.760264201533, 2.69, 38.32244897959184, 35664.22801944097);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 43808.30030869483, 3084.5323754965393, 2.69, 36.38122448979592, 35664.22801944097);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 42440.49214983556, 2761.286499490984, 2.69, 35.80979591836735, 35664.22801944097);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 44209.21921011915, 2483.21602166174, 2.625, 33.541224489795916, 33796.13802443465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 43991.4788661838, 3338.9039069980577, 2.625, 34.542040816326534, 33796.13802443465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 43559.10023078631, 3579.245165032414, 2.6, 33.25632653061224, 33796.13802443465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 43337.86437624835, 2915.4539307290784, 2.585, 33.884897959183675, 36321.29825692141);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 42811.81297602348, 2660.069769379456, 2.635, 32.64244897959183, 34106.1402998771);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 42004.9909762523, 2706.662788122084, 2.635, 31.409795918367347, 34106.1402998771);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 46216.96559672541, 3341.6163760429713, 2.56, 36.45224489795918, 38421.23018663291);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 45779.94240473887, 2932.940554381132, 2.56, 33.38448979591837, 38421.23018663291);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 45621.51186183076, 3113.942932950376, 2.56, 32.666938775510204, 38421.23018663291);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 46325.685226855865, 3082.865014232862, 2.645, 36.309387755102044, 37366.220374910285);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 45510.71688346193, 3294.5212792886177, 2.645, 34.45142857142857, 37366.220374910285);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 44579.02873227566, 2514.329431078416, 2.645, 32.735510204081635, 37366.220374910285);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 44678.32520737526, 2483.1596197017457, 2.62, 31.73387755102041, 36831.097489224936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 43683.317839130534, 2563.04161846089, 2.69, 30.10857142857143, 34528.82522887302);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 42197.083136255875, 2843.921849796416, 2.69, 27.040816326530614, 34528.82522887302);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 44628.90082770995, 2777.8893746386593, 2.55, 33.76408163265306, 37022.52637173435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 43328.374022805394, 2521.019904790968, 2.55, 33.2930612244898, 37022.52637173435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 43352.95499313755, 2671.2513635043615, 2.55, 31.366530612244897, 37022.52637173435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 44884.784847041155, 2254.688698726751, 2.575, 35.70204081632653, 36705.48805610222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 44571.29711548569, 2338.576707723817, 2.575, 35.06367346938776, 36705.48805610222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 45121.17392671638, 3062.1001436185957, 2.575, 34.0465306122449, 36705.48805610222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 43156.51952679919, 2750.2938385147354, 2.61, 30.34122448979592, 37521.179291067965);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 43397.829127584606, 3176.5045867392496, 2.585, 29.12816326530612, 36581.325993772516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 43130.27136546819, 3015.616717406185, 2.585, 28.813061224489797, 36581.325993772516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 44204.43658831068, 2365.254059475958, 2.545, 30.46204081632653, 35246.06315992132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 44589.115925000486, 2522.714345191505, 2.545, 30.195102040816327, 35246.06315992132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 44320.897595523296, 1841.1129152326007, 2.545, 29.98530612244898, 35246.06315992132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 47646.434331645985, 4006.206566963709, 2.54, 33.11102040816326, 38521.454128230864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 48359.54228836691, 3465.5873678377243, 2.54, 31.85142857142857, 38521.454128230864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 48066.973055751696, 3003.065123590976, 2.54, 30.55265306122449, 38521.454128230864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 46385.17605170341, 2671.142817225149, 2.54, 28.645714285714284, 40277.52352604147);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 45527.83041620235, 2893.817976656337, 2.54, 28.715102040816326, 40277.52352604147);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 44910.97510357348, 2729.542156300278, 2.545, 28.25387755102041, 38163.469468049494);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 45694.28618384907, 3368.877845818843, 2.415, 28.439183673469387, 38054.838678816595);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 43937.180910714575, 2571.5422022700773, 2.415, 26.795102040816328, 38054.838678816595);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 43805.277748799075, 3234.800011599462, 2.415, 26.754285714285714, 38054.838678816595);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 46178.11881511976, 2891.9024373972793, 2.425, 27.373877551020406, 39828.626166638875);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 46069.826405562206, 3101.6533819592046, 2.425, 24.24326530612245, 37697.67640782517);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 45911.37878636227, 3174.241764773531, 2.425, 26.141224489795917, 37697.67640782517);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 46532.67424315894, 2762.719867161988, 2.315, 29.79591836734694, 39983.8386409074);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 46597.99953024034, 3184.4478957916267, 2.35, 28.058775510204082, 37140.10156010054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 46707.26453611698, 3067.352293722481, 2.35, 28.93877551020408, 37140.10156010054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 45418.809399943595, 2562.211855874537, 2.325, 27.721632653061224, 36860.10038342912);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 46054.390608509835, 2702.0459740533142, 2.325, 27.688979591836734, 36860.10038342912);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 45149.3491933817, 2608.0739598968416, 2.325, 27.306122448979593, 36860.10038342912);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 44900.82064623568, 2827.3138743166114, 2.175, 28.216326530612246, 34250.8822629054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 44709.85524893882, 3044.091190494867, 2.175, 26.069387755102042, 34250.8822629054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 44653.37034005782, 2940.625914774288, 2.175, 25.00408163265306, 34250.8822629054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 44882.056750787946, 2748.839286328017, 2.185, 26.297142857142855, 36857.384089547086);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 45127.93578993457, 2378.4283416508183, 2.185, 24.384489795918366, 36857.384089547086);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 44879.01683181944, 2721.0308583127385, 2.185, 23.70938775510204, 36857.384089547086);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 43973.8265469487, 3081.745784559402, 2.15, 24.595102040816325, 37630.89468388266);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 43401.11101154181, 3124.981636702804, 2.15, 24.288979591836735, 37630.89468388266);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 43917.14840288187, 2982.04833324983, 2.15, 22.110204081632652, 37630.89468388266);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 45611.71917709901, 2543.6192694544475, 2.06, 24.25877551020408, 37442.67445706666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 44440.4045097444, 2795.9951530932835, 2.06, 23.80734693877551, 37442.67445706666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 44615.39210033124, 2641.8648906045714, 2.06, 22.676734693877552, 37442.67445706666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 45744.05193431384, 2344.999061015701, 2.03, 21.867755102040817, 40596.66457435908);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 45656.3168875464, 2273.30203038974, 2.03, 21.013061224489796, 39546.596468406184);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 44931.110621167776, 1979.6005951982838, 2.03, 20.507755102040818, 39546.596468406184);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 45029.977649320004, 2401.9276431963285, 1.985, 23.568163265306122, 37160.65278138833);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 43652.969236762336, 1576.51639453242, 1.985, 19.71183673469388, 37160.65278138833);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 43733.64459672708, 2201.688155585293, 1.93, 19.58938775510204, 37160.65278138833);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 46805.589948049215, 3208.3726519541106, 1.945, 27.04, 38277.20074310029);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 45628.32706946567, 3075.8142196305507, 1.945, 26.99918367346939, 38277.20074310029);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 44640.37816830459, 2960.8876004635295, 1.945, 25.27673469387755, 38277.20074310029);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 45346.397057037655, 2267.182272306259, 1.91, 24.681632653061225, 39707.12258622438);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 45077.724411803494, 2410.521268735526, 1.935, 23.187755102040818, 36684.07930883084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 44739.28884408756, 2575.7752204753956, 1.935, 21.627755102040815, 36684.07930883084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 45465.421086528004, 2559.544018514264, 1.8, 24.204897959183672, 38495.82831859939);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 45255.212323132764, 3384.0925631484856, 1.8, 23.54122448979592, 38495.82831859939);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 44580.0889953946, 2978.9415844586433, 1.8, 22.557551020408162, 38495.82831859939);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 45249.37319956523, 3042.5911391721784, 1.82, 23.323265306122448, 38273.08082378198);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 44790.64946321717, 3261.516000258826, 1.82, 22.463673469387754, 38273.08082378198);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 43898.19329613531, 3540.4932491010377, 1.855, 21.755102040816325, 36710.988187146904);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 46294.607183543725, 2750.521041955257, 1.75, 21.82530612244898, 38299.26968255054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 45359.01631953116, 2371.687408345102, 1.75, 19.7665306122449, 38299.26968255054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 45024.4948846665, 2422.0061212364585, 1.75, 20.291428571428572, 38299.26968255054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 47204.443362021906, 2534.685045353396, 1.69, 22.96734693877551, 40081.93431325232);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 46313.40850875986, 3330.274745659576, 1.69, 21.388571428571428, 40081.93431325232);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 45617.616995817414, 2385.7694449597957, 1.69, 20.02857142857143, 40081.93431325232);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 44748.95265109101, 2670.7895144220233, 1.73, 22.379591836734694, 37847.0062549534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 44372.289693115155, 2662.203063825355, 1.73, 21.979591836734695, 37847.0062549534);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 44365.4176408305, 2809.9348487756824, 1.79, 21.608979591836736, 37033.70307509303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 46553.82815271593, 3184.2656267953257, 1.715, 20.58448979591837, 38971.67639095031);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 45376.41193930329, 3552.148505497369, 1.715, 21.080816326530613, 38971.67639095031);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 44732.283072001876, 2201.939434265453, 1.715, 20.026122448979592, 38971.67639095031);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 45379.73049565887, 3208.705681266348, 1.735, 23.260408163265307, 37179.6521043369);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 44666.5968555085, 2867.224434316907, 1.735, 21.080816326530613, 37179.6521043369);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 44878.18546617113, 3160.0355899306833, 1.735, 20.397551020408162, 37179.6521043369);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 45939.268445452, 3123.201114662358, 1.615, 21.900408163265308, 40536.27982547792);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 45827.1205209157, 2602.94362972244, 1.635, 21.459591836734695, 37588.28017181083);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 44707.65894707715, 2801.819047931397, 1.655, 21.467755102040815, 37588.28017181083);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 45587.87566260397, 2532.814435725506, 1.665, 18.249795918367347, 40870.986496512596);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 46218.55587595243, 2809.513844013218, 1.69, 18.587755102040816, 39613.18371609259);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 45905.082832972425, 2675.3790239207856, 1.69, 17.234285714285715, 39613.18371609259);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 45509.489604308044, 2651.3255940693634, 1.66, 20.293877551020408, 39156.50710410498);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 44883.1255580048, 2183.231737405796, 1.66, 17.983673469387757, 39156.50710410498);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 44305.920192205085, 2981.521536324948, 1.66, 17.217959183673468, 39156.50710410498);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 46930.27979334839, 3300.7331026214333, 1.545, 22.34285714285714, 38611.86327259516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 45539.56932925046, 2927.6480533116282, 1.545, 20.095510204081634, 38611.86327259516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 44733.42897486451, 2909.6793672126487, 1.545, 18.718367346938777, 38611.86327259516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 46020.897661369236, 3114.619043395914, 1.565, 20.191020408163265, 37633.079452405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 45973.49057944148, 2833.134987464202, 1.565, 19.394285714285715, 37633.079452405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 45602.86984299849, 2789.803657262807, 1.565, 18.419591836734693, 37633.079452405);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 46091.21206798311, 2531.06088275629, 1.485, 21.297142857142855, 39506.107950934755);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 46039.65209524859, 2265.0092926045686, 1.485, 20.59591836734694, 39506.107950934755);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 45677.510907473596, 2299.5042515890914, 1.485, 19.902857142857144, 39506.107950934755);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 44813.33626140987, 2583.59129741855, 1.515, 19.300408163265306, 39731.494009918635);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 44313.38965932153, 2494.343663917141, 1.53, 19.325714285714287, 36843.12841712373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 44572.07490212388, 2878.068909185524, 1.53, 19.936326530612245, 36843.12841712373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 45173.60402340213, 2878.8912496781536, 1.47, 18.93795918367347, 38090.87277241809);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 44238.71011764064, 2435.9511242312624, 1.47, 18.66938775510204, 38090.87277241809);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 44002.932833517196, 2105.413604960992, 1.47, 18.594285714285714, 38090.87277241809);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 45630.36976446681, 2187.2808852192984, 1.445, 19.420408163265307, 39422.33325275797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 45363.30321910558, 1985.8697788475029, 1.445, 19.21061224489796, 39422.33325275797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 45127.08062420182, 2371.4379398206984, 1.445, 17.85142857142857, 39422.33325275797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 42464.32607501982, 2549.044964238215, 1.405, 13.288979591836735, 37885.6072392852);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 41616.767781301176, 2276.0937240601306, 1.405, 11.431020408163265, 37885.6072392852);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 41685.178039092185, 2624.6925664245296, 1.405, 11.781224489795918, 37885.6072392852);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 42316.4550037059, 1973.6474169328892, 1.42, 14.64408163265306, 37945.212707022045);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 42592.389272050576, 2156.750800445163, 1.42, 14.821224489795918, 37945.212707022045);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 41660.874697797175, 1767.270330309549, 1.385, 14.004897959183673, 37945.212707022045);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 44933.82834364977, 2650.5691897876186, 1.36, 16.49877551020408, 39503.344730752506);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 44857.43276319441, 2599.47780720257, 1.36, 16.710204081632654, 39503.344730752506);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 43762.97417550465, 2554.46650752168, 1.385, 16.336326530612244, 38870.800275413814);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 45301.06247377977, 2536.1460429934396, 1.295, 18.092244897959183, 39736.47548060324);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 44141.18415831374, 1917.508738994694, 1.29, 15.153469387755102, 38542.19223160735);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 44438.032172285115, 2251.091100239532, 1.29, 15.260408163265305, 38542.19223160735);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 44676.05251635916, 2468.57725703592, 1.34, 16.23673469387755, 40001.65143750392);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 43279.41990393201, 2163.63001906887, 1.34, 13.871020408163265, 40001.65143750392);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 43012.67079937007, 2089.275451832519, 1.34, 13.115102040816327, 39417.388340556565);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 44714.48512974914, 1878.5659576949906, 1.35, 13.991836734693878, 39919.34550780972);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 44582.27894640269, 1681.6924976845555, 1.35, 14.324897959183673, 39919.34550780972);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 44584.06087808944, 1897.6790206900523, 1.35, 13.26530612244898, 39919.34550780972);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 45383.396287873016, 2034.736006798031, 1.285, 17.655510204081633, 41366.15407186365);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 44911.15298568417, 1944.7045670830355, 1.285, 16.71673469387755, 41366.15407186365);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 44426.01092856035, 1582.969019025146, 1.295, 15.768979591836734, 39543.04064100808);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 45714.63002131669, 2338.573783833789, 1.3, 16.196734693877552, 40056.11122359168);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 45392.53998628189, 2071.808209692777, 1.3, 12.082448979591836, 40056.11122359168);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 44769.88856670486, 2649.0574337325506, 1.345, 11.657142857142857, 38805.787569734865);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 44852.02027509635, 1956.4192290202834, 1.295, 15.017142857142858, 40486.91034528401);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 43719.370607316865, 2276.1738967213964, 1.295, 13.548571428571428, 40486.91034528401);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 43099.53720437688, 2708.0787971720074, 1.295, 9.857142857142858, 40032.372191334885);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 44260.96381383349, 2054.4280210597385, 1.265, 14.583673469387755, 39808.33527573093);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 43755.40793982669, 2477.8240261505375, 1.265, 14.248979591836735, 39808.33527573093);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 44150.4388246143, 2070.4894986664267, 1.265, 14.124081632653061, 39808.33527573093);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 44312.47083182601, 2008.1946260555928, 1.25, 11.866938775510205, 39181.956719570415);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 44275.077093394415, 2052.9626897141925, 1.25, 11.191836734693878, 39181.956719570415);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 43476.81661283141, 2361.1798281272177, 1.25, 10.663673469387755, 39181.956719570415);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 45557.61390615278, 2286.3031725622736, 1.22, 15.802448979591837, 40560.99558125767);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 44738.58896810983, 2173.9695298209585, 1.22, 12.80734693877551, 40560.99558125767);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 44387.793721360365, 1548.0469346318612, 1.245, 12.347755102040816, 40560.99558125767);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 44269.10946574427, 1874.9421709963428, 1.19, 13.230204081632653, 41004.566296448036);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 45112.11546499658, 2728.3124532812235, 1.19, 11.084081632653062, 41004.566296448036);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 44669.91866164376, 2551.325532215386, 1.205, 10.581224489795918, 40440.9505117121);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 44425.830859408685, 2433.497321891696, 1.195, 12.257959183673469, 39199.125082760525);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 43258.430915174074, 2458.9769082901294, 1.195, 11.70938775510204, 39199.125082760525);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 42244.57218037051, 2249.2201911486122, 1.195, 9.473469387755102, 39199.125082760525);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 45448.33373731131, 1480.2544083132882, 1.175, 10.703673469387756, 42237.49744064237);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 45213.2639086156, 1454.0515072265036, 1.175, 9.94530612244898, 42237.49744064237);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 45728.42148263104, 1626.6188680045293, 1.175, 10.328163265306122, 42237.49744064237);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 46718.45680008546, 1719.7606692920083, 1.115, 12.078367346938775, 42084.51059917865);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 46177.02749072068, 1660.0650709470983, 1.115, 11.29877551020408, 42084.51059917865);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 45823.18060582415, 1547.4797830543841, 1.115, 10.63265306122449, 42084.51059917865);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 46562.65440122594, 1987.0747762245287, 1.105, 12.155102040816326, 42047.612813862674);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 46115.5468811582, 1593.5983558574767, 1.105, 9.28, 42047.612813862674);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 45532.37049899515, 1512.68060363058, 1.105, 9.382857142857143, 42047.612813862674);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 46637.09106387771, 1491.6016325987935, 1.115, 10.361632653061225, 41434.529544854384);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 44748.061424833955, 1577.7270166285916, 1.115, 9.92734693877551, 41434.529544854384);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 44500.731661968006, 1378.9254346104397, 1.115, 9.329795918367347, 41434.529544854384);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 44805.83141813713, 1446.3628018676052, 1.11, 11.132244897959184, 41045.2712874825);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 45724.00818621892, 1243.2249967797593, 1.11, 7.950204081632653, 41045.2712874825);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 45990.19004662404, 1436.3009329218148, 1.11, 7.887346938775511, 41045.2712874825);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 45892.39775032231, 1569.6116125493372, 1.06, 8.681632653061225, 42154.4805568515);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 44621.760090596836, 1572.1406885368413, 1.06, 7.377959183673469, 42154.4805568515);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 43985.766420892876, 1296.5886528255407, 1.06, 6.384489795918367, 42154.4805568515);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 43980.72241773765, 1668.5781374085682, 1.075, 9.259591836734694, 41012.76762636131);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 44277.27601385817, 1793.0174529199621, 1.075, 7.206530612244898, 41012.76762636131);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 44200.10463948914, 1611.696750932856, 1.075, 7.471836734693878, 41012.76762636131);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 45426.58413413044, 1003.3121908823632, 1.06, 7.965714285714285, 41832.2093701574);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 44933.99970532438, 1267.664837592933, 1.06, 7.73469387755102, 41832.2093701574);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 44381.94924796257, 1023.3676073634176, 1.065, 7.783673469387755, 41832.2093701574);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 46509.64537226924, 1266.7142004125021, 1.025, 8.408979591836735, 42570.63128733007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 44589.908096519066, 1422.8683180259327, 1.025, 5.400816326530612, 42570.63128733007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 44349.56809162794, 1449.1047314652722, 1.025, 5.213877551020408, 42570.63128733007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 44295.118188098546, 873.201807746818, 1.015, 6.955918367346939, 42126.812599179044);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 44216.950931903, 1125.1580470687886, 1.015, 6.817142857142857, 42126.812599179044);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 43804.99900991321, 964.7876843775796, 1.015, 5.848979591836735, 42126.812599179044);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 46606.91602106684, 1331.2662356177582, 1.03, 7.836734693877551, 42389.80703189557);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 46989.009150662736, 1168.5888382712028, 1.03, 7.598367346938775, 42389.80703189557);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 46714.20154109274, 1421.9919943367984, 1.03, 7.859591836734694, 42389.80703189557);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 46149.99981646713, 1213.2877561122318, 1.07, 8.896326530612244, 42893.54702641548);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 45112.40715023297, 1423.9788933286736, 1.09, 7.467755102040816, 42573.6443601968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 44577.131615482795, 1517.0252942268842, 1.09, 6.791836734693877, 42573.6443601968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 44222.050767666195, 974.154048242169, 0.985, 6.069387755102041, 42775.986948614656);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 43892.91239181391, 1167.123190117028, 0.985, 3.9355102040816328, 42775.986948614656);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 43436.07874562609, 870.633237814688, 0.985, 3.28, 42775.986948614656);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 45908.108400348596, 1218.6005082422453, 0.94, 3.9975510204081632, 43551.291988240235);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 45483.46000535007, 1237.5498178055832, 0.94, 3.07265306122449, 43551.291988240235);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 45598.0731568731, 1266.7965377064938, 0.94, 3.075918367346939, 43551.291988240235);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 44612.696061640505, 838.2854820182271, 0.915, 6.158367346938776, 43419.594637367605);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 44432.7133288295, 740.3474665131886, 0.915, 4.968979591836734, 43419.594637367605);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 44260.710546081245, 641.6840022006569, 0.915, 4.346938775510204, 43419.594637367605);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 45320.96249590988, 981.060464530223, 0.865, 4.568163265306122, 43576.3111445089);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 44450.533895676694, 626.4217656260768, 0.865, 2.873469387755102, 43576.3111445089);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 44298.86714911997, 696.8429424873444, 0.865, 1.7591836734693878, 43576.3111445089);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 44661.07868330939, 350.6045040225129, 0.92, 1.3861224489795918, 43357.35029579864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 44614.90339758686, 399.1522099130053, 0.92, 1.986122448979592, 43357.35029579864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 44503.67099692716, 407.9075227487254, 0.92, 2.1453061224489796, 43357.35029579864);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 46467.40211288672, 1711.6291252328026, 0.845, 5.497959183673469, 43855.59432383443);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 45453.859022172466, 1568.2120944037124, 0.855, 4.852244897959183, 43803.51335240305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 45004.707005904376, 1584.3944212290678, 0.84, 4.3028571428571425, 43803.51335240305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 45480.052738884464, 524.7223334362136, 0.85, 4.604081632653061, 44266.61691247001);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 45108.47584837692, 717.1366753727727, 0.86, 4.477551020408163, 43913.977426696176);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 45183.25194602622, 635.540213609894, 0.86, 4.497959183673469, 43913.977426696176);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 46156.2819488881, 923.8747148413597, 0.83, 4.908571428571428, 44384.11605023032);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 45948.27203937866, 1122.6008008952845, 0.83, 3.679183673469388, 44384.11605023032);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 46163.545005506574, 1160.358104130043, 0.83, 3.5118367346938775, 44384.11605023032);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 44796.971453265876, 324.806003259006, 0.78, 3.3444897959183675, 44431.37829071222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 44710.36313079115, 317.1546736565842, 0.78, 2.7853061224489797, 44431.37829071222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 44623.943731564235, 268.4114497337961, 0.78, 2.2767346938775512, 44431.37829071222);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 44327.38354769971, 1349.7290009298704, 0.795, 2.911020408163265, 43390.16790845466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 44094.979833086116, 1182.3040341223443, 0.795, 2.8955102040816327, 43390.16790845466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 43593.98509339245, 471.1696343943728, 0.795, 1.8048979591836736, 43390.16790845466);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 45201.86466235144, 522.5022555195454, 0.785, 3.6253061224489795, 44361.81596801923);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 45186.564007156754, 680.7616281769152, 0.785, 1.6342857142857143, 44361.81596801923);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 45193.80209123992, 679.7131037189731, 0.785, 1.6979591836734693, 44361.81596801923);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 45846.5300332955, 310.43586707162524, 0.735, 1.2897959183673469, 44686.79211588066);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 45798.79913059317, 391.30710871197675, 0.735, 0.7493877551020408, 44686.79211588066);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 45791.28600857839, 395.586275998914, 0.735, 0.7444897959183674, 44686.79211588066);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 44844.743936496816, 205.38695284534955, 0.735, 0.34775510204081633, 44789.085257895196);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 44879.40269965279, 239.6878717232331, 0.735, 0.6563265306122449, 44789.085257895196);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 44866.74266469702, 208.215036662131, 0.735, 0.6563265306122449, 44789.085257895196);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 44452.035834119466, 858.3976479900927, 0.715, 1.32, 43880.567585401936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 44449.43790570276, 1022.5896984310826, 0.715, 0.7444897959183674, 43880.567585401936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 44117.59688552728, 718.3072519651165, 0.715, 0.3673469387755102, 43880.567585401936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 45310.9778589879, 2.939930839208568E-11, 0.62, 0.0, 45310.97785898793);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 45310.9778589879, 2.939930839208568E-11, 0.62, 0.0, 45310.97785898793);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 45310.9778589879, 2.939930839208568E-11, 0.62, 0.0, 45310.97785898793);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 44351.93726498334, 2.939930839208568E-11, 0.625, 0.0, 44351.93726498337);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 44351.93726498334, 2.939930839208568E-11, 0.625, 0.0, 44351.93726498337);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 44351.93726498334, 2.939930839208568E-11, 0.61, 0.0, 44351.93726498337);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(10000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.75, 100);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(30937.758509225972);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(30937.758509225972);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");

        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 5, 48, 18, 96, 74, 55, 3, 64, 65, 25, 87, 15, 21, 69, 93, 78, 52, 17, 83, 9, 35, 23, 37, 98, 58, 73, 20, 71, 89, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 11, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 94, 12, 75, 32, 4, 36, 77, 51, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 94, 12, 75, 32, 4, 36, 77, 51, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 94, 12, 75, 32, 4, 36, 77, 51, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 94, 12, 75, 32, 4, 36, 77, 51, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 94, 12, 75, 32, 4, 36, 77, 51, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 7, 41, 30, 79, 88, 91, 74, 96, 55, 27, 92, 50, 86, 76, 57, 66, 60, 24, 80, 68, 67, 72, 49, 43, 1, 53, 39, 63, 81, 94, 12, 75, 32, 36, 4, 51, 95, 77, 29, 38, 84, 45, 2, 28, 42, 40, 99, 70, 47, 13, 82, 33, 54, 19, 11, 6, 8, 56, 26, 85, 34, 61, 59, 90, 22, 97, 44, 31, 10, 71, 20, 73, 58, 16, 14, 46, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 62, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 27, 66, 92, 57, 60, 50, 24, 80, 86, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 68, 39, 53, 63, 1, 43, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 76, 61, 59, 19, 11, 26, 34, 85, 6, 56, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 27, 66, 92, 57, 60, 50, 24, 80, 86, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 68, 39, 53, 63, 1, 43, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 76, 61, 59, 19, 11, 26, 34, 85, 6, 56, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 92, 27, 66, 7, 74, 96, 55, 79, 30, 41, 88, 91, 90, 46, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 92, 27, 66, 7, 74, 96, 55, 79, 30, 41, 88, 91, 90, 46, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 92, 27, 66, 7, 74, 96, 55, 79, 30, 41, 88, 91, 90, 46, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 92, 27, 66, 7, 74, 96, 55, 79, 30, 41, 88, 91, 90, 46, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 49, 72, 38, 95, 77, 51, 36, 4, 75, 32, 12, 94, 81, 43, 1, 39, 53, 63, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 79, 30, 41, 88, 7, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 62, 89, 55, 96, 74, 91, 7, 41, 88, 79, 30, 66, 57, 86, 50, 76, 90, 97, 44, 22, 59, 61, 85, 11, 26, 34, 19, 56, 6, 8, 82, 54, 33, 42, 45, 28, 13, 2, 40, 70, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 6, 8, 56, 54, 82, 33, 42, 13, 2, 45, 28, 70, 40, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 24, 80, 86, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 56, 86, 6, 8, 82, 54, 33, 42, 45, 28, 13, 2, 40, 70, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 80, 24, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 56, 86, 6, 8, 82, 54, 33, 42, 45, 28, 13, 2, 40, 70, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 80, 24, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 26, 34, 19, 56, 86, 6, 8, 82, 54, 33, 42, 45, 28, 13, 2, 40, 70, 99, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 60, 80, 24, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 4, 36, 77, 95, 38, 29, 67, 84, 72, 49, 43, 81, 94, 75, 32, 12, 1, 63, 53, 39, 68, 80, 24, 50, 8, 6, 56, 86, 60, 57, 66, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 91, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 4, 36, 77, 95, 38, 29, 67, 84, 72, 49, 43, 81, 94, 75, 32, 12, 1, 63, 53, 39, 68, 80, 24, 50, 8, 6, 56, 86, 60, 57, 66, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 91, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 4, 36, 77, 95, 38, 29, 67, 84, 72, 49, 43, 81, 94, 75, 32, 12, 1, 63, 53, 39, 68, 80, 24, 50, 8, 6, 56, 86, 60, 57, 66, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 91, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 80, 24, 86, 60, 50, 57, 92, 27, 66, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 39, 53, 1, 63, 68, 24, 80, 86, 50, 60, 66, 57, 92, 27, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 67, 84, 80, 24, 60, 50, 86, 49, 72, 38, 29, 68, 57, 92, 27, 66, 79, 30, 88, 41, 55, 96, 74, 7, 91, 62, 89, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 79, 30, 88, 41, 55, 96, 74, 7, 91, 62, 89, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 50, 86, 60, 80, 24, 57, 92, 27, 66, 91, 62, 89, 74, 96, 55, 41, 79, 30, 88, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 50, 60, 24, 80, 57, 66, 92, 27, 91, 74, 41, 79, 7, 88, 30, 55, 96, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 55, 41, 88, 79, 30, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 69, 21, 93, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 85, 11, 19, 34, 26, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 84, 67, 38, 29, 86, 80, 24, 50, 60, 57, 27, 92, 66, 62, 89, 74, 96, 88, 30, 79, 55, 41, 91, 7, 0]");
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 46769.09656629814, 3333.253890879287, 0.0, 56.904489795918366, 36890.61282739475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 35115.3731718471, 3298.336006818901, 0.51, 9.716734693877552, 31269.19841029838);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 35000.22336705965, 3853.1913380609963, 0.5, 7.706938775510204, 31269.19841029838);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 41466.2122106181, 3140.7673735628946, 0.47, 27.20326530612245, 34652.40552328007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 32119.840190120576, 2670.749673084866, 1.2, 10.942857142857143, 28263.376035674566);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 30650.13615360718, 2219.6729853313, 0.75, 8.651428571428571, 28009.835404123547);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 41368.081592227725, 2489.4746750513023, 0.695, 22.240816326530613, 33986.95144083784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 36923.69106566206, 2208.661836896709, 1.03, 16.01061224489796, 31818.34737631203);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 35865.12139373587, 2415.691941336756, 1.04, 13.075102040816326, 31163.421175318093);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 40365.91797819615, 2370.5837753294027, 1.0, 25.964897959183673, 32784.20346836148);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 37563.70514946146, 4261.898273159686, 1.1, 12.29469387755102, 31524.478508470547);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 37107.24607558985, 4077.328692119062, 1.01, 12.631836734693877, 31326.979623747327);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 38709.3596598883, 2307.8389354341043, 0.96, 25.85469387755102, 31343.50788834821);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 34954.997790493755, 2895.1396905568868, 1.15, 11.361632653061225, 29320.818938740616);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 34259.03444278357, 2644.2262398038415, 0.945, 7.173877551020408, 29320.818938740616);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 36338.0809238743, 2938.7711707806684, 0.94, 18.550204081632653, 29370.30253863789);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 33179.13080637575, 2702.8295940913445, 0.95, 9.604897959183674, 28917.225850895706);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 32482.85857618974, 2388.9091466530062, 0.78, 5.670204081632653, 28917.225850895706);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 36699.30339457676, 2299.149649285405, 0.73, 10.755102040816327, 31884.3660980068);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 31279.765376803418, 1277.0114708171704, 0.86, 3.2008163265306124, 30492.775704333028);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 30883.348029004097, 781.5628769666024, 0.705, 2.3053061224489797, 30492.775704333028);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 33879.007644445555, 2423.8485059583036, 0.685, 7.748571428571428, 29988.977752079645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 31214.777019702677, 1695.0436104917626, 0.685, 4.773877551020409, 29988.977752079645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 30695.947462430842, 771.8000752098361, 0.655, 4.66530612244898, 29988.977752079645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 31794.507507287162, 912.0189086980258, 0.625, 6.395918367346939, 29980.894171510026);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 30642.663332076845, 735.441956585785, 0.625, 2.8424489795918366, 29980.894171510026);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 30397.413913184195, 629.9614118962388, 0.6, 2.0775510204081633, 29980.894171510026);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 32264.8910295731, 597.8047961522718, 0.61, 4.213061224489796, 31002.50368222493);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 30987.756129036265, 206.1850873944035, 0.63, 0.9942857142857143, 30937.758509225972);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 30937.758509225972, 0.0, 0.57, 0.0, 30937.758509225972);

        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(15000);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }
}
