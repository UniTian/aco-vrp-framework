package com.github.schmittjoaopedro.tsp;

import com.github.schmittjoaopedro.tsp.algorithms.MMAS_MEM_CMADTSP;
import com.github.schmittjoaopedro.tsp.graph.Graph;
import com.github.schmittjoaopedro.tsp.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_CMADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/KroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_10_mag_0_5_kroA100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 10, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(35223.62068716791);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 39601.077353207074, 3256.4480241212223, 0.0, 57.137142857142855, 34060.60184509465);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 5, 32642.208710279887, 1823.494116084192, 0.735, 6.50530612244898, 31310.60859911548);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 10, 30688.698290409564, 1888.2640009146317, 0.5, 4.63265306122449, 29637.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 11, 30605.946532683243, 1887.7630632412938, 0.5, 3.2310204081632654, 29637.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 15, 29994.175523220307, 1315.8996380993403, 0.5, 2.0644897959183672, 29425.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 20, 30474.765725464673, 2515.7066893537776, 0.51, 3.40734693877551, 29182.31303832295);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 21, 38562.53481324941, 2314.3880634001293, 0.48, 24.169795918367345, 34764.419193197224);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 25, 35701.10217488725, 2919.7208423440284, 1.285, 36.121632653061226, 30893.933388710346);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 30, 34609.545983704906, 2739.7333438175665, 1.465, 31.652244897959182, 28793.38859586222);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 31, 40631.29141772024, 3316.9941284561332, 1.28, 39.54775510204082, 34086.122904956996);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 35, 37110.8767645478, 3558.7047763834885, 1.6, 33.902857142857144, 30712.656722501906);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 40, 34929.01366691878, 2779.198816129088, 1.61, 27.56734693877551, 30133.465785371227);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 41, 37472.50945987997, 2581.018744237543, 1.55, 39.1534693877551, 30887.622016127145);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 45, 35919.07914981483, 2518.082714566006, 1.55, 29.30938775510204, 30887.622016127145);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 35731.96131475826, 2798.2496932197646, 1.795, 26.926530612244896, 30252.243633974736);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 51, 34744.63164381411, 2708.681511831486, 1.735, 29.04326530612245, 30849.613447622334);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 55, 33231.6161482547, 2290.6750391711435, 1.79, 26.038367346938774, 29155.921573218948);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 60, 33296.11199427873, 2523.2997295133905, 1.79, 24.47265306122449, 29155.921573218948);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 61, 34423.697662278886, 2620.919250273464, 1.825, 32.627755102040815, 30227.975136846566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 65, 34582.80657617932, 2117.3092115187337, 1.86, 31.731428571428573, 28904.92968322273);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 70, 33755.73105693508, 2351.8596359529433, 1.86, 29.536326530612246, 28904.92968322273);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 71, 36029.51914282136, 3138.197377522657, 1.785, 34.21061224489796, 30793.61720496407);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 75, 36451.16428153229, 3229.6841551799625, 1.805, 35.136326530612244, 30058.315901811795);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 80, 36631.03305389915, 3349.0055183027666, 1.825, 33.415510204081635, 29097.31750206596);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 81, 35959.05716554572, 2750.972043910547, 1.795, 28.55183673469388, 30924.736597595445);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 85, 35312.02824475888, 3387.0399003830826, 1.785, 27.481632653061226, 28702.834550428517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 90, 35986.83909126403, 3391.6093737349192, 1.785, 25.80734693877551, 28702.834550428517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 91, 33678.1596357276, 2899.7875740148697, 1.845, 25.194285714285716, 28272.107492430532);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 95, 33415.14918483295, 2479.0858017739606, 1.845, 23.373877551020406, 28272.107492430532);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 34431.912703778435, 3099.7337603407987, 1.845, 22.732244897959184, 28272.107492430532);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 34252.8465275999, 2414.0257089715014, 1.815, 28.416326530612245, 30209.117355335467);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 105, 33080.483869043645, 2247.8922008557906, 1.825, 25.54122448979592, 28606.60764777114);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 110, 33233.01484015571, 2712.2625771895537, 1.8, 21.96816326530612, 27748.101779889934);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 111, 38374.86528845013, 3837.2750986646683, 1.8, 34.36408163265306, 31148.23089752946);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 115, 36942.8090633095, 3342.5103287832058, 1.84, 35.96081632653061, 31059.813960957978);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 120, 36787.13184206049, 3149.0234450199873, 1.84, 34.67755102040816, 31059.813960957978);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 121, 36966.500469772436, 3858.5024236489407, 1.825, 27.533877551020407, 29998.46304682746);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 125, 36107.060967028374, 3049.9514691806594, 1.845, 26.37142857142857, 28799.956892277944);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 130, 36076.865725968426, 2961.662350393528, 1.84, 24.602448979591838, 28785.349867547808);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 131, 33531.62034080187, 2958.802649113509, 1.83, 25.5534693877551, 29629.243819151096);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 135, 32853.126431803415, 2085.1616181924046, 1.85, 24.140408163265306, 28181.91932818619);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 140, 32293.43079412413, 1954.6410139805944, 1.85, 21.59755102040816, 28181.91932818619);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 141, 33556.047472539416, 2754.2082353863407, 1.745, 26.194285714285716, 28893.371764361586);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 145, 33694.11559376305, 2775.7350175786996, 1.725, 25.94857142857143, 28003.96705368513);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 33805.40097337944, 2548.7978848555836, 1.705, 25.172244897959185, 27833.0967647307);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 151, 36433.49594569628, 3498.3472236070215, 1.745, 32.88, 30561.129641980056);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 155, 35946.05451807349, 3336.121754282394, 1.745, 31.344489795918367, 30561.129641980056);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 160, 35987.563760398574, 3602.631224936705, 1.775, 31.324897959183673, 30239.119112363685);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 161, 36440.70953887067, 2709.9558518311856, 1.73, 25.532244897959185, 31108.95048839727);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 165, 35700.15635425881, 3077.615561225279, 1.765, 25.262857142857143, 28885.702259314177);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 170, 35762.36440383918, 3528.4777600758116, 1.765, 23.97795918367347, 28885.702259314177);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 171, 34540.91408030537, 2499.202188589185, 1.76, 26.612244897959183, 30397.29435951378);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 175, 34757.87980756233, 2965.4290887756706, 1.79, 23.333877551020407, 29745.01220631099);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 180, 34282.93170179462, 2695.0990760101736, 1.79, 21.42530612244898, 29519.481089464356);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 181, 35130.351081135115, 2382.1500349642674, 1.7, 28.549387755102043, 30734.029722229847);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 185, 34692.43379186335, 2495.450252965797, 1.7, 26.059591836734693, 30386.71818512449);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 190, 34684.61484882156, 2372.6363223326593, 1.675, 24.5534693877551, 30181.04294251412);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 191, 36210.056405154406, 3963.691332134292, 1.695, 31.037551020408163, 30649.849304732572);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 195, 36937.890345788444, 4046.9780658431287, 1.725, 30.744489795918366, 30332.1846952726);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 35412.670743315226, 3421.2203965783883, 1.745, 30.08326530612245, 29779.701458410902);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 36736.59439159351, 2818.8359821798035, 1.7, 26.060408163265308, 30837.918382361833);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 205, 36556.19120092433, 2992.261668009264, 1.7, 25.343673469387756, 30837.918382361833);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 210, 36518.40497090124, 3088.2620989707775, 1.685, 24.144489795918368, 30640.553268866628);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 211, 33428.88871542478, 1710.012905631977, 1.71, 23.771428571428572, 30398.5286595432);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 215, 35100.809523377764, 2436.643662668179, 1.705, 23.133061224489797, 29527.44139800872);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 220, 34502.078295531166, 2687.385370922121, 1.66, 22.564897959183675, 29150.717577512976);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 221, 35702.27200118447, 1837.9212821421554, 1.62, 27.964081632653063, 31441.099967883158);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 225, 35037.40818432601, 1930.8546971990415, 1.685, 26.413061224489795, 30042.476647130126);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 230, 34471.819885227036, 2429.004874964326, 1.685, 24.384489795918366, 30042.476647130126);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 231, 36093.34431900308, 3175.1587379215184, 1.655, 29.278367346938776, 30709.797371591376);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 235, 36398.60857971742, 3490.113880850859, 1.655, 27.711020408163265, 30709.797371591376);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 240, 36079.8954786676, 3078.3587237787046, 1.655, 27.262857142857143, 30709.797371591376);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 241, 35356.44497156869, 2077.7662325033793, 1.605, 21.92408163265306, 30887.984843114144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 245, 34838.217326892045, 2914.4806018503723, 1.6, 20.42530612244898, 29561.958526759);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 34513.862319429485, 2521.550696320266, 1.6, 18.942040816326532, 29561.958526759);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 251, 35019.37706106128, 2688.5138699175195, 1.59, 23.299591836734695, 30405.799271187592);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 255, 34939.61051780093, 2753.7093740235696, 1.605, 21.616326530612245, 30011.055458615094);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 260, 34663.56395529019, 2798.63362400673, 1.61, 21.475102040816328, 29485.738931546748);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 261, 34997.46514750323, 1957.4420149063126, 1.605, 25.48734693877551, 31122.529171474765);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 265, 35462.29694324302, 2346.950612280335, 1.64, 26.045714285714286, 30792.330431054455);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 270, 35118.54650862616, 1932.7409998087808, 1.645, 24.034285714285716, 30700.31182260962);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 271, 36452.7474936753, 3331.971761633931, 1.595, 25.826938775510204, 32370.09504082117);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 275, 35431.35163831606, 2716.950900866697, 1.595, 24.245714285714286, 30721.971059426636);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 280, 35502.37291635226, 3357.257215023618, 1.595, 23.902857142857144, 30647.14118692141);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 281, 35223.73924500932, 2245.7051256628315, 1.57, 19.35265306122449, 30978.3577278983);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 285, 35949.42755760781, 2507.180373571072, 1.56, 18.13714285714286, 29774.55864513627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 290, 35886.91181069274, 3014.0964502279226, 1.56, 17.34285714285714, 29774.55864513627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 291, 34268.29604152762, 2551.196744684665, 1.595, 22.49795918367347, 30388.71014261702);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 295, 33233.84329369525, 2442.358400322892, 1.6, 19.572244897959184, 29230.806393786865);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 34052.9085128407, 2371.055174658237, 1.545, 20.17795918367347, 29230.806393786865);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 34663.920297417, 2086.7244491826063, 1.52, 19.66530612244898, 30874.406110931675);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 305, 33886.22542251044, 2232.8989597406107, 1.54, 19.04734693877551, 30593.247166245477);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 310, 34213.21690416994, 1986.3911991156558, 1.54, 17.706122448979592, 30593.247166245477);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 311, 35588.13443296116, 2891.529423775504, 1.525, 21.31591836734694, 31125.802303418717);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 315, 35194.423478554294, 3116.7197053955724, 1.515, 19.682448979591836, 30610.668471001045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 320, 35979.20257878787, 3614.079490289945, 1.52, 19.692244897959185, 30471.640522672144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 321, 34794.403093350265, 2461.8980729225686, 1.495, 15.07265306122449, 30454.06424406092);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 325, 33382.2323186113, 1865.2214488693498, 1.485, 11.57469387755102, 29647.06067252622);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 330, 34147.047803461595, 2434.1498697700067, 1.48, 13.686530612244898, 29425.60349995289);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 331, 33163.91219785479, 1872.8779665629268, 1.515, 19.52, 30255.37231902719);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 335, 32670.96364469359, 1569.4900215085797, 1.51, 17.678367346938774, 29272.62945737157);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 340, 33146.11895861948, 2134.3420149208114, 1.51, 18.234285714285715, 29272.62945737157);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 341, 34464.28489467361, 2075.18274455402, 1.45, 18.750204081632653, 30614.18752765077);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 345, 33802.36604675424, 1904.0172926349649, 1.445, 18.45469387755102, 30609.133852198785);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 33247.60854413911, 1883.3843037351528, 1.415, 16.914285714285715, 30036.66763758001);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 351, 34928.613458751446, 2586.271484938635, 1.42, 20.739591836734693, 31031.50049112852);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 355, 35573.001913652726, 3015.5933801631577, 1.435, 18.52408163265306, 30628.336641482838);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 360, 35656.22057792625, 2760.847355120398, 1.42, 20.748571428571427, 30111.043580013404);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 361, 35412.52963766889, 2650.9676320993954, 1.38, 14.598367346938776, 30698.681702960315);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 365, 34202.91167307292, 2375.303947343766, 1.395, 12.97469387755102, 29325.54620925918);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 370, 34411.73614359253, 2159.9651808830804, 1.395, 13.239183673469388, 29325.54620925918);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 371, 33530.15543587086, 2224.1694231240535, 1.405, 20.035918367346937, 30567.010249741445);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 375, 32817.51435820886, 1891.5533660177618, 1.4, 18.76408163265306, 29038.865207938055);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 380, 32826.21958308513, 2094.0456441494284, 1.375, 15.74530612244898, 28959.00827053767);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 381, 34131.68015630897, 1898.6039992476901, 1.33, 19.422857142857143, 30235.350646524523);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 385, 33701.6932361933, 1829.1651721250798, 1.32, 18.11673469387755, 30070.628150792036);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 390, 33408.586241256984, 2186.20666518928, 1.305, 17.539591836734694, 29838.476097825973);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 391, 34401.76610194513, 2884.9695827233345, 1.315, 20.117551020408165, 30116.8583725021);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 395, 34196.259560470295, 2635.70566272571, 1.315, 19.260408163265307, 30116.8583725021);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 34581.43821608885, 3651.771900572612, 1.3, 17.97469387755102, 29940.353521170346);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 35423.94154978684, 2408.9306292466877, 1.285, 14.363265306122448, 30941.04379906605);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 405, 34479.518983794675, 2481.296920132172, 1.28, 15.107755102040816, 29456.848829162533);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 410, 33972.741032183825, 2612.8859265094707, 1.27, 14.393469387755102, 29112.174079569424);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 411, 32886.717498074126, 1959.2076176802204, 1.29, 18.635102040816328, 29238.43749064753);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 415, 32701.885113841126, 2047.5135430617265, 1.29, 17.82530612244898, 29238.43749064753);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 420, 32658.726830198684, 2026.0960577652002, 1.3, 16.533061224489796, 29158.58055324715);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 421, 32916.53827489978, 2260.1827760635892, 1.29, 17.390204081632653, 29561.467968748086);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 425, 33046.596693463776, 2393.49111001555, 1.28, 17.417142857142856, 29506.914227934772);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 430, 32764.00640371979, 1934.7996796719121, 1.28, 16.155102040816328, 29179.69086176716);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 431, 35010.95240709581, 2455.5129193506, 1.29, 19.245714285714286, 31255.385426581433);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 435, 35888.779760347934, 3313.8833793307053, 1.3, 18.84326530612245, 30920.75412098243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 440, 36068.06338283115, 3023.4559606455837, 1.3, 18.953469387755103, 30920.75412098243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 441, 35081.00914803717, 2498.817915114082, 1.285, 13.141224489795919, 30047.50490674599);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 445, 34454.091677572476, 2749.515678120693, 1.29, 11.88408163265306, 29603.616493274778);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 34601.957094235346, 2966.562433616069, 1.29, 12.72408163265306, 29603.616493274778);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 451, 32832.763588118425, 1632.7404649833077, 1.255, 16.096326530612245, 29566.92809292223);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 455, 32523.47174306838, 2001.0682059481649, 1.245, 15.191020408163265, 29086.08491063765);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 460, 31614.11146079799, 1779.0512004566704, 1.24, 12.695510204081632, 28942.360437173287);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 461, 33269.25669595127, 1786.9961866843876, 1.26, 16.547755102040817, 29799.562127603724);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 465, 33083.4582093518, 2544.172885186712, 1.265, 14.793469387755103, 29446.986493391312);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 470, 32252.451868873053, 1897.7675238587317, 1.265, 13.617142857142857, 29446.986493391312);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 471, 33938.07808105436, 2343.1491722954406, 1.25, 16.634285714285713, 31035.90828307316);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 475, 34019.36552626983, 2656.2759505261533, 1.255, 16.34285714285714, 30581.464477155296);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 480, 34476.425493347655, 2939.94416240953, 1.245, 16.018775510204083, 30552.454068274837);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 481, 34943.92228575176, 2696.5221687466583, 1.225, 12.434285714285714, 30310.935817981157);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 485, 34647.89094305837, 2893.1175797872907, 1.215, 12.495510204081633, 30297.093190358053);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 490, 34359.31530837673, 2290.2674050284154, 1.23, 11.721632653061224, 29710.37433123492);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 491, 32537.43514054331, 1659.1322200954621, 1.225, 14.995918367346938, 29725.080829640166);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 495, 32338.982046461235, 2024.5401992046834, 1.225, 13.919183673469387, 29397.524078609214);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 31791.257706847853, 1918.7246523885833, 1.215, 13.04408163265306, 29307.79134840845);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 33295.0320711652, 1850.1976566241212, 1.235, 15.545306122448979, 30206.13539233401);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 505, 33081.3345722413, 2048.889186862314, 1.235, 13.869387755102041, 30206.13539233401);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 510, 32487.393576832237, 1891.57686071541, 1.2, 12.746122448979591, 30186.801073870785);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 511, 33457.14907547517, 1957.2616193786653, 1.21, 15.699591836734694, 30960.10748555952);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 515, 33510.79835507681, 2227.5149020092185, 1.19, 15.216326530612244, 30341.98556123062);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 520, 33205.89407242362, 2203.9431467762834, 1.205, 15.2, 30012.839342286978);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 521, 36453.01542517928, 4426.887894029158, 1.175, 10.885714285714286, 30269.986825401877);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 525, 36322.6660929902, 4644.868780914445, 1.18, 10.783673469387756, 30241.78266477355);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 530, 34950.99770276758, 3806.838998349052, 1.18, 9.513469387755102, 30241.78266477355);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 531, 32346.58720798214, 1547.5211309370263, 1.13, 12.482448979591837, 29357.902439746293);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 535, 32115.305230355025, 1827.2655361470092, 1.13, 11.802448979591837, 29346.735526051634);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 540, 31732.088531923615, 1607.4552300736152, 1.13, 11.008163265306122, 29346.735526051634);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 541, 32622.549136670827, 1687.2656685265624, 1.16, 13.339591836734694, 30002.857180220268);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 545, 32250.843218046528, 1842.3711860351195, 1.16, 13.05795918367347, 30002.857180220268);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 32501.150405393528, 1857.6620483357533, 1.16, 12.590204081632653, 30002.857180220268);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 551, 32277.268150266664, 1576.9934310583835, 1.135, 13.83265306122449, 30572.934941940355);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 555, 32420.99552667829, 1817.9693545908283, 1.14, 13.990204081632653, 30028.93487411707);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 560, 32312.304228604204, 1938.5385997464348, 1.14, 14.092244897959183, 30028.93487411707);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 561, 35315.86048882374, 4547.004829493094, 1.1, 9.475102040816326, 30079.897252489165);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 565, 34773.15225534307, 3421.0556087323484, 1.1, 11.000816326530613, 29898.281288225677);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 570, 34117.08241542142, 3249.563890042503, 1.11, 10.489795918367347, 29884.265565176094);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 571, 32003.353336893186, 1874.6777031430306, 1.105, 12.502857142857144, 29317.733397930595);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 575, 31688.727021001534, 2133.1137028452376, 1.1, 10.901224489795919, 29243.071724941805);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 580, 31651.913712305843, 1325.5226738504919, 1.11, 11.151020408163266, 28907.30515217693);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 581, 32351.656484504627, 1492.550984918942, 1.115, 13.521632653061225, 30118.8463098428);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 585, 32349.536119220047, 1741.1866176723518, 1.115, 12.813877551020408, 30118.8463098428);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 590, 31871.953994858948, 1461.4738209026427, 1.115, 11.488163265306122, 30118.8463098428);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 591, 32201.279958857616, 1933.6778324316817, 1.085, 12.886530612244899, 30399.594610807733);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 595, 32939.57028813535, 2086.4237271363286, 1.085, 13.101224489795918, 29932.693533492566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 32695.481634541546, 2047.049582571981, 1.085, 14.231020408163266, 29932.693533492566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 33459.980638012734, 2239.83422489758, 1.08, 10.695510204081632, 29949.56687586274);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 605, 32942.17092183079, 2084.122558419489, 1.08, 9.66530612244898, 29949.56687586274);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 610, 32887.21814143581, 1901.4757494507935, 1.085, 11.008979591836734, 29735.949416963344);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 611, 32125.091835439183, 1523.039654743503, 1.09, 12.529795918367347, 29377.096183338996);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 615, 31695.230764342774, 1498.3327298908098, 1.075, 11.43673469387755, 29104.30515217693);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 620, 31352.925220927937, 1580.669391685454, 1.07, 9.515102040816327, 28927.719519023067);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 621, 32240.91704781754, 1602.6667123773084, 1.08, 12.582857142857144, 30015.44182610163);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 625, 31784.80375021929, 1255.4193305578713, 1.09, 10.369795918367346, 29354.004742648438);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 630, 31592.39836207722, 1510.1142147801415, 1.09, 10.048163265306123, 29354.004742648438);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 631, 32286.21473023769, 1814.0263529880156, 1.065, 12.876734693877552, 30032.120006434976);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 635, 32988.36941268375, 2438.0270671720486, 1.065, 12.532244897959183, 30032.120006434976);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 640, 33150.235758035706, 2331.106131834687, 1.06, 13.14530612244898, 29914.84868679809);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 641, 34875.09566078735, 2718.946852373043, 1.055, 10.036734693877552, 30372.929963298266);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 645, 34982.52037800153, 2923.5903513236844, 1.065, 10.082448979591836, 30348.254697298362);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 35228.00516938353, 2927.778519017919, 1.065, 9.020408163265307, 29924.058236050114);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 651, 31912.101970949578, 1558.2161479790868, 1.085, 10.848979591836734, 29454.079690801995);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 655, 32289.829154516126, 1632.092048626195, 1.09, 9.252244897959184, 29279.185010507787);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 660, 31570.615540476134, 1817.7822734501983, 1.075, 9.222040816326531, 29229.916199021434);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 661, 32463.494776519576, 1032.452382666138, 1.075, 9.519183673469387, 30146.775517216825);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 665, 32342.850335578514, 1357.0724750149207, 1.08, 10.380408163265306, 29640.50277309688);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 670, 32251.745815702616, 1616.8691106425501, 1.07, 10.350204081632652, 29487.004742648438);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 671, 33078.79600305301, 2117.6065612300267, 1.055, 10.502857142857144, 30742.172377146413);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 675, 32873.24374549245, 1915.8045440529713, 1.055, 9.990204081632653, 30047.603210094356);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 680, 32990.29971066545, 2353.3353834252875, 1.055, 10.386938775510204, 30047.603210094356);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 681, 32263.845684934837, 1447.8632646350502, 1.045, 7.83265306122449, 29983.88963966224);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 685, 32146.692073790808, 1132.4812885730216, 1.05, 5.491428571428571, 29623.8525422849);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 690, 32324.575009659235, 1425.336649964214, 1.05, 6.9616326530612245, 29623.8525422849);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 691, 32081.61952714308, 2020.6998007845611, 1.065, 10.084081632653062, 29876.983865367267);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 695, 31068.50193292166, 1347.4663118175054, 1.06, 7.079183673469387, 29809.3131753026);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 31161.10472551048, 1612.152545439212, 1.07, 6.33469387755102, 29809.3131753026);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 31317.92504532178, 1434.6318766873303, 1.105, 10.168979591836734, 29536.284314348195);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 705, 31075.753612874523, 1449.150238028496, 1.105, 9.14530612244898, 29536.284314348195);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 710, 31123.125919923314, 1676.2254727386037, 1.105, 9.929795918367347, 29536.284314348195);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 711, 32151.302958341395, 2205.877386786155, 1.06, 10.62204081632653, 29667.4622607072);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 715, 31991.918043298425, 2426.345616675944, 1.05, 9.515102040816327, 29448.001810141075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 720, 32505.534829044962, 2616.5320110472794, 1.05, 9.921632653061225, 29448.001810141075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 721, 32380.142235268042, 1435.2642050797028, 1.005, 6.310204081632653, 29728.870097957286);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 725, 32051.009655251677, 1319.9521399192065, 1.005, 7.235102040816327, 29242.916709920744);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 730, 32027.89731297549, 1343.9238426488705, 0.99, 6.417142857142857, 29093.69812977264);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 731, 30593.021758083443, 1703.1223265276842, 1.01, 4.839183673469388, 29434.10798664187);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 735, 30302.891789223762, 1389.4631595839505, 1.005, 3.957551020408163, 29264.85880238251);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 740, 30486.24800354625, 1211.5460538764755, 1.005, 5.266938775510204, 29264.85880238251);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 741, 32197.929953988656, 2117.410376537494, 1.075, 8.117551020408163, 29702.091115211828);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 745, 32820.6285672305, 2005.6582900758501, 1.09, 7.745306122448979, 29682.284314348195);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 32767.82036138326, 2123.1358357107447, 1.09, 7.728163265306122, 29682.284314348195);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 751, 32305.763468928035, 2202.1999217419125, 1.065, 8.19673469387755, 30093.173602550236);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 755, 31604.725455207423, 1736.511016432335, 1.065, 8.34530612244898, 29924.307531067752);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 760, 32569.0634450573, 2667.378597488165, 1.045, 8.37061224489796, 29892.857548279604);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 761, 32669.293084801877, 1610.7135824380093, 1.01, 7.490612244897959, 29657.649640824464);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 765, 32662.37730559103, 1571.3549489865757, 1.01, 7.059591836734694, 29657.649640824464);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 770, 32522.58098404574, 1365.8819661917248, 1.01, 6.466122448979592, 29256.893753911107);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 771, 32472.76804002702, 1622.4397906726617, 0.985, 4.975510204081632, 29614.856576495582);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 775, 32584.566322924165, 1386.2751083865646, 0.985, 4.721632653061224, 29614.856576495582);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 780, 32697.52678905126, 1591.4536066972673, 0.985, 3.9991836734693877, 29614.856576495582);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 781, 32929.946326473684, 2178.2133812265865, 1.04, 7.048979591836734, 30035.138545999893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 785, 32535.591472772165, 1831.7808467327939, 1.04, 7.146938775510204, 30035.138545999893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 790, 32713.37677532048, 2192.1540876201725, 1.04, 6.790204081632653, 30035.138545999893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 791, 31572.336918672907, 1897.6029286451428, 1.04, 6.893877551020408, 29965.633228119605);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 795, 31596.19821600445, 2084.71318041223, 1.035, 6.60734693877551, 29934.183245331456);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 32252.127284603906, 2506.6574450857756, 1.02, 7.033469387755102, 29809.545212837897);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 32459.267666747994, 1481.8286364483363, 0.995, 7.182040816326531, 29265.848869707508);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 805, 32562.500644141255, 1510.721654157809, 0.995, 7.226938775510204, 29265.848869707508);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 810, 32285.222900288998, 1303.6816201297127, 0.995, 6.0718367346938775, 29265.848869707508);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 811, 32305.461865980626, 1989.576271627953, 0.95, 4.496326530612245, 29140.62277314719);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 815, 32478.100651087687, 2065.32198853936, 0.95, 3.4661224489795917, 29140.62277314719);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 820, 31552.99468012494, 2191.424353523405, 0.95, 3.302857142857143, 29140.62277314719);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 821, 30332.300703887366, 765.291979626887, 0.95, 5.264489795918367, 29631.00789504523);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 825, 30354.13395101023, 825.200273131771, 0.97, 5.372244897959184, 29553.40833988936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 830, 30181.834840368192, 781.9275456616735, 0.97, 4.347755102040816, 29553.40833988936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 831, 35000.534456613816, 2069.1899833300554, 0.98, 5.0383673469387755, 30235.093388073088);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 835, 35030.73970081054, 1853.5285941562445, 0.98, 5.318367346938776, 30235.093388073088);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 840, 35385.32682504642, 1665.8699886875486, 0.97, 4.740408163265307, 30016.706961494656);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 841, 32284.76644195034, 1266.0833788289, 0.94, 5.946938775510204, 30056.212181085015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 845, 32038.590812713628, 1404.93285683446, 0.955, 5.2457142857142856, 29831.92431111589);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 32112.100197787135, 1255.4301741066988, 0.955, 4.7542857142857144, 28735.97092307935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 851, 30680.455099790302, 1331.3480149403997, 0.94, 3.4685714285714284, 29748.529213413305);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 855, 30298.611373969634, 1054.3087006301441, 0.965, 4.348571428571429, 29244.21061386462);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 860, 30243.97527626416, 1154.8445334393207, 0.965, 3.6677551020408163, 29244.21061386462);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 861, 30142.11511808651, 264.4699470786874, 1.005, 4.255510204081633, 29401.965649850907);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 865, 30263.090360767786, 522.9888029827846, 1.005, 3.975510204081633, 29401.965649850907);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 870, 30416.646965194937, 787.5956372650905, 1.005, 4.539591836734694, 29401.965649850907);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 871, 34348.86197649211, 1672.4664556484609, 0.965, 3.4824489795918367, 30459.020521930055);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 875, 34706.3834162743, 1447.2611987626483, 0.96, 2.4546938775510205, 29783.156052703034);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 880, 34815.696705680166, 1292.3348631446133, 0.96, 3.0440816326530613, 29783.156052703034);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 881, 32745.472010575315, 748.2079523062256, 0.975, 3.626938775510204, 31106.953007632903);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 885, 32675.703257105968, 823.8685270767023, 0.975, 4.216326530612245, 29421.06739825798);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 890, 32486.71697908437, 908.2411674747422, 0.975, 4.222040816326531, 29421.06739825798);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 891, 30639.291504278397, 1263.7860051068226, 0.92, 2.048979591836735, 29589.498998836247);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 895, 30522.575946316658, 1101.7026000931069, 0.92, 2.0620408163265305, 29540.30708904325);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 30508.00537410703, 1245.8619167618147, 0.91, 2.662857142857143, 29540.30708904325);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 29931.902501728575, 271.9621827554175, 0.895, 2.0751020408163265, 29703.13294386871);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 905, 29921.165137012067, 287.5983674597329, 0.88, 1.9779591836734693, 29353.32223241721);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 910, 29954.238250721894, 345.60267405681174, 0.88, 1.9951020408163265, 29353.32223241721);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 911, 34499.07847581467, 1683.8783925287491, 0.88, 2.506938775510204, 30361.58960879436);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 915, 34562.13116088792, 1718.9023038942885, 0.875, 2.7281632653061223, 29769.076223428758);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 920, 34052.50274371195, 2145.2324643981356, 0.875, 2.75265306122449, 29769.076223428758);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 921, 32269.36141563648, 990.0007061757769, 0.875, 2.1746938775510203, 31126.220760363023);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 925, 31879.039111360205, 774.3993580760185, 0.89, 1.8848979591836734, 29440.3351509881);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 930, 31783.95199957583, 733.1716620233718, 0.89, 1.7379591836734694, 29440.3351509881);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 931, 30738.707233737943, 1017.1671032873414, 0.86, 1.7224489795918367, 29869.23861972681);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 935, 30465.177604999815, 957.8863678333346, 0.86, 1.5844897959183672, 29853.23861972681);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 940, 30879.559365165336, 1193.479567866383, 0.86, 2.1542857142857144, 29853.23861972681);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 941, 30040.236882903417, 266.984202500894, 0.865, 0.8840816326530613, 29875.57307310708);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 945, 30052.119387234932, 272.6667581523406, 0.85, 0.92, 29525.76236165558);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 30065.184999581506, 280.33390285176154, 0.85, 0.9681632653061224, 29525.76236165558);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 951, 34303.26430756545, 1743.6677498741287, 0.84, 1.8710204081632653, 29625.753452154546);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 955, 34315.04043250857, 1727.444932883636, 0.84, 1.7306122448979593, 29625.753452154546);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 960, 34487.54092342316, 1721.7001573650798, 0.84, 1.5787755102040817, 29625.753452154546);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 961, 31827.942989316547, 954.6795998157797, 0.84, 0.9404081632653061, 31119.12954948182);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 965, 31512.914793834443, 795.566333179816, 0.84, 0.6530612244897959, 31119.12954948182);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 970, 31989.126018754134, 984.3231393526601, 0.84, 1.0677551020408163, 31119.12954948182);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 971, 30324.86427483639, 1216.6241112584705, 0.835, 0.4310204081632653, 29880.111420555575);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 975, 30324.86427483639, 1216.6241112584712, 0.835, 0.4310204081632653, 29880.111420555575);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 980, 30176.613323409445, 1015.6951231634679, 0.835, 0.3004081632653061, 29880.111420555575);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 981, 30452.840301121898, 2.204948129406426E-11, 0.835, 0.0, 30452.84030112192);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 985, 30452.840301121898, 2.204948129406426E-11, 0.835, 0.0, 30452.84030112192);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 990, 30452.840301121898, 2.204948129406426E-11, 0.835, 0.0, 30452.84030112192);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 991, 35223.62068716788, 2.939930839208568E-11, 0.835, 0.0, 35223.62068716791);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 995, 35223.62068716788, 2.939930839208568E-11, 0.835, 0.0, 35223.62068716791);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 35223.62068716788, 2.939930839208568E-11, 0.79, 0.0, 35223.62068716791);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[59, 61, 76, 11, 19, 56, 6, 8, 86, 50, 60, 80, 24, 84, 67, 72, 43, 49, 77, 51, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 63, 39, 53, 1, 68, 57, 27, 92, 7, 91, 74, 18, 3, 25, 65, 64, 69, 21, 15, 87, 78, 17, 93, 52, 89, 48, 5, 62, 20, 73, 58, 16, 14, 10, 90, 97, 22, 31, 44, 46, 71, 83, 9, 0, 66, 41, 88, 30, 79, 55, 96, 37, 98, 35, 23, 85, 26, 34, 82, 54, 33, 42, 2, 45, 13, 99, 70, 40, 47, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 31, 44, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 0, 91, 7, 96, 55, 79, 30, 88, 41, 74, 18, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 69, 65, 64, 3, 25, 93, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 28, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 42, 2, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 14, 16, 10, 20, 73, 58, 5, 48, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 71, 83, 9, 89, 78, 52, 18, 46, 92, 27, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 39, 63, 53, 24, 80, 72, 49, 43, 1, 68, 67, 84, 66, 62, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 33, 82, 54, 26, 85, 34, 11, 19, 2, 42, 45, 28, 13, 70, 99, 40, 47, 29, 38, 77, 51, 95, 36, 4, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 25, 65, 18, 74, 15, 87, 93, 17, 23, 37, 35, 98, 21, 69, 52, 78, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 68, 63, 53, 39, 67, 84, 29, 38, 80, 24, 66, 0, 91, 74, 96, 55, 30, 79, 88, 41, 7, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 0, 91, 62, 46, 92, 27, 57, 66, 68, 63, 53, 39, 1, 43, 72, 49, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 19, 8, 6, 56, 86, 50, 60, 80, 24, 5, 48, 18, 74, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 35, 98, 17, 87, 15, 21, 93, 78, 52, 18, 74, 96, 55, 30, 79, 88, 41, 7, 0, 91, 62, 5, 48, 89, 83, 9, 69, 65, 64, 3, 25, 23, 37, 46, 92, 27, 57, 66, 39, 53, 63, 68, 72, 49, 43, 1, 81, 94, 12, 32, 75, 36, 4, 77, 51, 95, 38, 29, 45, 2, 42, 47, 13, 99, 70, 40, 28, 33, 82, 54, 26, 85, 11, 6, 8, 56, 86, 50, 60, 24, 80, 84, 67, 34, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 48, 5, 62, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 99, 40, 47, 95, 77, 51, 29, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 81, 94, 12, 32, 75, 36, 4, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 18, 74, 52, 78, 87, 15, 21, 93, 69, 89, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 60, 80, 24, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 68, 63, 39, 53, 67, 84, 50, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 0, 91, 48, 5, 62, 46, 92, 27, 57, 66, 68, 63, 39, 53, 72, 49, 43, 1, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 19, 8, 6, 56, 86, 50, 60, 80, 24, 74, 18, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 87, 15, 21, 93, 69, 3, 64, 65, 25, 78, 17, 23, 37, 35, 98, 46, 92, 27, 57, 60, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 67, 84, 24, 80, 66, 39, 53, 63, 68, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 18, 74, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 89, 46, 92, 27, 57, 60, 80, 24, 67, 84, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 72, 49, 63, 39, 53, 66, 68, 50, 86, 56, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 47, 13, 70, 40, 99, 29, 8, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 68, 63, 39, 53, 67, 84, 29, 38, 2, 45, 42, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 0, 91, 74, 96, 3, 18, 17, 23, 37, 35, 98, 62, 5, 48, 46, 92, 27, 57, 66, 68, 63, 39, 53, 72, 49, 43, 1, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 19, 11, 26, 85, 34, 6, 8, 56, 86, 80, 24, 50, 60, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 74, 96, 55, 30, 79, 88, 41, 7, 0, 91, 62, 89, 78, 52, 87, 15, 21, 93, 17, 23, 37, 35, 98, 69, 3, 64, 65, 25, 18, 46, 92, 27, 57, 66, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 68, 63, 39, 53, 67, 84, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 74, 96, 55, 79, 30, 88, 41, 7, 91, 66, 0, 46, 62, 18, 89, 78, 87, 15, 21, 93, 17, 23, 37, 35, 98, 52, 65, 64, 25, 3, 69, 92, 27, 57, 60, 80, 24, 67, 84, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 13, 70, 99, 40, 47, 29, 42, 26, 85, 34, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 0, 91, 74, 96, 55, 30, 79, 88, 41, 7, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 3, 25, 89, 46, 92, 27, 57, 60, 80, 24, 86, 56, 6, 8, 54, 82, 33, 42, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 68, 63, 39, 53, 67, 84, 38, 29, 45, 26, 85, 34, 11, 19, 50, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 74, 18, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 0, 91, 62, 46, 92, 27, 57, 66, 68, 63, 39, 53, 72, 49, 43, 1, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 19, 8, 6, 56, 86, 50, 60, 80, 24, 89, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 87, 15, 21, 93, 78, 17, 23, 37, 35, 98, 89, 3, 64, 25, 65, 69, 46, 92, 27, 57, 66, 39, 53, 63, 68, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 29, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 47, 13, 70, 99, 40, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 38, 29, 68, 63, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 45, 42, 2, 19, 11, 26, 85, 34, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 66, 68, 67, 84, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 11, 26, 85, 34, 19, 8, 6, 56, 86, 50, 60, 80, 24, 72, 49, 43, 1, 63, 39, 53, 88, 30, 79, 55, 96, 74, 18, 52, 78, 87, 15, 21, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 41, 7, 91, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 24, 80, 86, 50, 8, 6, 56, 11, 26, 85, 34, 19, 82, 54, 33, 42, 45, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 72, 67, 84, 49, 1, 53, 39, 63, 68, 66, 91, 7, 41, 88, 30, 79, 55, 74, 96, 18, 52, 87, 15, 21, 93, 78, 17, 23, 37, 35, 98, 69, 3, 64, 25, 65, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 47, 13, 70, 99, 40, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 38, 29, 68, 63, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 38, 29, 84, 67, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 67, 84, 49, 72, 43, 1, 63, 39, 53, 68, 66, 91, 7, 41, 88, 30, 79, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 8, 6, 56, 86, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 11, 26, 85, 34, 19, 66, 91, 7, 41, 79, 30, 88, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 17, 23, 37, 35, 98, 69, 3, 65, 64, 25, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 85, 26, 11, 19, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 39, 63, 68, 53, 1, 72, 67, 84, 38, 29, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 99, 40, 70, 47, 29, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 67, 84, 49, 72, 43, 1, 63, 39, 53, 68, 66, 91, 7, 41, 88, 30, 79, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 52, 78, 18, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 66, 91, 7, 41, 88, 30, 79, 55, 74, 96, 18, 52, 78, 87, 15, 21, 93, 17, 23, 37, 35, 98, 69, 65, 64, 25, 3, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 53, 68, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 18, 74, 52, 78, 87, 15, 21, 93, 69, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 47, 70, 40, 99, 77, 51, 36, 4, 32, 75, 12, 94, 81, 43, 49, 72, 67, 84, 38, 95, 29, 68, 63, 39, 53, 1, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 72, 67, 84, 49, 1, 63, 39, 53, 68, 66, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 87, 15, 21, 93, 17, 23, 37, 35, 98, 69, 3, 64, 25, 65, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 53, 68, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 72, 67, 84, 38, 29, 45, 42, 2, 68, 63, 39, 53, 1, 66, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 55, 30, 88, 41, 79, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 67, 84, 49, 72, 43, 1, 63, 39, 53, 68, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 67, 84, 49, 1, 72, 39, 53, 63, 68, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 87, 15, 21, 93, 17, 23, 37, 35, 98, 78, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 53, 39, 63, 68, 67, 84, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 72, 49, 43, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 67, 84, 72, 49, 43, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 67, 84, 49, 72, 43, 1, 63, 68, 39, 53, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 87, 15, 21, 93, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 43, 72, 67, 84, 38, 29, 49, 1, 53, 39, 63, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 78, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 87, 15, 21, 93, 17, 23, 37, 35, 98, 78, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 39, 53, 1, 72, 67, 84, 63, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 39, 53, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 87, 15, 21, 93, 78, 17, 23, 37, 35, 98, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 63, 39, 53, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 72, 67, 84, 49, 43, 68, 63, 39, 53, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 87, 15, 21, 93, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 52, 78, 18, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 72, 67, 84, 49, 43, 63, 39, 53, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 63, 39, 53, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 66, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 87, 15, 21, 93, 17, 37, 23, 98, 35, 78, 69, 3, 64, 25, 65, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 67, 84, 72, 39, 63, 53, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 72, 43, 1, 63, 39, 53, 68, 66, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 52, 78, 18, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 72, 39, 53, 63, 68, 66, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 87, 15, 21, 93, 17, 23, 98, 35, 37, 78, 69, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 53, 39, 63, 68, 72, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 98, 35, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 72, 39, 63, 53, 68, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 98, 35, 23, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 72, 39, 53, 63, 68, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 78, 17, 23, 37, 35, 98, 15, 87, 93, 69, 21, 65, 64, 25, 3, 96, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 23, 37, 35, 98, 17, 87, 15, 21, 93, 69, 52, 78, 18, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 0, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 52, 78, 18, 74, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 91, 74, 18, 52, 78, 87, 15, 21, 93, 17, 23, 37, 35, 98, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 52, 78, 17, 23, 37, 35, 98, 87, 15, 21, 93, 69, 3, 64, 65, 25, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 74, 18, 52, 87, 15, 21, 93, 78, 17, 37, 98, 35, 23, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 87, 15, 21, 93, 17, 37, 23, 98, 35, 78, 69, 65, 64, 25, 3, 96, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 17, 23, 37, 98, 35, 78, 87, 15, 52, 18, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 78, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 52, 78, 18, 74, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 78, 23, 37, 35, 98, 17, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 87, 15, 21, 93, 69, 3, 64, 65, 25, 78, 17, 23, 37, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 78, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 87, 93, 69, 21, 15, 65, 25, 64, 3, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 87, 15, 21, 93, 17, 37, 23, 98, 35, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 87, 15, 21, 93, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 25, 64, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 35, 98, 69, 64, 3, 65, 25, 87, 15, 21, 93, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 93, 21, 15, 87, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 93, 21, 15, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 93, 21, 15, 69, 65, 25, 64, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 25, 3, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[59, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 48, 5, 62, 89, 46, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 49, 43, 1, 63, 68, 72, 39, 53, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 17, 23, 37, 98, 35, 87, 15, 21, 93, 69, 65, 64, 3, 25, 59]");

    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_100_mag_0_5_kroA100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 100, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(31156.72274024026);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 39601.077353207074, 3256.4480241212223, 0.0, 57.137142857142855, 34060.60184509465);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 29126.819714924102, 1707.5428996423536, 0.5, 1.826938775510204, 28318.066788478158);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 29485.92950832074, 2279.8109341195604, 0.5, 2.4653061224489794, 28318.066788478158);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 29502.344312133755, 2107.9376482285165, 0.5, 2.1787755102040816, 28318.066788478158);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 29356.776659446306, 2181.0496830798656, 0.505, 2.5763265306122447, 28213.556168806812);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 28793.830240415264, 1648.281201504337, 0.5, 1.733877551020408, 28101.93274924029);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 38863.54174056483, 2305.8490227399034, 0.475, 23.459591836734695, 35116.487107812616);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 31841.953917327817, 2067.5951873899608, 0.865, 7.581224489795918, 29911.028522839923);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 32467.05905966494, 2725.8321612396, 0.86, 14.670204081632653, 29446.750345343393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 39646.699351688425, 4509.110195048116, 0.75, 20.297142857142855, 31927.68510898287);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 31967.844851346115, 1598.1282014288863, 1.02, 13.919183673469387, 29304.433915232836);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 31450.399753911966, 1762.6858507995917, 0.985, 12.14530612244898, 28965.725826848113);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 36545.71295479987, 2753.6108060802576, 0.95, 21.957551020408165, 31598.934596650957);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 35155.39631969135, 2555.4161425835755, 1.005, 15.36, 30022.076758776595);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 33850.19367021523, 2577.8036689239866, 0.91, 10.045714285714286, 29945.459767053613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 35366.04328391885, 2668.392849135808, 0.925, 8.93061224489796, 30423.028960505184);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 31742.636378873558, 2646.4779822555106, 0.965, 5.771428571428571, 28992.685782417015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 30910.128208804006, 2047.1635019686978, 0.85, 4.572244897959184, 28992.685782417015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 32852.77198527628, 1770.0511731844247, 0.83, 8.808979591836735, 30109.157673913393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 31219.451092682244, 2898.1960516045333, 0.85, 2.8522448979591837, 29070.64220172613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 30105.34053751548, 2324.0693907838436, 0.77, 1.2155102040816326, 29070.64220172613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 33279.357497640776, 936.3966107289397, 0.73, 8.197551020408163, 30650.9904056915);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 31921.77613957204, 1199.726577350443, 0.795, 5.062857142857143, 30189.16632338332);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 31358.787701946472, 1649.7179714436595, 0.675, 4.089795918367347, 30189.16632338332);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 34394.47697734481, 2374.204773497583, 0.665, 6.143673469387755, 30969.926618747286);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 31729.18628254774, 2368.000668693057, 0.72, 3.057142857142857, 30182.390949198987);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 30429.272688196867, 1015.3833963741064, 0.715, 1.5910204081632653, 29685.99865178929);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 31232.940076165632, 305.9355444879454, 0.715, 0.313469387755102, 31156.72274024026);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 31227.63764880982, 284.1797759955645, 0.715, 0.27346938775510204, 31156.72274024026);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 31156.722740240235, 2.572439484307497E-11, 0.665, 0.0, 31156.72274024026);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[59, 61, 76, 11, 19, 56, 6, 8, 86, 50, 60, 80, 24, 84, 67, 72, 43, 49, 77, 51, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 63, 39, 53, 1, 68, 57, 27, 92, 7, 91, 74, 18, 3, 25, 65, 64, 69, 21, 15, 87, 78, 17, 93, 52, 89, 48, 5, 62, 20, 73, 58, 16, 14, 10, 90, 97, 22, 31, 44, 46, 71, 83, 9, 0, 66, 41, 88, 30, 79, 55, 96, 37, 98, 35, 23, 85, 26, 34, 82, 54, 33, 42, 2, 45, 13, 99, 70, 40, 47, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 96, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 55, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 28, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 74, 18, 52, 78, 17, 23, 37, 35, 98, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 8, 54, 82, 33, 26, 85, 34, 19, 11, 56, 6, 84, 67, 29, 38, 4, 36, 32, 75, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 45, 28, 42, 55, 96, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 30, 79, 88, 41, 7, 91, 0, 62, 92, 27, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 66, 96, 3, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 66, 96, 55, 79, 30, 88, 41, 7, 91, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 92, 27, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 66, 91, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 92, 27, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 66, 91, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 92, 27, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 66, 91, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 92, 27, 57, 66, 91, 0, 50, 60, 80, 24, 54, 82, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 86, 8, 6, 56, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 0, 91, 7, 96, 55, 79, 30, 88, 41, 57, 66, 27, 92, 50, 60, 80, 24, 54, 82, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 86, 8, 6, 56, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 0, 91, 27, 92, 66, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 96, 3, 17, 23, 37, 35, 98, 62, 0, 91, 27, 92, 66, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 80, 24, 50, 60, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 62, 37, 23, 17, 98, 35, 92, 27, 57, 66, 53, 39, 63, 68, 80, 24, 50, 60, 6, 8, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 84, 67, 86, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 62, 37, 23, 17, 98, 35, 92, 27, 57, 66, 60, 80, 24, 50, 86, 56, 6, 8, 54, 82, 33, 28, 2, 45, 42, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 38, 29, 13, 11, 26, 85, 34, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 62, 37, 23, 17, 98, 35, 92, 27, 57, 66, 60, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 57, 66, 60, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 80, 24, 67, 84, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 57, 66, 60, 50, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 86, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 66, 57, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 95, 77, 51, 29, 38, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 66, 57, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 66, 57, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 66, 57, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 17, 23, 37, 35, 98, 62, 0, 92, 27, 66, 57, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 24, 80, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 27, 92, 66, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 63, 68, 67, 84, 53, 0, 62, 37, 35, 98, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 8, 68, 63, 39, 53, 66, 62, 37, 35, 98, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 43, 72, 39, 63, 68, 53, 1, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 70, 40, 99, 47, 13, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 68, 43, 1, 53, 39, 63, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 67, 84, 49, 72, 39, 53, 63, 68, 66, 62, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 39, 53, 63, 68, 67, 84, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 53, 39, 63, 68, 67, 84, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 17, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[59, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0, 92, 27, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 84, 67, 68, 63, 39, 53, 66, 62, 37, 23, 17, 98, 35, 59]");
    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_10_mag_0_5_kroA150() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 10, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(39365.618574442226);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 47612.67939543519, 2940.9855025489237, 0.0, 84.57142857142857, 42683.170205531416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 5, 41984.70574036803, 2723.3224950880353, 0.6866666666666666, 17.675102040816327, 39027.03324507068);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 10, 38198.7199291893, 1347.5861323133272, 0.58, 3.073469387755102, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 11, 39461.347387068374, 2862.8456532926616, 0.58, 8.681632653061225, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 15, 38384.25814215073, 1927.523097409122, 0.58, 3.3771428571428572, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 20, 41638.63570107753, 3943.0691798762614, 0.49333333333333335, 7.78204081632653, 37650.745899033616);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 21, 52785.62293347695, 3938.3943719572835, 0.48333333333333334, 37.099591836734696, 47267.53384712789);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 25, 46639.63582875952, 4198.77445218648, 1.2766666666666666, 50.884081632653064, 37880.0391974431);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 30, 44314.50195965742, 2983.787169214176, 1.3566666666666667, 41.90775510204082, 37782.62707952472);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 31, 51128.24603867335, 4154.255888210835, 1.18, 60.459591836734695, 44221.75435103567);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 35, 47013.029008422454, 3811.7215665058843, 1.5066666666666666, 53.729795918367344, 40905.68015936153);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 40, 45994.952246465014, 3402.9882187839976, 1.6566666666666667, 45.031020408163265, 39816.23783889897);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 41, 49876.95271741289, 3526.477499556218, 1.6133333333333333, 58.2465306122449, 43728.248107240295);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 45, 48463.3498996933, 4128.270131046256, 1.8266666666666667, 54.928979591836736, 40795.40900288766);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 47145.08733200276, 3919.793042868154, 1.9133333333333333, 55.44571428571429, 38985.170489939715);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 51, 45027.80873627259, 2666.0159555073233, 1.86, 52.137142857142855, 39875.46025776874);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 55, 44293.10187075304, 3260.4128857367846, 1.9933333333333334, 47.36489795918367, 38126.118813669935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 60, 43894.87738910374, 2814.180302497097, 1.9933333333333334, 46.86448979591837, 37813.39841864435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 61, 45337.444487235465, 2859.569939494318, 1.8966666666666667, 53.226122448979595, 39666.46235893393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 65, 45388.4644989345, 3750.2548058151347, 1.92, 53.799183673469386, 39181.475638970405);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 70, 44564.55357092185, 2998.2814036766026, 1.9466666666666668, 48.02612244897959, 38027.551819922526);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 71, 45816.14927362537, 3979.990417262646, 1.92, 47.78857142857143, 39618.36648683038);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 75, 44816.02336451984, 3638.8302368099485, 1.98, 49.32163265306122, 39018.5859894124);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 80, 46058.60459524251, 3986.311005762169, 2.006666666666667, 47.9330612244898, 37042.0628277019);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 81, 47811.4404217829, 3484.028409657692, 1.9633333333333334, 53.58204081632653, 41904.79751783048);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 85, 47575.79798623678, 5055.63037053319, 2.0533333333333332, 52.42857142857143, 39711.17592286687);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 90, 46206.28126605506, 3895.7356169622003, 2.1033333333333335, 51.49306122448979, 39542.07810906441);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 91, 44426.767194310676, 2690.3566652542936, 2.0766666666666667, 46.10367346938776, 39229.04580599837);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 95, 44490.36656528923, 2710.9504756748647, 2.1233333333333335, 45.53469387755102, 38743.003529060305);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 44097.62071250358, 2433.532434986328, 2.1233333333333335, 45.76734693877551, 38424.557716010946);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 46245.940656476356, 3926.6158805154123, 2.1033333333333335, 50.9730612244898, 39934.32412598851);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 105, 45135.566879165766, 3276.9863166462205, 2.1233333333333335, 49.59428571428571, 38815.6458922146);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 110, 45599.56550440997, 3891.349169045828, 2.1233333333333335, 44.878367346938774, 38815.6458922146);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 111, 45864.22617655145, 3973.3229913856253, 2.0533333333333332, 45.80897959183673, 39487.417934508354);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 115, 45716.51295276076, 3185.43029441269, 2.0366666666666666, 47.0865306122449, 38379.9729306296);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 120, 45297.46928950784, 3592.283023885614, 2.0366666666666666, 45.0, 38379.9729306296);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 121, 47903.01407616606, 3682.3726350188176, 1.9933333333333334, 53.666938775510204, 41880.029576732224);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 125, 46925.87008244457, 3778.285337217771, 2.07, 51.924897959183674, 38701.798708866416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 130, 47023.13929699138, 3466.385535706345, 2.07, 51.478367346938775, 38701.798708866416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 131, 44371.87643061249, 2725.3100188893213, 2.0033333333333334, 44.667755102040815, 38266.00948606088);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 135, 44615.41408813263, 3137.3424549111246, 2.0033333333333334, 45.0269387755102, 38266.00948606088);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 140, 43890.23085634762, 2997.706788635504, 2.006666666666667, 46.00081632653061, 37949.65567546163);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 141, 46668.32140542121, 4354.513327941658, 2.02, 46.47428571428571, 39078.92776921486);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 145, 44753.37648865089, 3585.4712150906635, 2.04, 47.64408163265306, 38256.18140922577);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 44525.54129005801, 3543.697529692605, 2.04, 43.2734693877551, 38256.18140922577);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 151, 46150.06827268675, 3430.228920037893, 1.9733333333333334, 48.140408163265306, 40215.53066229023);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 155, 45595.82232973798, 3973.969526229079, 1.9666666666666666, 46.47265306122449, 38021.552791136346);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 160, 45099.54348900286, 3786.260249507997, 1.9866666666666666, 46.12244897959184, 36959.828924523325);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 161, 47109.28072005436, 3451.582484134732, 1.93, 49.84326530612245, 40765.05429555879);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 165, 46972.72556751178, 3299.1490643236225, 2.0033333333333334, 48.226938775510206, 39665.468994815434);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 170, 45927.048240681375, 3533.0318397591705, 2.006666666666667, 48.26204081632653, 39486.74076723017);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 171, 45576.54438508133, 3243.5294736279357, 2.0033333333333334, 46.204081632653065, 40255.09839457256);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 175, 44336.133870511454, 2615.7247178699154, 2.08, 43.19020408163265, 39309.29555139097);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 180, 44890.70717066188, 3550.9745214226455, 2.08, 43.0865306122449, 38351.90876709587);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 181, 45340.563857726665, 3491.135741592254, 2.0366666666666666, 45.81061224489796, 39722.460456891335);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 185, 45260.74448851259, 3412.2805017924006, 2.066666666666667, 45.47591836734694, 38751.683959824164);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 190, 45642.91061448363, 3372.99594524265, 2.04, 44.22204081632653, 38481.18407164601);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 191, 44795.340368102414, 3666.0571991494294, 2.0233333333333334, 42.87265306122449, 39400.35753955766);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 195, 45333.0367041491, 3646.2185893170426, 2.0633333333333335, 42.902857142857144, 38266.14762233552);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 44323.095255072985, 3358.2463283741977, 2.12, 40.479183673469386, 37724.202636172966);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 46209.350090240536, 3327.435284739338, 2.1133333333333333, 48.25142857142857, 40052.97831418548);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 205, 48014.17826068675, 4097.845002246754, 2.15, 46.86693877551021, 39250.27889186692);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 210, 46881.855619949754, 3392.384440911175, 2.1466666666666665, 46.645714285714284, 39136.85107895886);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 211, 45635.19222112995, 3465.2173872413086, 2.1033333333333335, 41.885714285714286, 40443.49094169229);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 215, 45504.73855355059, 3184.9456195009934, 2.1033333333333335, 43.49061224489796, 39655.7355937977);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 220, 46249.90915547783, 3282.3086935227316, 2.11, 43.23510204081633, 39127.99740803568);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 221, 46560.86745619165, 3257.25796921305, 2.0966666666666667, 46.328163265306124, 42072.993024711875);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 225, 46729.207296324865, 4006.091949135744, 2.1133333333333333, 45.8734693877551, 39073.4655465735);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 230, 46009.55799105731, 3588.139414139964, 2.11, 45.241632653061224, 38802.03373745897);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 231, 44341.548993923396, 3653.457708122525, 2.0733333333333333, 40.563265306122446, 36119.423564169025);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 235, 44388.20598378208, 3207.9418421408673, 2.0733333333333333, 41.204897959183675, 36119.423564169025);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 240, 44375.70833849028, 3825.9742152841977, 2.0733333333333333, 38.53387755102041, 36119.423564169025);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 241, 47058.36103569753, 4099.437270134055, 2.0633333333333335, 42.79183673469388, 40943.69354466966);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 245, 46144.35041435278, 3558.81818078363, 2.1033333333333335, 42.71673469387755, 39616.402191434834);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 46279.03811367902, 4145.5821571659535, 2.0966666666666667, 40.795102040816325, 38773.78760109346);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 251, 45087.28570809226, 3122.866103547649, 2.06, 40.01714285714286, 38992.87339805731);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 255, 45059.776802707034, 3303.804070031083, 2.0566666666666666, 34.943673469387754, 37664.841736873626);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 260, 44104.00167333972, 3197.6892511822957, 2.0566666666666666, 35.1134693877551, 37664.841736873626);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 261, 45664.848594468, 3120.399999992705, 2.0433333333333334, 41.221224489795915, 41735.41994874181);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 265, 45748.23870276307, 3495.4365126777584, 2.0866666666666664, 40.70122448979592, 39961.713774832046);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 270, 45484.198231123424, 3248.3925279142777, 2.08, 41.02448979591837, 39434.44269589054);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 271, 44424.55876596233, 3229.484376689977, 2.05, 40.25061224489796, 38515.05961984089);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 275, 45038.11274856451, 3297.3271632687565, 2.0433333333333334, 40.96489795918367, 37973.861525871);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 280, 43803.24646990127, 2479.590732321063, 2.0566666666666666, 39.18530612244898, 37933.09290461243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 281, 46754.92477891135, 3974.74376440746, 1.9566666666666668, 43.667755102040815, 38912.88595907788);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 285, 47778.98640855872, 3496.623823385005, 1.9566666666666668, 41.40571428571429, 38912.88595907788);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 290, 47631.83587222592, 4683.245553744267, 1.9566666666666668, 39.544489795918366, 38912.88595907788);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 291, 45865.64405794662, 3887.856691746366, 1.95, 38.33714285714286, 39728.73335871748);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 295, 45290.09924847703, 3515.994403313124, 1.97, 38.40897959183673, 37817.2809652535);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 44972.91291181787, 3069.1450081487137, 1.9433333333333334, 37.07836734693878, 37817.2809652535);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 45759.21609175978, 2706.410112424391, 1.95, 39.25469387755102, 40589.461753185926);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 305, 44727.11949327535, 2512.2525403836007, 1.9733333333333334, 39.21551020408163, 39912.39313998106);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 310, 45937.26378477455, 3130.9214718031594, 1.9733333333333334, 39.986938775510204, 39912.39313998106);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 311, 44524.75531755025, 3863.1383130951667, 1.9166666666666667, 38.59918367346939, 37974.81627646847);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 315, 44306.438689990944, 3109.9385829286452, 1.8966666666666667, 37.818775510204084, 37759.840214265736);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 320, 44001.955523388024, 2688.9133712656767, 1.8866666666666667, 37.34122448979592, 37421.717144605005);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 321, 47293.75173915673, 4147.272808722488, 1.85, 40.47183673469388, 41445.790605552305);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 325, 47978.34755752173, 4134.605971852868, 1.8766666666666667, 37.90204081632653, 38468.33704627724);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 330, 48073.691830445176, 3359.7988971521313, 1.8766666666666667, 35.44244897959184, 38468.33704627724);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 331, 44493.73502482517, 4200.673419924863, 1.8633333333333333, 34.52, 38123.443867758964);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 335, 44520.34096193833, 4763.160513237704, 1.85, 34.10367346938776, 37044.33048968339);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 340, 43243.92901570024, 3789.7603232922297, 1.8266666666666667, 32.34040816326531, 36474.60820619746);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 341, 45817.71989490274, 3189.8609782598433, 1.8366666666666667, 37.223673469387755, 41975.02133697545);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 345, 45248.30897012124, 2718.359903532432, 1.8566666666666667, 35.95755102040816, 40042.643746551556);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 46186.77811376213, 3016.0853945956346, 1.8566666666666667, 35.91102040816327, 39732.562931316104);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 351, 44263.35988958909, 3913.986317331074, 1.8233333333333333, 36.15265306122449, 38851.4359599033);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 355, 43747.21819515662, 3064.388433682328, 1.8133333333333332, 33.52408163265306, 37888.87959359696);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 360, 43221.47145153991, 3113.098429444923, 1.82, 33.42775510204082, 37433.06866461375);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 361, 47000.62419269877, 4298.623760867377, 1.7866666666666666, 35.98122448979592, 39498.19213353407);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 365, 45896.47848245149, 3795.2879365742024, 1.8033333333333332, 34.93632653061224, 37604.644053562944);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 370, 45418.48523510745, 4271.470511160569, 1.8033333333333332, 32.40081632653061, 37604.644053562944);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 371, 42940.85569909191, 3510.8511243243083, 1.7566666666666666, 32.480816326530615, 36638.818914561976);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 375, 44325.15820256653, 4540.772103449299, 1.7566666666666666, 30.511020408163265, 36638.818914561976);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 380, 43475.10664755901, 3712.322790227128, 1.73, 30.132244897959183, 36336.1123788733);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 381, 45119.32990999906, 3877.1962678223267, 1.7333333333333334, 32.66367346938775, 38850.37794255408);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 385, 44878.47516265996, 4051.405383989296, 1.7333333333333334, 33.35836734693878, 38850.37794255408);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 390, 45484.491463559985, 3279.5341186023843, 1.7333333333333334, 33.27265306122449, 38734.8869977163);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 391, 43816.89046610403, 3452.052618056104, 1.73, 30.782857142857143, 37868.56484488425);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 395, 44331.241542537966, 3024.7365827801186, 1.7366666666666666, 29.356734693877552, 37344.72133937229);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 44273.953473464775, 4019.70128708215, 1.7366666666666666, 27.69142857142857, 37031.82760649714);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 45632.97272521693, 4528.790836067473, 1.7166666666666666, 31.412244897959184, 38100.523961106715);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 405, 45562.442807974454, 3860.891122038374, 1.72, 31.184489795918367, 37634.65100705092);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 410, 44973.67628010703, 4427.228695295114, 1.6966666666666668, 28.10857142857143, 37554.08679971443);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 411, 43194.518819114695, 4120.355989115487, 1.6633333333333333, 30.14204081632653, 37134.70096472476);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 415, 41524.8877688494, 3085.253963930762, 1.6666666666666667, 27.878367346938777, 36445.178748286315);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 420, 42065.13279471035, 3332.9861743780134, 1.6266666666666667, 27.53795918367347, 36341.199362025975);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 421, 43839.80970834381, 3251.5512256647435, 1.6, 30.074285714285715, 38834.91843578336);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 425, 44797.34530497699, 3311.7971238896694, 1.6, 29.035918367346937, 38834.91843578336);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 430, 45136.72427427994, 3848.155755639657, 1.6166666666666667, 29.682448979591836, 38659.498183556505);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 431, 44294.48891943528, 4059.023547031426, 1.63, 29.020408163265305, 36865.01254756665);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 435, 43300.05516948519, 3154.733378795161, 1.63, 26.74122448979592, 36865.01254756665);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 440, 42569.594434228915, 2943.420894932351, 1.63, 27.69142857142857, 36865.01254756665);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 441, 44808.76064946645, 4100.435031056553, 1.5833333333333333, 30.00734693877551, 37792.77946975933);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 445, 46054.678536570376, 4089.511505767676, 1.59, 30.69795918367347, 37177.56270942084);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 44625.477471014754, 4017.494014023994, 1.56, 27.46530612244898, 37113.586892493426);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 451, 43829.175119455045, 4632.838668063698, 1.55, 28.532244897959185, 36042.16997957045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 455, 45248.91752859189, 4716.4868752686025, 1.55, 27.218775510204082, 36042.16997957045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 460, 42720.563319011715, 4406.578996378447, 1.55, 25.356734693877552, 36042.16997957045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 461, 44764.74591584852, 3123.9592165231024, 1.4833333333333334, 27.711020408163265, 39771.1326427593);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 465, 45281.06535932936, 3207.9644066575966, 1.5033333333333334, 27.195918367346938, 38805.06115035552);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 470, 44393.726882983356, 2975.4612897811453, 1.5033333333333334, 25.125714285714285, 38805.06115035552);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 471, 43959.50508789878, 4123.244866009971, 1.53, 25.46530612244898, 37764.37511409565);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 475, 43406.820971502646, 3974.7453031390532, 1.5366666666666666, 24.539591836734694, 36987.636445745164);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 480, 42797.5805223491, 3600.9676782271385, 1.5166666666666666, 22.885714285714286, 36972.21303784862);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 481, 45929.570960498095, 3762.172503900487, 1.5033333333333334, 29.095510204081634, 39186.50262345578);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 485, 44356.622052542545, 4051.834454527671, 1.5233333333333334, 29.008163265306123, 37919.47669230895);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 490, 46919.36368229801, 4233.352089216578, 1.4866666666666666, 26.660408163265306, 37097.913003981295);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 491, 42206.442175644406, 3560.595721627224, 1.44, 23.18857142857143, 36401.10012959479);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 495, 41370.55745245177, 3175.073806866979, 1.43, 23.906938775510206, 36242.576005803385);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 41032.903424911055, 3756.5411646876014, 1.4133333333333333, 22.623673469387754, 36029.621395368915);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 45164.08672095051, 3730.452502164316, 1.4066666666666667, 21.641632653061226, 39030.10731014433);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 505, 44838.691710653344, 3281.1696262812316, 1.4166666666666667, 22.866938775510203, 38263.55367140014);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 510, 44968.92456593134, 3417.076781716899, 1.4166666666666667, 20.328163265306124, 38263.55367140014);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 511, 43772.73185060974, 4204.796715925464, 1.43, 21.30204081632653, 36556.83947318206);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 515, 42439.14978547957, 3699.3397730685983, 1.4166666666666667, 20.041632653061225, 36523.38488820794);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 520, 41768.89233368975, 3680.5159249669023, 1.4166666666666667, 18.902857142857144, 36523.38488820794);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 521, 45984.75911409075, 4324.319509884231, 1.3733333333333333, 23.071020408163264, 37304.43504631494);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 525, 47014.660555762006, 4171.131106151934, 1.3733333333333333, 21.401632653061224, 37304.43504631494);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 530, 46012.929385601085, 4225.674596275582, 1.3733333333333333, 18.70938775510204, 37176.13168799139);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 531, 42608.295084049954, 4188.435467752743, 1.3566666666666667, 21.544489795918366, 35665.2210978674);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 535, 42114.24713273302, 3806.6601770018087, 1.3566666666666667, 19.842448979591836, 35665.2210978674);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 540, 40398.75724905087, 3607.1474723581755, 1.3566666666666667, 18.731428571428573, 35665.2210978674);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 541, 44452.81948894199, 2792.2808154009654, 1.3366666666666667, 18.947755102040816, 39238.75037588748);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 545, 44767.85662720106, 3176.481603542406, 1.36, 20.33877551020408, 38491.89927990428);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 44177.87250429223, 3102.630420904576, 1.3366666666666667, 18.742857142857144, 38221.937305390384);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 551, 41996.43249914469, 4373.554227158807, 1.37, 15.94530612244898, 37613.60842528249);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 555, 42311.205245371944, 2776.541295288443, 1.37, 14.295510204081634, 36449.49776379497);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 560, 41429.45479119227, 3264.0870737831933, 1.3766666666666667, 13.305306122448979, 36410.45020176485);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 561, 47701.05312968592, 3320.0121851197337, 1.3133333333333332, 22.880816326530613, 40890.09729446526);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 565, 46593.01384713585, 4270.934335160115, 1.3433333333333333, 21.332244897959185, 37573.17806605075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 570, 45802.917025442206, 4549.95766246458, 1.34, 20.186938775510203, 37552.195534272636);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 571, 43022.176260080996, 2530.4277841138246, 1.26, 15.201632653061225, 35561.913905972935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 575, 38285.49278534843, 3430.871003177008, 1.2266666666666666, 7.866938775510204, 35508.913905972935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 580, 38091.849746602544, 3252.829773053818, 1.2266666666666666, 7.47265306122449, 35508.913905972935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 581, 45183.70261668704, 3906.4790422461224, 1.24, 12.048979591836735, 38134.1562770558);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 585, 45786.63193087805, 4738.875641279453, 1.24, 12.83265306122449, 37979.64031620144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 590, 46185.45535327756, 4191.76351907183, 1.24, 12.45795918367347, 37979.64031620144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 591, 44932.198505083186, 4147.143881893363, 1.2766666666666666, 16.484081632653062, 37063.77980179809);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 595, 42653.361167141826, 3774.607615218674, 1.3, 16.995102040816327, 36939.47793624215);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 42122.48010262897, 4368.147170197019, 1.2966666666666666, 15.12, 36804.27859593696);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 46649.5550411121, 4831.18146886511, 1.2633333333333334, 16.166530612244898, 37278.14935251798);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 605, 45371.69174469748, 5471.165814200191, 1.2633333333333334, 15.728163265306122, 37278.14935251798);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 610, 46630.82935055742, 4957.4535003567, 1.2633333333333334, 14.93142857142857, 37278.14935251798);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 611, 40396.54614386056, 3852.1356793531477, 1.2, 9.950204081632654, 35591.1243828563);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 615, 39797.46974497773, 3812.9054061298793, 1.1933333333333334, 8.946122448979592, 35526.670944124184);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 620, 39057.06080643998, 3440.1925747886276, 1.1933333333333334, 8.61795918367347, 35526.670944124184);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 621, 46549.99266875615, 4339.962035068746, 1.2033333333333334, 12.572244897959184, 38555.248643562845);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 625, 46337.278552251075, 4411.109106032025, 1.2133333333333334, 11.433469387755101, 38148.15738505566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 630, 46200.64130152628, 4047.050658119461, 1.2133333333333334, 11.322448979591837, 38148.15738505566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 631, 43600.0932077524, 3606.294348644946, 1.21, 17.163265306122447, 36743.51017617048);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 635, 43254.23424902391, 3918.663864670472, 1.21, 16.431836734693878, 36743.51017617048);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 640, 44508.90771306059, 3754.393066956746, 1.21, 14.274285714285714, 36743.51017617048);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 641, 51229.056930852465, 3452.6661233487994, 1.1833333333333333, 15.075102040816326, 37281.30631179641);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 645, 47903.62552088416, 4906.301281199618, 1.1833333333333333, 14.231020408163266, 37281.30631179641);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 46668.87307819319, 5304.305850692608, 1.1833333333333333, 12.173877551020409, 37281.30631179641);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 651, 42735.1715452374, 2903.1152965245205, 1.14, 10.953469387755103, 36045.3063341637);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 655, 42781.09050519677, 3911.045232321273, 1.14, 8.076734693877551, 36045.3063341637);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 660, 41262.44198426398, 3960.805337703598, 1.14, 6.802448979591837, 36045.3063341637);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 661, 46393.829477734456, 4455.239564760618, 1.1333333333333333, 9.710204081632654, 38864.97361755439);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 665, 46213.83689160552, 2353.6980295486715, 1.14, 11.028571428571428, 38502.21072218479);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 670, 45730.421224497826, 2111.464423298634, 1.14, 7.290612244897959, 38502.21072218479);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 671, 46077.51479418078, 3951.3096836916498, 1.1266666666666667, 14.221224489795919, 37474.62451801783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 675, 44621.95517488109, 4473.555882019257, 1.1233333333333333, 13.133877551020408, 37271.62451801783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 680, 41643.31042604859, 4174.515409594041, 1.1233333333333333, 11.481632653061224, 37271.62451801783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 681, 48077.17627484195, 4710.653208146447, 1.11, 13.328163265306122, 38085.7396048556);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 685, 46342.69195424449, 5563.943708877538, 1.1133333333333333, 13.111020408163265, 37682.53383349262);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 690, 44487.61118076724, 5401.917080650481, 1.1, 12.175510204081633, 37646.71369602284);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 691, 40300.6957324435, 3088.3102789708805, 1.0833333333333333, 8.442448979591838, 36021.51094543129);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 695, 39516.89346986046, 3421.046090458475, 1.08, 6.468571428571429, 35829.59408752022);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 39739.62438606531, 3678.0028744364054, 1.0633333333333332, 7.490612244897959, 35829.59408752022);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 46692.62234862219, 4297.8211013484015, 1.11, 9.099591836734694, 38506.718963053);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 705, 45300.19010211434, 4742.417725441469, 1.11, 7.516734693877551, 38506.718963053);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 710, 41031.57903798447, 3649.036902140151, 1.09, 4.8, 38486.05742729948);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 711, 42124.32822065764, 3427.2110776446925, 1.04, 10.893877551020408, 36792.600929822955);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 715, 41776.824275697676, 3465.8796357865203, 1.04, 9.81469387755102, 36792.600929822955);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 720, 41569.179208165064, 2984.307208068424, 1.04, 9.906122448979591, 36792.600929822955);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 721, 40201.28355393087, 2676.432007169531, 1.07, 8.902040816326531, 38007.07966234984);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 725, 44510.90511192821, 6037.416222540906, 1.07, 8.840816326530613, 38007.07966234984);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 730, 45555.6922791796, 5001.208515814822, 1.09, 9.402448979591837, 37928.21241112408);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 731, 38902.84937585492, 3134.8130001570744, 1.02, 7.307755102040816, 35933.997849205814);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 735, 37925.42337497236, 2901.7421276525633, 1.02, 5.568163265306122, 35933.997849205814);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 740, 37514.16106856593, 2715.778302659352, 1.02, 4.777959183673469, 35933.997849205814);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 741, 39644.626737617065, 2690.8217326846316, 1.0533333333333332, 4.7306122448979595, 37847.51233579404);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 745, 38915.976797389296, 1869.0687683679785, 1.0633333333333332, 4.434285714285714, 37758.62068893323);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 39050.37951780394, 2243.2849629550856, 1.0633333333333332, 3.7746938775510204, 37758.62068893323);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 751, 41850.65860324179, 3401.0742275643092, 1.01, 8.12734693877551, 37074.568988934196);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 755, 40373.192964167974, 2934.6516081404448, 1.0133333333333334, 6.751836734693877, 36791.0549195322);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 760, 41050.9805258865, 2549.0394381548563, 1.0133333333333334, 5.41469387755102, 36791.0549195322);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 761, 41825.09907843235, 5299.807492977684, 1.0433333333333332, 6.964081632653061, 37549.81772265828);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 765, 40998.762185890584, 4566.807996414355, 1.0433333333333332, 6.2391836734693875, 37549.81772265828);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 770, 41549.32961357679, 5122.930742881143, 1.0433333333333332, 5.9746938775510205, 37549.81772265828);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 771, 38302.40652427504, 3390.1948641292483, 0.9633333333333334, 6.284081632653061, 36339.36316509446);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 775, 37492.06527020925, 2109.3391338989345, 0.9633333333333334, 3.369795918367347, 36339.36316509446);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 780, 37471.630342938064, 2397.159364944688, 0.9166666666666666, 3.0448979591836736, 36324.02226101625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 781, 38543.21655534027, 1434.1079114218612, 0.9733333333333334, 2.4612244897959186, 38171.95821742687);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 785, 38781.24277026779, 1883.5505502163346, 0.98, 1.9208163265306122, 38083.06657056607);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 790, 38757.84765512794, 1928.7451046458727, 0.98, 2.406530612244898, 38083.06657056607);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 791, 40735.32252387688, 2652.084787591232, 0.92, 6.288979591836735, 37001.92061278045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 795, 38115.934007353964, 1128.64234637631, 0.92, 3.7885714285714287, 37001.92061278045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 37757.31266306993, 1088.4493875890398, 0.9033333333333333, 2.890612244897959, 37001.92061278045);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 39876.83955628271, 3450.38922618336, 0.9433333333333334, 4.551020408163265, 37584.11561102476);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 805, 39411.45112412826, 2857.591415247196, 0.95, 4.484081632653061, 37362.49021917772);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 810, 39473.17224170545, 3234.1282034536916, 0.9533333333333334, 4.805714285714286, 37133.18334813482);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 811, 38219.16313899552, 2810.5554547230436, 0.9233333333333333, 3.32, 36513.363488262825);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 815, 37690.77281128103, 1884.9847170964745, 0.9233333333333333, 2.975510204081633, 36513.363488262825);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 820, 36603.95244980679, 468.0432931064995, 0.9233333333333333, 1.3281632653061224, 36513.363488262825);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 821, 38319.24113329294, 167.50310389049213, 0.9366666666666666, 1.6571428571428573, 38164.94515614979);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 825, 38640.792632647346, 1864.1379575190492, 0.9366666666666666, 1.2555102040816326, 38164.94515614979);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 830, 38277.01422615515, 123.45620672102662, 0.9366666666666666, 0.9526530612244898, 38164.94515614979);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 831, 38237.399042885605, 969.6286453764279, 0.8833333333333333, 3.471020408163265, 37146.66267932081);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 835, 38104.880230053954, 1435.1230707645095, 0.8833333333333333, 3.085714285714286, 37146.66267932081);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 840, 37924.935769451324, 1189.076717094157, 0.8833333333333333, 2.996734693877551, 37146.66267932081);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 841, 39137.53502935252, 3627.4348910578474, 0.88, 4.129795918367347, 37038.90611376593);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 845, 38445.00413006879, 2128.764601016212, 0.8833333333333333, 4.153469387755102, 37032.020967263314);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 38090.534085486834, 908.102140406584, 0.8833333333333333, 4.1387755102040815, 37032.020967263314);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 851, 37300.279170425114, 1202.22457518785, 0.8366666666666667, 1.3812244897959183, 36761.807650498566);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 855, 37626.583874499556, 1436.868160976546, 0.8366666666666667, 1.7118367346938776, 36569.8907925875);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 860, 37338.36040471981, 1272.8674786781328, 0.8366666666666667, 1.4302040816326531, 36569.8907925875);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 861, 38365.68613858079, 757.3768398961814, 0.8166666666666667, 1.2636734693877552, 38173.98818007259);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 865, 38257.53329107157, 540.7319985537129, 0.8166666666666667, 0.31755102040816324, 38173.98818007259);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 870, 38201.06258105452, 112.49597733564596, 0.8166666666666667, 0.356734693877551, 38173.98818007259);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 871, 38758.96475397116, 1324.404901154266, 0.7833333333333333, 4.124081632653061, 37263.620410827236);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 875, 38291.67509598823, 1203.5433068620953, 0.7833333333333333, 3.645714285714286, 37263.620410827236);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 880, 38213.674108909305, 1166.0272638316421, 0.7833333333333333, 3.6653061224489796, 37263.620410827236);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 881, 38082.153452810395, 1128.34365229544, 0.8, 4.083265306122449, 36870.11348673957);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 885, 37826.49084944309, 1048.220971154161, 0.8, 4.046530612244898, 36859.14706127982);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 890, 38042.26554982542, 1010.036099697718, 0.8, 4.429387755102041, 36859.14706127982);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 891, 37753.44580621694, 1530.20463024246, 0.7666666666666667, 2.119183673469388, 36633.84852409393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 895, 37474.8469970928, 1391.040709979939, 0.7666666666666667, 1.8244897959183672, 36633.84852409393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 37140.694566244776, 1094.732594056264, 0.7533333333333333, 1.76, 36633.84852409393);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 38213.47003285954, 744.7563763832405, 0.7433333333333333, 0.9387755102040817, 38040.49092094647);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 905, 38057.87703051224, 72.81794313004653, 0.7433333333333333, 0.31755102040816324, 38040.49092094647);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 910, 38070.16168103693, 102.50582638239194, 0.7433333333333333, 0.6106122448979592, 38040.49092094647);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 911, 39870.35323442002, 820.0129847091061, 0.75, 3.3355102040816327, 38769.96835076515);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 915, 39693.45658599162, 898.8802035233133, 0.75, 3.6285714285714286, 38769.96835076515);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 920, 39686.67836059624, 839.6954749387384, 0.75, 3.6808163265306124, 38769.96835076515);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 921, 39780.1857019309, 1029.6949562730629, 0.7533333333333333, 3.8938775510204082, 38694.38018209544);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 925, 39528.54056470404, 797.9301229835856, 0.7533333333333333, 3.9004081632653063, 38694.38018209544);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 930, 39906.4372816176, 1134.269466191712, 0.7533333333333333, 4.0285714285714285, 38694.38018209544);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 931, 39508.93498740209, 1300.0751640896242, 0.7333333333333333, 2.0710204081632653, 38804.42527262573);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 935, 39530.478098255444, 1367.428862679863, 0.7333333333333333, 1.756734693877551, 38804.42527262573);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 940, 39547.16978404655, 1359.296742206137, 0.7333333333333333, 1.8057142857142856, 38804.42527262573);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 941, 40014.63832643489, 687.9474199624668, 0.7066666666666667, 0.9077551020408163, 39778.058519580256);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 945, 40445.707433356176, 1270.7841696412843, 0.7066666666666667, 1.4889795918367348, 39778.058519580256);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 41597.428194177075, 1674.7470672181291, 0.7066666666666667, 1.7779591836734694, 39778.058519580256);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 951, 39862.64031330637, 104.07025883133657, 0.7233333333333334, 0.1983673469387755, 39421.18347490932);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 955, 39421.183474909296, 2.204948129406426E-11, 0.7233333333333334, 0.0, 39421.18347490932);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 960, 39421.183474909296, 2.204948129406426E-11, 0.7233333333333334, 0.0, 39421.18347490932);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 961, 39443.20250536361, 191.5704120104964, 0.68, 1.116734693877551, 39105.72669690925);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 965, 39372.15496674164, 219.74633329636958, 0.68, 1.469387755102041, 39105.72669690925);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 970, 39345.512139758386, 223.55882174967084, 0.68, 1.5208163265306123, 39105.72669690925);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 971, 39312.34838725027, 4.409896258812852E-11, 0.6966666666666667, 0.0, 39312.34838725031);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 975, 39312.34838725027, 4.409896258812852E-11, 0.6966666666666667, 0.0, 39312.34838725031);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 980, 39312.34838725027, 4.409896258812852E-11, 0.6966666666666667, 0.0, 39312.34838725031);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 981, 39598.90403899173, 2.939930839208568E-11, 0.6966666666666667, 0.0, 39598.9040389917);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 985, 39598.90403899173, 2.939930839208568E-11, 0.6966666666666667, 0.0, 39598.9040389917);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 990, 39598.90403899173, 2.939930839208568E-11, 0.6966666666666667, 0.0, 39598.9040389917);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 991, 39365.61857444228, 5.144878968614994E-11, 0.6966666666666667, 0.0, 39365.618574442226);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 995, 39365.61857444228, 5.144878968614994E-11, 0.6966666666666667, 0.0, 39365.618574442226);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 39365.61857444228, 5.144878968614994E-11, 0.68, 0.0, 39365.618574442226);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[128, 65, 64, 25, 123, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 96, 7, 91, 129, 0, 62, 48, 5, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 126, 58, 140, 73, 20, 71, 10, 31, 108, 90, 97, 22, 44, 16, 14, 112, 92, 27, 66, 104, 141, 147, 46, 130, 50, 124, 86, 144, 56, 8, 116, 6, 19, 85, 26, 34, 149, 76, 109, 59, 61, 11, 148, 82, 54, 114, 119, 122, 42, 45, 2, 135, 13, 47, 77, 51, 95, 38, 100, 106, 29, 120, 4, 36, 12, 75, 32, 145, 102, 94, 125, 81, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 67, 80, 24, 60, 57, 107, 139, 33, 84, 111, 131, 28, 127, 70, 40, 99, 134, 72, 68, 137, 132, 88, 89, 78, 105, 17, 83, 9, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 50, 124, 86, 144, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 79, 30, 41, 121, 137, 132, 88, 96, 55, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 61, 59, 149, 85, 11, 148, 82, 54, 116, 56, 8, 6, 144, 86, 50, 124, 80, 24, 60, 57, 107, 66, 104, 141, 147, 138, 91, 129, 0, 62, 5, 48, 7, 92, 27, 76, 109, 19, 26, 34, 119, 114, 42, 127, 135, 13, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 139, 33, 122, 134, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 99, 40, 70, 68, 46, 130, 44, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 96, 18, 133, 52, 78, 105, 136, 93, 21, 69, 87, 15, 74, 7, 91, 138, 79, 30, 88, 41, 121, 137, 132, 147, 141, 104, 66, 57, 107, 60, 24, 80, 68, 39, 53, 1, 115, 49, 43, 143, 63, 113, 72, 67, 84, 134, 139, 124, 50, 86, 144, 8, 6, 116, 56, 19, 26, 85, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 13, 131, 28, 45, 127, 111, 106, 29, 120, 100, 38, 77, 51, 95, 4, 36, 94, 125, 81, 12, 75, 32, 145, 102, 146, 47, 99, 70, 40, 34, 149, 61, 59, 109, 76, 97, 22, 44, 46, 129, 0, 62, 5, 48, 89, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 92, 27, 130, 9, 83, 23, 37, 103, 110, 101, 98, 35, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 91, 74, 18, 133, 52, 78, 105, 89, 48, 5, 62, 0, 129, 121, 41, 88, 30, 79, 137, 132, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 33, 122, 42, 127, 119, 114, 34, 19, 26, 56, 8, 116, 6, 144, 86, 50, 124, 60, 24, 80, 68, 72, 49, 115, 81, 94, 125, 32, 12, 75, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 51, 77, 95, 134, 139, 84, 67, 1, 63, 39, 53, 113, 143, 43, 7, 96, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 9, 83, 136, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 79, 30, 88, 132, 137, 107, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 145, 102, 32, 75, 12, 94, 125, 81, 67, 84, 33, 54, 82, 148, 26, 85, 11, 56, 8, 116, 6, 19, 109, 76, 61, 59, 149, 34, 122, 42, 127, 119, 114, 139, 134, 86, 144, 124, 50, 66, 104, 141, 147, 41, 121, 7, 91, 129, 0, 62, 48, 5, 89, 105, 17, 136, 78, 133, 52, 15, 87, 21, 69, 93, 23, 37, 35, 98, 101, 110, 103, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 57, 74, 18, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 136, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 10, 16, 14, 31, 108, 90, 97, 22, 44, 109, 76, 61, 59, 149, 19, 26, 85, 34, 56, 8, 6, 116, 82, 54, 148, 11, 119, 114, 42, 122, 127, 135, 13, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 70, 40, 99, 33, 134, 139, 124, 50, 86, 144, 80, 24, 60, 57, 107, 66, 104, 141, 147, 41, 121, 79, 30, 88, 132, 137, 63, 39, 53, 1, 115, 146, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 67, 84, 72, 113, 143, 43, 49, 68, 92, 27, 130, 71, 83, 9, 112, 46, 74, 96, 18, 133, 52, 78, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 129, 0, 62, 48, 5, 89, 105, 17, 136, 78, 133, 52, 15, 87, 21, 69, 93, 23, 37, 103, 110, 98, 101, 35, 9, 83, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 27, 92, 130, 104, 141, 147, 66, 57, 107, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 2, 33, 54, 82, 148, 119, 114, 34, 85, 26, 149, 61, 59, 109, 76, 86, 144, 124, 50, 8, 6, 116, 56, 19, 11, 134, 139, 67, 84, 137, 132, 88, 41, 121, 79, 30, 96, 18, 74, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 96, 123, 25, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 141, 147, 66, 104, 107, 60, 50, 124, 86, 144, 8, 116, 6, 56, 11, 19, 26, 34, 85, 149, 61, 59, 109, 76, 97, 22, 44, 31, 108, 90, 46, 130, 92, 27, 57, 24, 80, 68, 39, 53, 63, 143, 43, 72, 49, 113, 115, 1, 81, 94, 125, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 47, 99, 70, 40, 13, 131, 28, 45, 42, 122, 127, 135, 2, 33, 54, 82, 148, 119, 114, 134, 139, 111, 106, 29, 120, 100, 38, 146, 84, 67, 88, 41, 121, 79, 30, 137, 132, 9, 83, 37, 23, 17, 101, 98, 35, 126, 20, 73, 58, 140, 10, 16, 14, 71, 112, 103, 110, 93, 87, 15, 21, 69, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 78, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 126, 58, 14, 16, 10, 31, 108, 90, 97, 22, 44, 76, 109, 59, 61, 149, 85, 26, 11, 56, 8, 116, 6, 144, 86, 50, 124, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 67, 84, 33, 54, 82, 148, 114, 119, 122, 42, 127, 34, 19, 139, 134, 107, 137, 132, 88, 30, 79, 121, 41, 96, 25, 123, 15, 21, 69, 93, 87, 23, 37, 35, 98, 103, 110, 101, 9, 83, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 10, 16, 14, 31, 108, 90, 97, 22, 44, 109, 76, 61, 59, 149, 19, 26, 85, 34, 56, 8, 6, 116, 54, 82, 148, 11, 119, 114, 122, 42, 127, 135, 13, 99, 70, 40, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 33, 134, 139, 124, 50, 86, 144, 57, 107, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 115, 146, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 49, 43, 67, 84, 137, 132, 147, 141, 104, 66, 27, 92, 130, 0, 129, 46, 83, 9, 71, 112, 5, 48, 62, 89, 105, 17, 78, 123, 25, 96, 79, 121, 41, 88, 30, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 126, 20, 73, 140, 58, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 61, 59, 149, 85, 26, 34, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 135, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 84, 67, 139, 134, 54, 82, 33, 148, 119, 114, 2, 11, 57, 27, 92, 130, 46, 112, 71, 9, 83, 89, 105, 78, 17, 101, 98, 103, 110, 48, 5, 62, 0, 129, 141, 147, 66, 104, 107, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 126, 20, 73, 140, 58, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 129, 0, 62, 5, 48, 89, 112, 71, 9, 83, 78, 105, 25, 123, 96, 79, 30, 88, 41, 121, 137, 132, 147, 141, 104, 66, 107, 57, 60, 50, 124, 86, 144, 8, 6, 116, 56, 19, 26, 85, 34, 149, 61, 59, 109, 76, 148, 82, 54, 33, 114, 119, 122, 42, 127, 45, 13, 47, 99, 70, 40, 135, 2, 131, 28, 111, 106, 29, 120, 100, 38, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 49, 115, 84, 67, 72, 113, 43, 143, 63, 39, 53, 1, 68, 80, 24, 139, 134, 11, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 78, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 112, 62, 5, 48, 89, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 50, 124, 86, 144, 8, 116, 56, 6, 19, 11, 54, 82, 148, 114, 119, 122, 42, 127, 135, 13, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 49, 43, 113, 143, 63, 39, 53, 1, 115, 84, 67, 80, 24, 60, 68, 72, 134, 139, 33, 2, 45, 28, 131, 47, 99, 70, 40, 26, 85, 34, 149, 61, 59, 76, 109, 107, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 61, 59, 149, 19, 11, 26, 85, 34, 56, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 127, 135, 13, 99, 70, 40, 47, 51, 77, 95, 119, 114, 122, 2, 33, 54, 82, 148, 144, 86, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 130, 0, 129, 46, 83, 9, 71, 112, 5, 48, 62, 89, 105, 78, 17, 25, 123, 96, 79, 121, 41, 88, 30, 137, 132, 147, 141, 104, 66, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 126, 20, 73, 140, 58, 16, 14, 10, 31, 108, 44, 90, 97, 22, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 116, 8, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 84, 67, 139, 134, 33, 54, 82, 148, 11, 119, 114, 2, 57, 27, 92, 130, 46, 112, 71, 9, 83, 89, 48, 5, 62, 0, 129, 141, 104, 66, 107, 137, 132, 41, 121, 79, 30, 88, 147, 96, 25, 123, 78, 105, 17, 101, 98, 103, 110, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 83, 9, 46, 130, 0, 129, 141, 147, 66, 104, 107, 57, 27, 92, 97, 22, 44, 90, 108, 31, 10, 16, 14, 76, 109, 59, 61, 149, 85, 34, 26, 19, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 127, 45, 13, 111, 28, 131, 47, 99, 70, 40, 51, 77, 95, 4, 36, 145, 102, 32, 75, 12, 125, 81, 94, 38, 100, 106, 29, 120, 84, 67, 72, 49, 115, 1, 43, 143, 63, 39, 53, 113, 68, 80, 24, 60, 50, 124, 86, 144, 8, 116, 6, 56, 139, 134, 146, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 62, 0, 129, 104, 141, 147, 66, 107, 60, 24, 80, 68, 72, 49, 43, 143, 113, 67, 84, 33, 54, 82, 148, 11, 119, 114, 122, 42, 127, 135, 13, 70, 40, 47, 99, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 63, 39, 53, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 105, 89, 48, 5, 130, 92, 27, 57, 50, 124, 86, 144, 8, 116, 6, 56, 139, 134, 26, 85, 34, 19, 149, 61, 59, 76, 109, 97, 22, 108, 31, 90, 71, 20, 73, 58, 140, 126, 14, 16, 10, 46, 44, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 76, 109, 59, 61, 149, 19, 26, 85, 34, 56, 6, 8, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 100, 38, 146, 47, 13, 99, 70, 40, 122, 42, 127, 135, 2, 45, 28, 131, 111, 120, 29, 106, 82, 54, 148, 11, 119, 114, 33, 144, 86, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 141, 147, 66, 129, 0, 62, 5, 48, 89, 105, 78, 17, 35, 112, 46, 130, 96, 79, 30, 88, 41, 121, 132, 137, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 140, 58, 126, 35, 17, 105, 78, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 10, 16, 14, 31, 76, 109, 59, 61, 149, 85, 26, 34, 19, 11, 148, 82, 54, 33, 134, 139, 124, 50, 86, 144, 80, 24, 60, 56, 6, 8, 116, 114, 119, 122, 42, 2, 45, 13, 47, 99, 70, 40, 127, 135, 28, 131, 111, 106, 120, 29, 100, 38, 77, 95, 51, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 49, 43, 113, 72, 67, 84, 68, 39, 53, 63, 143, 1, 115, 146, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 78, 89, 48, 5, 62, 0, 129, 141, 147, 66, 104, 107, 60, 50, 124, 86, 144, 8, 116, 6, 56, 11, 19, 26, 34, 149, 85, 61, 59, 109, 76, 97, 22, 44, 90, 108, 31, 10, 16, 14, 46, 130, 92, 27, 57, 80, 24, 72, 49, 115, 1, 43, 143, 63, 39, 53, 113, 68, 84, 67, 139, 134, 33, 54, 82, 148, 119, 114, 122, 42, 2, 45, 13, 47, 99, 70, 40, 135, 127, 111, 28, 131, 106, 29, 120, 100, 38, 51, 77, 95, 4, 36, 146, 145, 32, 75, 12, 102, 94, 125, 81, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 50, 124, 60, 24, 80, 68, 72, 67, 84, 106, 29, 120, 100, 38, 146, 4, 36, 145, 102, 32, 75, 12, 94, 125, 81, 49, 43, 113, 143, 63, 39, 53, 1, 115, 95, 51, 77, 99, 70, 40, 47, 13, 2, 28, 45, 33, 54, 82, 116, 6, 8, 144, 86, 56, 11, 148, 114, 119, 122, 42, 127, 135, 131, 111, 134, 139, 26, 85, 34, 19, 149, 61, 59, 76, 109, 107, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 105, 89, 48, 5, 62, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 16, 14, 10, 31, 108, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 85, 34, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 99, 70, 40, 2, 45, 28, 131, 111, 120, 29, 106, 38, 100, 36, 4, 146, 115, 49, 113, 143, 63, 39, 53, 1, 81, 125, 94, 75, 32, 12, 145, 102, 47, 77, 51, 95, 84, 67, 72, 43, 24, 80, 68, 107, 60, 124, 50, 86, 144, 139, 134, 33, 57, 27, 92, 104, 141, 147, 66, 129, 0, 62, 5, 48, 89, 105, 17, 35, 126, 46, 130, 96, 79, 30, 41, 121, 132, 137, 88, 25, 123, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 17, 105, 78, 89, 48, 5, 62, 0, 129, 141, 104, 147, 66, 107, 57, 27, 92, 130, 46, 90, 108, 44, 22, 97, 14, 16, 10, 31, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 56, 8, 116, 139, 134, 84, 67, 72, 113, 43, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 135, 127, 114, 119, 11, 54, 82, 148, 33, 13, 70, 40, 99, 47, 51, 77, 95, 80, 24, 60, 124, 50, 86, 144, 68, 39, 53, 1, 143, 63, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 78, 105, 89, 48, 5, 62, 46, 130, 0, 129, 141, 147, 104, 66, 107, 57, 27, 92, 97, 22, 44, 90, 108, 31, 10, 16, 14, 76, 109, 59, 61, 149, 85, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 45, 2, 135, 70, 40, 99, 47, 77, 51, 95, 100, 106, 111, 131, 28, 13, 134, 139, 8, 116, 6, 56, 144, 86, 50, 124, 24, 80, 68, 39, 53, 63, 143, 1, 43, 113, 72, 49, 115, 81, 94, 125, 12, 145, 32, 75, 102, 36, 4, 146, 38, 120, 29, 67, 84, 26, 34, 19, 60, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 46, 90, 108, 31, 10, 16, 14, 44, 97, 22, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 49, 43, 143, 113, 67, 84, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 122, 42, 127, 33, 54, 82, 148, 11, 119, 114, 139, 134, 100, 38, 77, 95, 51, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 63, 39, 53, 1, 107, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 141, 104, 147, 66, 57, 107, 60, 24, 80, 68, 39, 53, 1, 115, 49, 113, 143, 63, 43, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 100, 120, 29, 106, 38, 146, 84, 67, 72, 124, 50, 86, 144, 8, 6, 116, 56, 19, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 13, 99, 70, 40, 2, 45, 28, 131, 111, 47, 134, 139, 26, 85, 34, 149, 61, 59, 109, 76, 97, 22, 44, 90, 108, 31, 10, 16, 14, 130, 92, 27, 41, 121, 79, 30, 96, 123, 25, 17, 78, 46, 132, 88, 137, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 141, 104, 147, 66, 107, 57, 27, 92, 130, 46, 90, 108, 44, 22, 97, 14, 16, 10, 31, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 146, 4, 36, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 134, 139, 33, 54, 82, 148, 119, 114, 11, 84, 67, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 141, 147, 66, 104, 107, 57, 27, 92, 130, 46, 90, 97, 22, 44, 108, 31, 10, 16, 14, 76, 109, 59, 61, 149, 85, 34, 26, 19, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 28, 45, 131, 13, 47, 99, 70, 40, 135, 127, 111, 120, 29, 106, 100, 38, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 49, 43, 143, 63, 39, 53, 113, 72, 67, 84, 134, 139, 8, 116, 6, 56, 144, 86, 50, 124, 80, 24, 60, 68, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 22, 97, 90, 108, 31, 10, 16, 14, 44, 46, 109, 76, 61, 59, 149, 85, 26, 34, 19, 6, 56, 8, 116, 139, 134, 84, 67, 80, 24, 60, 124, 50, 86, 144, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 111, 131, 28, 45, 120, 29, 100, 106, 38, 77, 95, 51, 4, 36, 146, 145, 32, 12, 75, 102, 94, 125, 81, 115, 43, 143, 113, 72, 49, 68, 39, 53, 1, 63, 107, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 57, 27, 92, 130, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 85, 34, 56, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 127, 119, 114, 122, 2, 135, 13, 99, 70, 40, 47, 51, 77, 95, 33, 54, 82, 148, 144, 86, 50, 124, 60, 24, 80, 68, 107, 137, 132, 88, 30, 79, 121, 41, 96, 123, 25, 17, 78, 46, 108, 31, 16, 14, 10, 44, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 44, 22, 97, 90, 31, 10, 14, 16, 59, 109, 76, 61, 149, 19, 11, 26, 85, 34, 56, 8, 6, 116, 139, 134, 84, 67, 49, 43, 113, 72, 68, 80, 24, 60, 124, 50, 86, 144, 82, 54, 148, 119, 114, 122, 42, 2, 45, 13, 47, 99, 70, 40, 135, 127, 33, 111, 131, 28, 29, 120, 100, 106, 38, 77, 51, 95, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 143, 63, 39, 53, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 90, 97, 22, 44, 108, 31, 10, 14, 16, 59, 61, 149, 85, 26, 34, 19, 56, 8, 116, 6, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 127, 45, 28, 131, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 43, 143, 63, 39, 53, 113, 72, 49, 115, 84, 67, 139, 134, 86, 144, 50, 124, 60, 68, 80, 24, 76, 109, 106, 111, 120, 29, 100, 38, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 22, 97, 90, 108, 31, 10, 16, 14, 44, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 80, 24, 60, 50, 124, 86, 144, 56, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 113, 143, 63, 39, 53, 1, 72, 49, 68, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 46, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 90, 97, 22, 44, 31, 16, 14, 10, 59, 109, 76, 61, 149, 19, 11, 26, 85, 34, 56, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 12, 145, 102, 32, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 2, 135, 13, 99, 70, 40, 47, 77, 51, 95, 33, 54, 82, 148, 119, 114, 122, 127, 144, 86, 50, 124, 60, 24, 80, 68, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 46, 108, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 44, 22, 97, 90, 31, 10, 14, 16, 59, 61, 109, 76, 149, 19, 6, 116, 8, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 113, 43, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 135, 13, 47, 99, 70, 40, 51, 77, 95, 67, 139, 134, 84, 33, 54, 82, 148, 119, 114, 127, 34, 85, 26, 11, 1, 143, 63, 39, 53, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 16, 14, 22, 97, 90, 44, 76, 109, 59, 61, 149, 85, 26, 19, 56, 8, 6, 116, 139, 134, 33, 54, 82, 148, 11, 34, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 106, 29, 120, 100, 38, 77, 51, 95, 4, 36, 146, 145, 32, 75, 12, 102, 94, 125, 81, 1, 43, 143, 63, 39, 53, 113, 72, 49, 115, 84, 67, 80, 24, 60, 50, 124, 86, 144, 68, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 97, 22, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 113, 72, 67, 49, 68, 80, 24, 60, 50, 124, 86, 144, 8, 116, 6, 56, 139, 134, 84, 63, 39, 53, 1, 143, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 97, 90, 22, 76, 109, 59, 61, 85, 34, 149, 19, 11, 26, 148, 82, 54, 116, 8, 6, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 113, 143, 1, 115, 49, 43, 81, 125, 94, 75, 12, 145, 102, 32, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 77, 51, 95, 13, 122, 114, 119, 33, 134, 139, 67, 84, 63, 39, 53, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 85, 26, 34, 149, 19, 6, 56, 8, 116, 139, 134, 84, 67, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 12, 145, 102, 32, 36, 4, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 2, 70, 40, 99, 47, 13, 135, 127, 122, 114, 119, 82, 54, 148, 33, 11, 144, 86, 50, 124, 60, 24, 80, 68, 72, 146, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 45, 13, 47, 99, 70, 40, 135, 2, 28, 111, 131, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 43, 113, 143, 63, 39, 53, 68, 80, 24, 60, 50, 124, 86, 144, 8, 116, 6, 56, 139, 134, 84, 67, 72, 49, 115, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 49, 113, 43, 143, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 82, 54, 148, 11, 26, 85, 34, 149, 33, 139, 134, 84, 67, 146, 63, 39, 53, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 85, 34, 149, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 146, 12, 75, 32, 145, 102, 4, 36, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 13, 122, 114, 119, 33, 54, 82, 148, 11, 26, 86, 144, 50, 124, 60, 24, 80, 68, 49, 43, 81, 125, 94, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 56, 8, 116, 139, 134, 84, 67, 72, 113, 43, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 51, 77, 95, 13, 135, 127, 114, 119, 33, 54, 82, 148, 11, 144, 86, 50, 124, 60, 24, 80, 68, 39, 63, 143, 1, 53, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 56, 8, 116, 6, 11, 148, 82, 54, 33, 114, 119, 122, 2, 135, 127, 45, 42, 13, 47, 99, 70, 40, 131, 28, 111, 106, 100, 29, 120, 38, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 43, 143, 63, 39, 53, 113, 72, 49, 115, 84, 67, 80, 24, 60, 50, 124, 86, 144, 139, 134, 68, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 11, 148, 82, 54, 33, 139, 134, 84, 67, 80, 24, 60, 50, 124, 86, 144, 8, 6, 56, 116, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 49, 113, 72, 143, 1, 53, 39, 63, 68, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 11, 148, 82, 54, 33, 134, 139, 144, 86, 50, 124, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 43, 49, 115, 146, 12, 75, 32, 145, 102, 4, 36, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 13, 122, 114, 119, 116, 6, 8, 56, 67, 84, 81, 125, 94, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 49, 115, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 33, 54, 82, 148, 11, 116, 139, 134, 84, 67, 63, 39, 53, 1, 143, 113, 43, 81, 125, 94, 75, 12, 145, 102, 32, 36, 4, 77, 51, 95, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 60, 80, 24, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 68, 39, 53, 113, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 2, 135, 127, 114, 119, 33, 82, 54, 148, 11, 40, 70, 99, 47, 13, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 49, 113, 68, 80, 24, 60, 124, 50, 86, 144, 139, 134, 84, 67, 72, 143, 63, 39, 53, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 51, 77, 95, 13, 122, 114, 119, 33, 82, 54, 148, 11, 56, 144, 86, 50, 124, 60, 24, 80, 68, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 145, 102, 32, 12, 75, 94, 125, 81, 36, 4, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 33, 54, 82, 148, 11, 56, 86, 144, 124, 50, 60, 24, 80, 68, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 53, 39, 113, 68, 80, 24, 60, 50, 124, 86, 144, 56, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 106, 100, 29, 120, 38, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 68, 80, 24, 60, 124, 50, 86, 144, 56, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 43, 143, 63, 39, 53, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 1, 115, 146, 12, 75, 32, 145, 102, 4, 36, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 13, 122, 114, 119, 33, 82, 54, 148, 11, 56, 144, 86, 50, 124, 60, 24, 80, 68, 39, 63, 53, 43, 81, 125, 94, 137, 132, 41, 121, 79, 30, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 1, 43, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 33, 54, 82, 148, 11, 56, 144, 86, 50, 124, 60, 24, 80, 68, 115, 146, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 43, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38, 100, 29, 120, 106, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 33, 82, 54, 148, 11, 124, 50, 60, 24, 80, 68, 144, 86, 56, 79, 30, 88, 41, 121, 132, 137, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 50, 124, 86, 144, 56, 11, 148, 54, 82, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 86, 144, 56, 33, 82, 54, 148, 11, 114, 119, 122, 42, 127, 135, 13, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 70, 40, 99, 4, 36, 146, 12, 145, 102, 32, 75, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 86, 144, 56, 11, 54, 82, 33, 111, 131, 28, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 148, 120, 29, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 86, 144, 56, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 45, 131, 13, 47, 99, 70, 40, 135, 2, 28, 111, 106, 29, 120, 100, 38, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 86, 144, 56, 11, 148, 54, 82, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 33, 82, 54, 148, 11, 114, 119, 122, 42, 127, 135, 13, 47, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 70, 40, 99, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 148, 33, 45, 42, 122, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 28, 131, 111, 106, 29, 120, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 114, 119, 122, 42, 127, 45, 131, 13, 47, 99, 70, 40, 135, 2, 28, 111, 106, 100, 29, 120, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 114, 119, 122, 42, 127, 135, 13, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 70, 40, 99, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 42, 122, 2, 45, 131, 111, 28, 13, 135, 127, 99, 70, 40, 47, 51, 77, 95, 38, 100, 120, 29, 106, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 2, 28, 45, 131, 13, 47, 99, 70, 40, 135, 127, 111, 106, 100, 29, 120, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 70, 40, 99, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 28, 45, 131, 111, 106, 38, 100, 29, 120, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 131, 111, 28, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 120, 29, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 30, 79, 88, 121, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 123, 25, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 145, 102, 32, 75, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 78, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 30, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 1, 43, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 121, 41, 79, 30, 96, 78, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 30, 79, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 121, 41, 30, 79, 88, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 79, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 88, 41, 121, 30, 79, 96, 78, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 30, 79, 88, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 123, 25, 17, 78, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 78, 17, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[128, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 9, 112, 71, 73, 20, 140, 58, 126, 35, 105, 89, 48, 5, 62, 0, 129, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 108, 31, 10, 14, 16, 44, 22, 97, 90, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 139, 134, 84, 67, 72, 49, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 144, 86, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 43, 1, 137, 132, 41, 121, 79, 88, 30, 96, 25, 123, 78, 17, 128]");
    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_100_mag_0_5_kroA150() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 100, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(37479.07242335973);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 47612.67939543519, 2940.9855025489237, 0.0, 84.57142857142857, 42683.170205531416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 41096.61883121263, 4134.002017051523, 0.5, 13.822040816326531, 36802.43005988386);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 41707.53337246941, 3908.8289965678337, 0.5, 11.822857142857142, 36713.383717079625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 41375.13400616872, 4303.200089328059, 0.5, 12.195102040816327, 36713.383717079625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 39916.90722143247, 4048.4969834372714, 0.55, 8.179591836734694, 36206.63773629385);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 40224.15436500172, 4048.1900822808043, 0.5, 8.084897959183673, 36206.63773629385);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 47264.329364504454, 2316.825437191732, 0.47333333333333333, 27.373877551020406, 40949.48759625482);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 42168.58128199508, 3258.940752763826, 0.89, 16.506938775510203, 37019.83742640684);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 41168.36258634436, 3729.43563296952, 0.82, 11.902040816326531, 36775.69105483989);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 47965.64896203101, 4041.6026308307537, 0.7466666666666667, 27.853061224489796, 41977.205687093956);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 42326.413555525745, 3048.4394399089597, 1.0666666666666667, 25.26448979591837, 37610.74950199514);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 42786.955581754744, 2907.6098740312027, 1.0333333333333334, 16.997551020408164, 36730.6595428444);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 48905.54999738349, 4269.7547727123965, 0.9666666666666667, 36.1665306122449, 42168.16753495063);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 45232.993126853005, 2564.3376036624372, 1.2266666666666666, 23.06530612244898, 38259.83965164126);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 43514.72516443722, 2806.8288582524, 1.1266666666666667, 11.885714285714286, 37775.49778664243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 44936.24695255259, 2715.633431625713, 1.05, 19.631836734693877, 39739.415880336725);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 44780.33941062068, 4220.142587367909, 1.1033333333333333, 13.76, 38453.98793524861);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 43158.61581186597, 4020.413047696466, 0.9366666666666666, 12.315918367346939, 38136.9046719582);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 42438.42775078128, 2908.2048436015534, 0.9366666666666666, 14.24326530612245, 38781.9689974582);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 39861.544282876435, 3043.13647104648, 0.9266666666666666, 9.264489795918367, 36313.92432352239);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 40312.77751334084, 4342.4701039136835, 0.8866666666666667, 4.997551020408164, 35944.66307495801);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 41183.604420855816, 2227.798562625703, 0.8733333333333333, 9.846530612244898, 38073.12426766568);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 38331.66490292423, 3032.4546735167646, 0.82, 4.284897959183674, 36692.94682413069);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 37538.82822509399, 1895.309666881968, 0.7, 3.462040816326531, 36692.94682413069);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 43429.43152291647, 1145.3651122054785, 0.68, 2.853877551020408, 40416.19945590074);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 40480.28252943528, 2929.0454573268844, 0.7166666666666667, 6.841632653061224, 37509.516014755456);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 38103.345828995014, 1526.2194639402849, 0.7133333333333334, 1.8212244897959184, 37509.516014755456);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 38153.346639866904, 364.2036488691897, 0.6866666666666666, 0.42857142857142855, 37479.07242335973);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 37479.07242335978, 5.144878968614994E-11, 0.6866666666666666, 0.0, 37479.07242335973);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 37479.07242335978, 5.144878968614994E-11, 0.6533333333333333, 0.0, 37479.07242335973);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[128, 65, 64, 25, 123, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 96, 7, 91, 129, 0, 62, 48, 5, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 126, 58, 140, 73, 20, 71, 10, 31, 108, 90, 97, 22, 44, 16, 14, 112, 92, 27, 66, 104, 141, 147, 46, 130, 50, 124, 86, 144, 56, 8, 116, 6, 19, 85, 26, 34, 149, 76, 109, 59, 61, 11, 148, 82, 54, 114, 119, 122, 42, 45, 2, 135, 13, 47, 77, 51, 95, 38, 100, 106, 29, 120, 4, 36, 12, 75, 32, 145, 102, 94, 125, 81, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 67, 80, 24, 60, 57, 107, 139, 33, 84, 111, 131, 28, 127, 70, 40, 99, 134, 72, 68, 137, 132, 88, 89, 78, 105, 17, 83, 9, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 50, 124, 86, 144, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 50, 124, 86, 144, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 124, 50, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 124, 50, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 6, 8, 116, 56, 86, 144, 11, 148, 19, 85, 26, 34, 149, 61, 59, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 44, 46, 130, 92, 27, 66, 104, 141, 147, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 82, 54, 148, 26, 34, 149, 61, 59, 85, 11, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 57, 107, 137, 132, 147, 141, 104, 66, 27, 92, 46, 130, 44, 34, 85, 11, 26, 148, 82, 54, 134, 139, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 80, 24, 68, 49, 67, 72, 113, 143, 1, 115, 84, 43, 63, 39, 53, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 113, 143, 1, 115, 49, 43, 63, 39, 53, 137, 132, 147, 141, 104, 66, 27, 92, 46, 130, 112, 44, 57, 107, 68, 24, 80, 60, 124, 50, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 68, 24, 80, 50, 124, 60, 57, 107, 27, 92, 46, 130, 112, 108, 104, 66, 147, 141, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 68, 24, 80, 60, 124, 50, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 50, 124, 60, 24, 80, 68, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 19, 11, 26, 34, 85, 82, 54, 148, 33, 114, 119, 122, 42, 127, 135, 13, 28, 45, 2, 70, 40, 99, 47, 51, 77, 95, 100, 106, 29, 120, 111, 131, 38, 146, 4, 36, 102, 32, 145, 75, 12, 94, 125, 81, 43, 113, 143, 63, 39, 53, 1, 115, 49, 72, 68, 24, 80, 60, 124, 50, 86, 144, 6, 8, 116, 56, 134, 84, 67, 139, 57, 107, 27, 92, 46, 108, 130, 112, 141, 104, 66, 147, 132, 88, 137, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 59, 61, 19, 149, 85, 26, 34, 56, 6, 8, 116, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 95, 77, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 66, 107, 57, 139, 134, 84, 67, 33, 54, 82, 148, 114, 119, 11, 44, 46, 112, 27, 92, 130, 147, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 76, 109, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 95, 77, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 66, 107, 57, 139, 134, 84, 67, 33, 54, 82, 148, 114, 119, 11, 44, 90, 46, 112, 27, 92, 130, 147, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 33, 54, 82, 148, 114, 119, 11, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 134, 84, 67, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 66, 107, 57, 139, 68, 147, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 67, 139, 134, 84, 33, 54, 82, 148, 114, 119, 11, 116, 6, 8, 57, 107, 66, 104, 141, 147, 88, 137, 132, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 56, 6, 8, 116, 54, 82, 148, 33, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 38, 100, 106, 29, 120, 111, 131, 28, 114, 119, 11, 144, 86, 50, 124, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 84, 67, 139, 134, 57, 107, 66, 141, 104, 147, 88, 137, 132, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 33, 54, 82, 148, 114, 119, 11, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 134, 84, 67, 139, 68, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 147, 66, 107, 57, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 33, 54, 82, 148, 114, 119, 11, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 134, 84, 67, 139, 68, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 147, 66, 107, 57, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 27, 92, 130, 76, 109, 59, 61, 19, 149, 85, 26, 34, 33, 54, 82, 148, 114, 119, 11, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 134, 84, 67, 139, 68, 72, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 147, 66, 107, 57, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 19, 149, 85, 26, 34, 56, 6, 8, 116, 54, 82, 148, 33, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 114, 119, 11, 144, 86, 50, 124, 60, 24, 80, 134, 84, 67, 139, 68, 72, 113, 43, 49, 115, 146, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 143, 63, 39, 53, 137, 132, 88, 141, 104, 147, 66, 107, 57, 130, 27, 92, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 113, 43, 49, 115, 1, 143, 63, 39, 53, 137, 132, 88, 92, 27, 130, 66, 104, 147, 141, 107, 57, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 13, 33, 54, 82, 148, 114, 119, 11, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 60, 80, 24, 68, 72, 49, 115, 1, 113, 143, 63, 39, 53, 43, 67, 84, 38, 100, 106, 111, 131, 28, 45, 2, 42, 122, 127, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 120, 29, 13, 33, 54, 82, 148, 114, 119, 11, 134, 139, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 24, 80, 68, 72, 49, 115, 1, 53, 39, 63, 143, 113, 43, 67, 84, 38, 100, 106, 111, 131, 28, 45, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 120, 29, 13, 2, 42, 122, 127, 114, 119, 11, 134, 139, 33, 54, 82, 148, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 24, 80, 60, 68, 72, 49, 115, 1, 53, 39, 63, 143, 113, 43, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 134, 139, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 114, 119, 122, 42, 127, 135, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 63, 143, 113, 43, 49, 115, 72, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 13, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 68, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 114, 119, 122, 42, 127, 135, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 43, 49, 115, 63, 143, 53, 39, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 13, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 114, 119, 122, 42, 127, 135, 2, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 43, 49, 115, 63, 143, 53, 39, 68, 72, 67, 84, 38, 100, 120, 29, 106, 111, 131, 28, 45, 13, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 143, 63, 39, 53, 43, 49, 115, 72, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 68, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 43, 49, 115, 63, 39, 53, 143, 72, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 68, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 43, 49, 115, 63, 143, 53, 39, 68, 72, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 134, 139, 56, 6, 8, 116, 86, 144, 50, 124, 24, 80, 60, 57, 107, 66, 104, 147, 141, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 115, 43, 113, 143, 63, 39, 53, 1, 81, 125, 94, 75, 32, 145, 102, 12, 67, 84, 139, 134, 60, 57, 107, 66, 104, 141, 147, 132, 88, 137, 27, 92, 130, 112, 46, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 125, 81, 12, 75, 32, 145, 102, 94, 67, 84, 139, 134, 60, 57, 27, 92, 130, 112, 46, 104, 141, 147, 66, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 120, 29, 106, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 125, 81, 12, 75, 32, 145, 102, 94, 146, 4, 36, 51, 77, 95, 38, 100, 84, 67, 139, 134, 60, 57, 27, 92, 130, 112, 46, 104, 141, 147, 66, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 67, 84, 139, 134, 60, 57, 27, 92, 130, 66, 104, 141, 147, 132, 88, 137, 107, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 67, 84, 139, 134, 60, 57, 27, 92, 130, 66, 104, 141, 147, 132, 88, 137, 107, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 113, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 67, 84, 139, 134, 60, 57, 27, 92, 130, 66, 104, 141, 147, 132, 88, 137, 107, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 84, 67, 139, 134, 60, 57, 27, 92, 130, 112, 46, 104, 141, 147, 66, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 67, 84, 139, 134, 60, 57, 107, 27, 92, 130, 112, 46, 104, 141, 147, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 84, 67, 139, 134, 60, 57, 107, 27, 92, 130, 112, 46, 104, 141, 147, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 84, 67, 139, 134, 60, 57, 107, 27, 92, 130, 112, 46, 104, 141, 147, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 49, 113, 143, 63, 39, 53, 1, 115, 43, 67, 84, 134, 139, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 132, 88, 137, 107, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 67, 84, 134, 139, 57, 107, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 67, 84, 134, 139, 57, 107, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 67, 84, 134, 139, 57, 107, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 49, 113, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 68, 72, 67, 84, 134, 139, 57, 107, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 134, 139, 84, 67, 72, 113, 68, 107, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 139, 134, 84, 67, 72, 68, 107, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 139, 134, 84, 67, 72, 68, 107, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 139, 134, 84, 67, 72, 68, 107, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 139, 134, 84, 67, 72, 68, 107, 57, 27, 92, 130, 112, 46, 66, 104, 141, 147, 137, 132, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 112, 46, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 24, 80, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 123, 25, 132, 88, 137, 147, 141, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 66, 107, 57, 27, 92, 130, 112, 46, 141, 147, 132, 88, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 66, 107, 57, 27, 92, 130, 112, 46, 141, 147, 132, 88, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 139, 134, 84, 67, 72, 68, 104, 66, 107, 57, 27, 92, 130, 112, 46, 141, 147, 132, 88, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 104, 66, 92, 27, 130, 112, 46, 141, 147, 132, 88, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 137, 132, 88, 92, 27, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[128, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 17, 105, 89, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 149, 85, 26, 34, 19, 11, 148, 54, 82, 33, 13, 2, 135, 70, 40, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 1, 53, 39, 63, 143, 43, 113, 49, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 114, 119, 116, 6, 8, 56, 144, 86, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 57, 107, 141, 147, 66, 104, 27, 92, 130, 46, 112, 96, 88, 137, 132, 123, 25, 128]");
    }

}