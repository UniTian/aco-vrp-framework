package com.github.schmittjoaopedro.tsp;

import com.github.schmittjoaopedro.tsp.algorithms.MMAS_MEM_MADTSP;
import com.github.schmittjoaopedro.tsp.graph.Graph;
import com.github.schmittjoaopedro.tsp.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_MADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/kroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 10);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(23957.495350387428);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(23957.495350387428);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 31671.967452268564, 1903.8917677261363, 0.0, 54.80326530612245, 28431.703154969287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 27066.8381214856, 2219.5948450856677, 0.645, 6.95265306122449, 25339.235951835213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 25351.425358005286, 1205.9559534231994, 0.55, 3.9044897959183675, 24768.610654370816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 30092.952164373062, 2062.447262534598, 0.525, 10.01061224489796, 25074.32111345612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 28501.907251918055, 3564.0140595840435, 0.525, 7.377959183673469, 25074.32111345612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 27903.45866598447, 2193.9679442392985, 0.715, 14.316734693877551, 24818.259595704672);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 29924.30734059233, 2184.799533874341, 0.665, 17.724897959183675, 25996.73490895986);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 28174.883710853046, 2125.2959729796303, 0.73, 14.417959183673469, 24727.018546220337);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 27653.104795411917, 2331.9454637868544, 0.725, 12.362448979591838, 24619.018546220337);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 27940.376753492597, 2577.7548001362666, 0.74, 12.779591836734694, 25154.2435867011);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 27242.758994822143, 2509.7105474901828, 0.75, 10.655510204081633, 25145.966364772015);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 27008.558330214928, 2287.7758043444437, 0.745, 10.541224489795919, 24944.59180829137);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 26585.717886200528, 1814.1203811703233, 0.78, 16.55265306122449, 24088.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 26130.652037343956, 1670.6433755493156, 0.865, 14.789387755102041, 23835.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 26124.52243054744, 2011.1684314195527, 0.855, 13.901224489795919, 23821.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 26502.769048483115, 1740.1067539145902, 0.83, 15.223673469387755, 24506.867974054672);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 26876.484522554212, 1881.578982654382, 0.87, 14.729795918367348, 24284.728065024545);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 25231.0305115747, 1664.5431199119041, 0.88, 11.431836734693878, 23782.728065024545);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 29706.946086546002, 1184.1123051697389, 0.88, 14.52734693877551, 26681.896655440898);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 29383.49628955395, 1241.0008101087915, 0.865, 13.372244897959183, 24736.188891344173);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 29377.85776432367, 1701.8641814329808, 0.865, 16.495510204081633, 24736.188891344173);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 26478.52350175056, 2154.8895938322344, 0.94, 14.288163265306123, 24131.144610256793);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 25606.527480268065, 1753.3620193877493, 0.965, 12.084897959183673, 23850.71480328033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 25955.337153206547, 1754.0634413834428, 0.965, 13.183673469387756, 23850.71480328033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 28748.546301630704, 2756.8391629317257, 0.97, 17.493061224489797, 24077.69412145566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 28437.51143786125, 2174.8949510035422, 0.97, 16.72, 24077.69412145566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 28560.537415026938, 2339.1872993777256, 1.06, 15.64734693877551, 23988.69412145566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 29213.627678476023, 2621.419199513351, 1.045, 16.110204081632652, 24744.8034344363);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 29374.863253403542, 1969.0529308987461, 1.055, 16.68326530612245, 24733.44708503313);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 28535.927359147245, 2283.8475068469384, 1.06, 16.50938775510204, 24709.410324909466);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 31075.21234273328, 4648.154964449929, 1.06, 14.285714285714286, 24306.089853024656);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 29728.80428713477, 4725.4050818303895, 1.085, 13.995918367346938, 23850.4125043175);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 31236.458353700462, 4911.710267622283, 1.12, 12.783673469387756, 23533.188974437617);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 26862.602168974965, 2555.5443152980765, 1.12, 16.140408163265306, 23392.14457226766);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 26363.911911503394, 2468.603970194632, 1.115, 14.982040816326531, 23274.55386996063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 26339.31041866593, 2565.572936236191, 1.115, 14.508571428571429, 23274.55386996063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 27145.378747444673, 1052.9766239596017, 1.115, 13.728163265306122, 24887.194038099555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 27503.357992811743, 2196.7062438282383, 1.095, 13.475918367346939, 24545.911604688252);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 27032.59472114375, 1633.4692723599414, 1.095, 14.597551020408163, 24542.911604688252);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 29995.35097923032, 1898.1576931655964, 1.16, 23.3265306122449, 26204.09341551547);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 28376.51802968832, 2031.1526916852085, 1.245, 16.216326530612246, 25254.29597250112);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 27648.15759120785, 1800.7888210127066, 1.29, 14.09061224489796, 24724.107908292357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 27724.39437502475, 2133.3589307442744, 1.275, 21.01061224489796, 24166.121945224957);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 27946.911285422724, 1673.621969030945, 1.265, 19.688163265306123, 23679.69576218909);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 28190.2024715081, 2470.2579681007346, 1.265, 18.00408163265306, 23335.720624653404);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 27141.94165302766, 2176.3591548818363, 1.265, 17.06204081632653, 23219.85816488161);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 27771.15364325439, 1919.1259752820815, 1.265, 18.68, 23219.85816488161);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 27323.025236518966, 1978.917121570862, 1.24, 17.573061224489795, 23107.85816488161);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 28859.897435070143, 937.0093012443358, 1.24, 22.03183673469388, 24967.989671334195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 28102.281124984715, 1628.149498231667, 1.285, 24.18857142857143, 24621.9370684732);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 27775.769461382784, 1768.8900780084095, 1.28, 20.667755102040815, 24215.257653419238);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 27305.228021455194, 2090.5587641663324, 1.205, 19.608979591836736, 23446.840015683632);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 26427.835258914212, 2379.535560136755, 1.215, 12.812244897959184, 23385.128378114234);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 25760.250522125167, 2082.877073743001, 1.215, 14.616326530612245, 23339.128378114234);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 27510.443778920384, 1467.3125419024825, 1.24, 18.464489795918368, 23408.961722031512);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 27222.699056247377, 2167.3337025064775, 1.24, 16.05142857142857, 23408.961722031512);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 26506.173766030748, 2190.009855385769, 1.23, 14.507755102040816, 23163.065257783845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 26441.199928916812, 2322.3002141616917, 1.26, 16.84408163265306, 23291.890111894914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 25917.675688790958, 2375.3087387828596, 1.255, 17.754285714285714, 23047.74864660722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 25844.12030780685, 2044.2073739342286, 1.23, 16.7665306122449, 23047.74864660722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 26679.785929189366, 1926.8537772947466, 1.205, 19.915102040816326, 23435.620547687835);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 26746.220650154577, 2049.9394303917334, 1.2, 18.53795918367347, 23429.1120286543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 26356.264388800904, 2117.9338901153487, 1.205, 18.005714285714287, 23297.620547687835);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 25997.202817166875, 2421.3949520560423, 1.225, 16.042448979591835, 23249.79464644342);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 26250.73623636363, 2513.761147602423, 1.22, 15.93469387755102, 23157.19500746594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 26099.0968702252, 2189.4798816900284, 1.23, 16.78612244897959, 23130.19500746594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 25825.256964540455, 2091.3261239280205, 1.21, 15.813061224489797, 23178.742775631614);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 26023.655558264138, 1886.154846687406, 1.215, 18.728979591836733, 22823.303564035647);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 25531.59928358141, 2262.657670653699, 1.19, 15.493061224489797, 22656.303564035647);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 25069.097837020177, 1869.515519047388, 1.19, 16.128979591836735, 22689.386078567368);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 24915.5224006281, 2000.8327565057616, 1.19, 17.168979591836734, 22689.386078567368);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 24123.948085510918, 1762.0813274377492, 1.18, 15.227755102040817, 22683.87542269245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 26920.952115232853, 2137.900797038698, 1.18, 18.771428571428572, 24018.143875238173);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 26327.627395253225, 1853.6614060562695, 1.19, 19.981224489795917, 23579.456683039843);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 26621.62014801752, 1907.828583130877, 1.21, 18.473469387755102, 23530.290914821846);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 27407.810091329284, 2236.6513923943803, 1.2, 18.22122448979592, 23940.87609887581);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 26644.528800667034, 1978.7081896987672, 1.21, 17.59265306122449, 23923.23798607676);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 27171.78075560367, 2419.4304451040125, 1.21, 18.663673469387756, 23923.23798607676);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 25330.810252455183, 1785.06197699889, 1.225, 14.957551020408163, 23297.41238718871);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 25062.749686938245, 1613.2154771955522, 1.22, 13.416326530612245, 23179.604084695424);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 25037.543761143344, 1553.9830563641008, 1.21, 13.677551020408163, 23148.409611165705);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 25073.396967591467, 1374.826660211018, 1.185, 17.245714285714286, 23105.484563565733);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 24367.211328889895, 1459.7548183236445, 1.195, 15.427755102040816, 22733.484563565733);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 24060.32967896936, 1184.9532451541113, 1.195, 14.76, 22733.484563565733);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 25514.54065077142, 2062.6941495002307, 1.175, 12.659591836734695, 23178.438115161105);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 25832.71920435209, 2089.0252144261212, 1.155, 14.826122448979591, 22777.796195470855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 25831.55059001762, 2505.8031939132165, 1.155, 15.307755102040817, 22777.796195470855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 25987.653174518393, 2139.935162584794, 1.16, 17.02122448979592, 23364.862083054406);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 26166.740748147087, 2560.194406210393, 1.17, 15.605714285714285, 23153.862083054406);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 26452.271653824017, 2508.1425378195995, 1.18, 16.31265306122449, 22983.37925572821);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 27644.968332872715, 4114.364178581959, 1.185, 17.579591836734693, 22989.204943606543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 26835.8530741027, 3321.009408958694, 1.185, 17.262857142857143, 22989.204943606543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 30025.56494799962, 5006.897165173457, 1.185, 17.16734693877551, 22989.204943606543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 28251.688441097675, 1912.855990952106, 1.175, 18.663673469387756, 23735.47321087534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 27215.112405075593, 2512.326658147758, 1.175, 17.886530612244897, 23735.47321087534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 26839.596349210955, 2003.7907843652363, 1.21, 18.875918367346937, 23459.758648219446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 28215.464915200806, 2120.425287467218, 1.235, 21.21387755102041, 23521.449335675476);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 26998.463330560135, 1869.7011237713957, 1.25, 19.084897959183674, 22944.878303685226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 26858.294081361444, 1900.9740202775254, 1.24, 19.13714285714286, 22622.169147870667);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 25746.340651776496, 1826.8591420708724, 1.24, 18.395102040816326, 23162.343636858834);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 25840.054200992963, 1827.5834699263019, 1.245, 19.024489795918367, 23039.8273898203);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 25574.31137429745, 2001.1664402060094, 1.25, 18.557551020408162, 22706.8273898203);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 26898.06821960451, 1988.917713723911, 1.21, 19.26938775510204, 24143.368346212796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 27354.361290483157, 2115.594358914807, 1.21, 20.31918367346939, 24143.368346212796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 27246.06803949141, 1899.8631894587543, 1.22, 19.765714285714285, 23850.096295279156);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 26440.354905185242, 1500.0521333931495, 1.23, 18.777142857142856, 23679.687099810075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 26770.445871005777, 1711.9125943945098, 1.235, 18.244897959183675, 23322.56097696133);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 26593.168113499778, 1769.8038360093763, 1.23, 17.17469387755102, 23158.969987060667);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 26492.869655127874, 1817.0366225220566, 1.225, 19.420408163265307, 23352.223608514698);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 25772.04328248317, 1796.4278321063402, 1.225, 18.770612244897958, 23037.223608514698);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 25435.28992925012, 1718.8455942429712, 1.23, 17.69795918367347, 22815.674360521032);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 25913.144402937818, 1994.5976395849966, 1.16, 15.366530612244897, 23587.32082584791);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 25725.489500114458, 1336.63765498223, 1.16, 14.773877551020409, 23355.6026486453);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 25145.822867189938, 1512.1008698841738, 1.16, 15.715102040816326, 23355.6026486453);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 25270.00131453284, 1344.2013133085416, 1.16, 18.337142857142858, 23206.324979636836);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 25438.253470965257, 1732.56568397936, 1.155, 16.332244897959185, 23119.981835082537);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 24722.692410161515, 1524.2040979594317, 1.17, 14.889795918367346, 23033.271768734154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 25322.80289351449, 1690.258885755062, 1.17, 16.10448979591837, 23049.45252790633);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 24972.484151642988, 1338.3075286251283, 1.18, 17.073469387755104, 22906.117332057056);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 25359.479154823017, 1552.347110405902, 1.18, 16.953469387755103, 22906.117332057056);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 24996.551374051614, 1609.2098263937094, 1.185, 16.17469387755102, 22825.15511696888);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 24925.146603268244, 1566.6331639841035, 1.185, 16.44734693877551, 22628.667332570498);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 24794.810386237303, 1546.2652217742734, 1.185, 15.187755102040816, 22628.667332570498);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 25135.197362717357, 1830.4415174657922, 1.15, 12.725714285714286, 22788.49858793871);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 24161.328326727817, 1447.128324989359, 1.15, 10.731428571428571, 22788.49858793871);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 24446.598108818154, 1912.0138008527497, 1.135, 11.324897959183673, 22763.49858793871);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 25973.232319837574, 1868.0786273642834, 1.135, 17.27591836734694, 23445.44543661941);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 26095.200992539896, 1958.9498071876023, 1.135, 17.340408163265305, 23091.146895534665);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 25660.761704604723, 2013.2664964187552, 1.13, 16.793469387755103, 23041.146895534665);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 26424.2203884626, 1664.2286575213284, 1.15, 16.190204081632654, 24036.488525118475);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 25403.43188451508, 1508.9609970896383, 1.18, 15.744489795918367, 23577.488525118475);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 24913.721177575193, 1304.3196566344293, 1.18, 15.217142857142857, 23501.488525118475);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 24280.036146109127, 1310.0009631809892, 1.18, 13.466938775510204, 22626.964732982873);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 24051.375761264775, 1346.089223496597, 1.165, 13.540408163265306, 22547.456926912935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 23882.705470605717, 1315.708168961668, 1.165, 12.612244897959183, 22547.456926912935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 24218.88040816212, 1343.8211256128104, 1.14, 13.795918367346939, 22292.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 23804.731025442354, 1264.1442069861348, 1.14, 11.964897959183673, 22292.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 23737.191736198463, 1092.1054636690155, 1.14, 11.506938775510203, 22292.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 24703.222647830367, 1099.6849016307208, 1.14, 16.47591836734694, 22926.744289832823);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 24587.337365472707, 991.7514879467476, 1.095, 14.64734693877551, 22780.22418622397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 24388.121134990874, 837.6680112309878, 1.095, 14.553469387755102, 22780.22418622397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 23725.05332520842, 762.1192951082369, 1.07, 10.759183673469387, 22805.191624196726);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 23756.375018031675, 496.4260248455555, 1.08, 11.799183673469388, 22555.134223623318);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 23628.70898377618, 463.9566744183655, 1.08, 11.037551020408163, 22546.35807580747);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 23805.416456867577, 903.2568729017386, 1.085, 13.03591836734694, 23020.60646829253);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 23622.096640198863, 596.448698717531, 1.09, 12.97795918367347, 22841.16763612646);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 23796.546315070205, 659.2260067631589, 1.115, 12.98857142857143, 22809.928330001283);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 24345.772709181827, 962.5985968127709, 1.115, 13.916734693877551, 22902.662081967133);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 24242.602938194457, 1035.4454789615618, 1.115, 14.286530612244897, 22902.662081967133);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 23647.948167082843, 733.2417490694293, 1.125, 12.566530612244899, 22765.662081967133);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 24458.517232197748, 1105.1842530717863, 1.105, 12.441632653061225, 23002.14648485384);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 24598.025607805255, 1396.095807176862, 1.115, 12.164081632653062, 22761.244629663117);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 23998.26706911052, 1062.9027882818384, 1.105, 12.35591836734694, 22573.81009812071);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 23934.542809939896, 734.6735901722637, 1.115, 13.48408163265306, 22901.13331705523);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 24021.145081062798, 819.3960344289559, 1.12, 13.173061224489796, 22838.60949486668);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 24177.381533278254, 1121.5987106850362, 1.1, 12.975510204081633, 22778.60949486668);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 23302.176146776637, 671.1291039160883, 1.11, 12.099591836734694, 22449.3640423598);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 23416.31059592683, 785.0326807026038, 1.115, 13.146938775510204, 22420.3640423598);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 23274.824246071377, 691.7582183011847, 1.115, 12.48408163265306, 22420.3640423598);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 23392.608476900714, 675.8337454062012, 1.095, 11.878367346938775, 22558.945030792518);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 23268.92179355983, 616.6299982111342, 1.095, 11.595102040816327, 22558.945030792518);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 23567.10803222547, 732.7189549929568, 1.09, 12.555918367346939, 22516.287242333932);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 23571.806059073857, 801.9181787921132, 1.085, 11.139591836734693, 22450.17720307922);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 23422.420118612685, 538.0781181579636, 1.08, 11.442448979591838, 22371.9055745921);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 23292.39296222994, 671.2519280794487, 1.08, 11.379591836734694, 22371.9055745921);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 24088.19654596766, 1193.1601648419223, 1.07, 12.946938775510205, 22729.38386594909);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 23702.903052199432, 817.8714022217354, 1.065, 12.661224489795918, 22298.340519177076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 23793.08395572419, 763.044855621149, 1.065, 12.382857142857143, 22298.340519177076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 24149.31910389885, 1482.4178150723435, 1.065, 11.746938775510204, 22477.58480884746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 23732.727749489717, 1090.8096356793424, 1.065, 11.735510204081633, 22477.58480884746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 23714.58151197006, 802.0419430487397, 1.065, 11.129795918367346, 22477.58480884746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 23473.070580892963, 718.0359535855482, 1.07, 11.811428571428571, 22657.094218116392);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 23500.211341205286, 706.9737707847898, 1.065, 12.597551020408163, 22513.96354343358);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 23283.36286420907, 534.9555251454425, 1.07, 12.059591836734693, 22474.094218116392);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 23755.446568589636, 1154.436211496805, 1.085, 11.611428571428572, 22336.23228133824);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 23525.1826379856, 952.0644442026176, 1.08, 10.742857142857142, 22284.67638670237);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 23514.162265467385, 947.0266058353749, 1.08, 10.50530612244898, 22284.67638670237);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 23835.04998682226, 1101.0887339697624, 1.05, 11.44, 22492.363312179303);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 23237.75011442146, 1117.991517643336, 1.055, 8.06857142857143, 22423.363312179303);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 23306.796561816387, 945.3979435642221, 1.04, 7.948571428571428, 22423.363312179303);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 23781.192518139927, 502.0120529882453, 1.03, 8.644897959183673, 22869.216138722903);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 23450.392836513285, 777.5088810110493, 1.045, 10.866122448979592, 22448.09745425867);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 23087.61376418797, 911.8187589820776, 1.045, 7.289795918367347, 22448.09745425867);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 23337.04821997128, 641.8214261594406, 1.045, 9.625306122448979, 22511.613758813095);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 23663.336562748977, 715.5051058823212, 1.055, 6.246530612244898, 22502.078625144528);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 23581.609675399915, 902.7148333762796, 1.055, 4.978775510204081, 22502.078625144528);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 23716.4371468267, 1075.3649940562548, 1.055, 6.155918367346938, 22380.804300971402);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 23629.508749301607, 1065.12716885548, 1.055, 5.636734693877551, 22380.804300971402);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 23827.995329711357, 1089.2694291273656, 1.055, 5.322448979591837, 22380.804300971402);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 24570.870734504027, 837.7224207158339, 1.045, 6.849795918367347, 23266.338336233322);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 24656.109574503836, 700.6129892388635, 1.045, 8.148571428571428, 23266.338336233322);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 24434.78213169955, 800.0807688156603, 1.045, 7.488979591836735, 23266.338336233322);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 25241.994252751974, 651.6818674873819, 1.045, 7.631836734693877, 23319.416244534652);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 24974.98153107163, 917.8705464056505, 1.045, 9.29469387755102, 23319.416244534652);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 24840.83729043586, 864.4040228020415, 1.065, 9.075918367346938, 23113.051298604354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 24959.99465250913, 815.182934557777, 1.07, 9.346122448979592, 23269.79937131714);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 25044.223661432046, 1154.6312578055713, 1.07, 9.372244897959183, 23107.60021512892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 25410.01729274026, 927.2040563279027, 1.07, 8.728979591836735, 23093.60021512892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 25156.088546601324, 925.6699474923544, 1.07, 9.812244897959184, 23273.456825144127);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 24749.819257931107, 793.5684681941943, 1.065, 8.68, 23235.333120033796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 24489.05614468677, 750.9251438201386, 1.07, 9.071020408163266, 23167.450868861233);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 24536.56937085411, 1292.1824476662428, 1.08, 7.785306122448979, 22726.728223357506);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 24404.33461787396, 1241.110813790923, 1.075, 8.03591836734694, 22667.63168748847);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 24383.069501831276, 1327.2581671023395, 1.075, 7.884081632653062, 22667.63168748847);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 24279.11393659652, 1143.7830044939758, 1.07, 8.519183673469387, 22862.57935119167);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 24219.230674067036, 1062.3709381400213, 1.07, 8.042448979591837, 22862.57935119167);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 23845.949702812013, 893.8612710523843, 1.07, 7.584489795918367, 22862.57935119167);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 24495.003301350112, 357.1622950240355, 1.05, 6.540408163265306, 23115.444051403756);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 24196.170201658002, 642.6316366913335, 1.025, 8.182857142857143, 22767.884464627845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 23813.566366991443, 700.9345554683323, 1.02, 8.545306122448979, 22767.884464627845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 24679.621705703914, 775.5598947177336, 1.025, 9.177959183673469, 22920.037680646277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 24595.0407820392, 1114.6034339806579, 1.03, 8.591836734693878, 22867.037680646277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 24536.5110797522, 1120.303895709917, 1.03, 8.164081632653062, 22867.037680646277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 23947.102537431554, 726.7422780080238, 1.02, 8.048163265306123, 22715.887701759548);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 23738.526091908177, 765.8596007045838, 1.02, 7.416326530612245, 22689.887701759548);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 23733.078736785865, 725.1825901728105, 1.02, 7.284081632653061, 22689.887701759548);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 23746.043613744496, 1462.5413726445615, 0.995, 6.479183673469388, 22492.895563910377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 23891.192949421922, 1377.820315497242, 0.995, 5.546122448979592, 22492.895563910377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 23643.5993281614, 1154.5492747160645, 0.965, 6.194285714285714, 22427.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 23502.27562518436, 640.1160439781211, 0.98, 6.566530612244898, 22530.50082762649);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 23593.075657015135, 788.4300300784848, 0.98, 6.9616326530612245, 22530.50082762649);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 23345.599093484263, 802.9779300951973, 0.98, 6.280816326530612, 22530.50082762649);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 24378.836338934987, 1131.3256502327781, 0.98, 7.44, 22845.836148076505);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 24093.359049015144, 918.4104695924526, 0.98, 6.994285714285715, 22845.836148076505);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 24285.718957224828, 1146.575121079893, 0.95, 6.936326530612245, 22736.780092847923);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 23589.284327473462, 852.7214875129657, 0.92, 6.994285714285715, 22430.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 23495.269135404076, 708.3124897195733, 0.92, 6.343673469387755, 22430.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 23377.22078933003, 783.5752979675495, 0.92, 5.657959183673469, 22430.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 23064.918704152755, 761.2422413057873, 0.865, 5.715102040816326, 22341.528243865647);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 22858.505058465726, 722.3184481401883, 0.865, 4.729795918367347, 22341.528243865647);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 23023.26443605671, 667.780803504284, 0.865, 5.426122448979592, 22341.528243865647);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 23796.93957956784, 842.0170585644861, 0.845, 5.7338775510204085, 22661.598873324845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 23516.91272908417, 876.3625166905647, 0.855, 4.783673469387755, 22548.598873324845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 23372.663267823158, 797.2232755653167, 0.855, 4.0955102040816325, 22548.598873324845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 23495.535100741476, 925.2618317409057, 0.875, 4.503673469387755, 22768.06283518372);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 23419.547488804845, 863.185639020222, 0.875, 4.180408163265306, 22768.06283518372);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 23400.687079357318, 854.6166512372814, 0.875, 4.536326530612245, 22768.06283518372);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 24103.951071817864, 844.2411295875436, 0.86, 5.591836734693878, 22695.684057243638);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 23900.122921423277, 859.3984041445867, 0.865, 4.479183673469388, 22598.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 23578.574067725105, 552.7560656975031, 0.855, 4.158367346938776, 22598.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 23898.074623942088, 1074.796792934472, 0.87, 5.739591836734694, 22480.132780338907);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 23565.49436549249, 1174.5749556222047, 0.865, 5.222857142857142, 22456.132780338907);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 23663.518193048676, 1041.6443663925934, 0.865, 5.508571428571429, 22442.132780338907);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 24251.007910512035, 1282.1432337362653, 0.83, 5.248979591836735, 22569.118984691657);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 24112.175605301258, 1242.7241472253222, 0.83, 5.1257142857142854, 22569.118984691657);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 24261.619807260722, 1319.371330607402, 0.83, 4.673469387755102, 22569.118984691657);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 23256.85566202749, 840.0668750096336, 0.83, 4.959183673469388, 22398.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 23090.89362690505, 846.3302022419339, 0.795, 4.382040816326531, 22360.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 22942.009308160767, 668.5740810834529, 0.795, 3.914285714285714, 22360.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 22966.42370709528, 542.5531535360627, 0.795, 4.115102040816327, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 23054.7090382988, 467.8904608447273, 0.795, 4.08, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 23064.226356777144, 716.2742767392929, 0.795, 3.917551020408163, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 22932.39084998445, 1165.45987743763, 0.795, 2.726530612244898, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 22888.3860606381, 508.343784042442, 0.795, 2.874285714285714, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 22920.1172926453, 509.02515659338957, 0.795, 2.6555102040816325, 22413.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 23335.138119912222, 634.6765785340481, 0.785, 2.8644897959183675, 22524.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 23203.906359148034, 666.7998978140258, 0.785, 2.877551020408163, 22524.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 23252.80149932808, 653.4168689052881, 0.785, 3.1844897959183673, 22524.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 23626.565989494837, 558.4769652532484, 0.785, 3.7844897959183674, 22974.898781518015);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 23515.42514328745, 477.47291668022746, 0.775, 3.1812244897959183, 22901.898781518015);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 23534.861459460142, 462.13627462738594, 0.775, 3.436734693877551, 22901.898781518015);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 23727.052152559925, 707.2428850106005, 0.76, 3.9085714285714284, 22779.56548456);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 23922.173914389885, 795.3659306102459, 0.76, 4.045714285714285, 22779.56548456);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 23897.955859039546, 745.1960860972025, 0.76, 3.9461224489795916, 22779.56548456);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 23546.962618239268, 612.6895281668315, 0.74, 3.4881632653061225, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 23352.59931160882, 641.3704093985147, 0.74, 3.431020408163265, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 23233.086424813828, 592.7206864048258, 0.74, 3.016326530612245, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 23834.87157904394, 1096.4734669228233, 0.74, 3.804081632653061, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 23545.976759809957, 1177.3149221025817, 0.74, 2.203265306122449, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 23598.951625078633, 1224.919671252147, 0.76, 2.063673469387755, 22820.92367525549);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 23756.866410525712, 113.25855249673273, 0.76, 1.4718367346938777, 23354.36339299216);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 23821.18447547466, 86.01595485603781, 0.76, 0.8914285714285715, 23354.36339299216);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 23838.10447547466, 94.77323311086161, 0.76, 0.676734693877551, 23354.36339299216);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 23168.298007465415, 459.53709751971974, 0.76, 2.2416326530612243, 22841.664475474667);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 23081.81842330847, 653.8863828910436, 0.76, 1.5746938775510204, 22841.664475474667);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 23354.826020989978, 975.307812826589, 0.76, 2.4285714285714284, 22841.664475474667);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 24282.18250671619, 663.882735752354, 0.76, 3.306122448979592, 23226.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 23451.116214176604, 377.8974724669024, 0.76, 1.6946938775510203, 23226.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 23455.114709173715, 385.65924417321133, 0.76, 1.729795918367347, 23226.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 23591.410005210942, 311.84729587917747, 0.75, 1.7020408163265306, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 23274.390194165055, 0.0, 0.75, 0.0, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 23274.390194165055, 0.0, 0.75, 0.0, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 23274.390194165055, 0.0, 0.75, 0.0, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 23274.390194165055, 0.0, 0.75, 0.0, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 23274.390194165055, 0.0, 0.75, 0.0, 23274.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 23931.630866566837, 301.95127295666856, 0.74, 1.2179591836734693, 23787.021277126954);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 24086.273302461243, 521.4421340556949, 0.74, 1.786122448979592, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 24218.22592412048, 512.7234506661536, 0.74, 1.8024489795918368, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 23812.94097849346, 440.4338992120889, 0.74, 1.2342857142857142, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 23599.310194165053, 13.57645019878171, 0.74, 0.08, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 23603.150194165053, 23.03020199828113, 0.74, 0.23020408163265307, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 23606.990194165053, 29.09239328310368, 0.74, 0.3673469387755102, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 23597.390194165055, 0.0, 0.74, 0.0, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 23597.390194165055, 0.0, 0.74, 0.0, 23597.390194165055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 23636.46623360705, 1.102474064703213E-11, 0.74, 0.0, 23636.46623360706);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 23636.46623360705, 1.102474064703213E-11, 0.74, 0.0, 23636.46623360706);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 23636.46623360705, 1.102474064703213E-11, 0.74, 0.0, 23636.46623360706);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 23957.495350387417, 1.102474064703213E-11, 0.74, 0.0, 23957.495350387428);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 23957.495350387417, 1.102474064703213E-11, 0.74, 0.0, 23957.495350387428);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 23957.495350387417, 1.102474064703213E-11, 0.705, 0.0, 23957.495350387428);

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[11, 19, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 92, 27, 0, 62, 5, 48, 89, 78, 52, 37, 35, 98, 23, 17, 87, 93, 21, 15, 69, 3, 64, 65, 25, 18, 96, 55, 74, 91, 7, 30, 79, 88, 41, 66, 46, 97, 22, 44, 90, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 17, 23, 98, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 42, 2, 13, 70, 40, 99, 47, 28, 45, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 49, 24, 80, 60, 50, 86, 56, 6, 8, 82, 54, 33, 42, 2, 13, 70, 40, 99, 47, 28, 45, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 42, 2, 13, 70, 40, 99, 47, 28, 45, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 42, 2, 13, 70, 40, 99, 47, 28, 45, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 72, 67, 84, 38, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 15, 87, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 72, 67, 84, 38, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 42, 2, 13, 70, 40, 99, 47, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 50, 86, 8, 6, 56, 82, 54, 33, 45, 2, 42, 28, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 21, 15, 87, 93, 69, 65, 64, 3, 25, 0, 46, 27, 92, 57, 66, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 38, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 15, 21, 93, 87, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 2, 42, 28, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 15, 87, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 50, 86, 8, 6, 56, 82, 54, 33, 45, 2, 42, 28, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 38, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 8, 6, 56, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 60, 24, 80, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 8, 6, 56, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 8, 56, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 0, 5, 48, 89, 46, 27, 92, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 45, 28, 42, 2, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 0, 5, 48, 89, 46, 92, 27, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 8, 6, 82, 54, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 72, 67, 84, 43, 1, 53, 39, 63, 68, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 41, 88, 7, 91, 62, 5, 48, 89, 0, 46, 27, 92, 57, 66, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 49, 72, 67, 84, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 8, 56, 6, 82, 54, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 27, 92, 66, 57, 60, 24, 80, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 82, 54, 33, 56, 8, 6, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 72, 67, 84, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 24, 80, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 86, 50, 60, 24, 80, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 86, 50, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 6, 8, 86, 24, 80, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 45, 28, 2, 42, 13, 99, 70, 40, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 38, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 72, 49, 81, 94, 75, 12, 32, 36, 4, 51, 77, 95, 38, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 38, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 24, 80, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 24, 80, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 24, 80, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 68, 72, 67, 84, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 72, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 72, 68, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 24, 80, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 50, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 84, 67, 68, 72, 80, 24, 86, 11]");

    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 10);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(31667.137710704075);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(31667.137710704075);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 40284.6246055206, 2461.8304778529255, 0.0, 80.8130612244898, 36554.3909905504);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 34695.55486838032, 1731.845302500116, 0.7466666666666667, 18.18285714285714, 32730.285883041888);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 33218.81922648948, 1505.0869542626733, 0.5066666666666667, 8.73795918367347, 32154.00731823521);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 39816.04414996954, 1907.8957742817356, 0.49666666666666665, 19.106938775510205, 35321.99702371176);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 36486.314888184155, 1988.1891634480585, 0.8633333333333333, 36.413877551020406, 33336.812423876225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 36939.881564195704, 2637.637141690377, 1.14, 31.93469387755102, 31548.515739537415);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 35922.47767531281, 2407.023824459648, 1.15, 33.82204081632653, 32662.90104110237);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 35296.33265018548, 2835.6658819145337, 1.1633333333333333, 28.281632653061223, 31822.412200246778);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 34450.853923145536, 2262.280860395585, 1.1866666666666668, 28.17795918367347, 31093.26936022194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 36058.10868900969, 2173.6212904815284, 1.1866666666666668, 33.99673469387755, 31600.208435923265);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 36064.96037854824, 2706.84533641798, 1.1966666666666668, 29.783673469387754, 31214.208435923265);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 35726.301693837544, 2344.497986061979, 1.1966666666666668, 30.322448979591837, 31214.208435923265);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 37749.69897189306, 2641.493257263429, 1.2033333333333334, 41.38530612244898, 32209.907301345644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 37272.88400645204, 2283.62220760705, 1.2033333333333334, 41.39265306122449, 32209.907301345644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 36467.82562170873, 2807.912832811778, 1.2966666666666666, 36.99591836734694, 31938.95298610427);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 35510.57838012643, 2031.2086638262513, 1.3033333333333332, 38.204081632653065, 31473.171664304016);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 34820.189578820464, 1874.5851180756642, 1.3033333333333332, 35.89959183673469, 31473.171664304016);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 34218.459246843915, 2044.543515244736, 1.46, 32.07836734693878, 30808.19622552951);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 36157.54006921092, 2398.97785392343, 1.4466666666666668, 36.59183673469388, 32216.631292611823);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 36002.632258152764, 2262.676424794293, 1.4666666666666666, 35.08, 31460.78381469215);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 36195.059785613535, 2232.7817793213844, 1.4666666666666666, 35.08244897959184, 31460.78381469215);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 36214.53926966732, 2354.865367395776, 1.4466666666666668, 37.480816326530615, 31952.862266240696);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 35442.46182820679, 1953.8509540805605, 1.48, 35.264489795918365, 31595.018030592877);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 35224.189632533504, 2332.9969365542806, 1.48, 34.457959183673466, 31595.018030592877);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 34967.58838336284, 1766.4159830044155, 1.46, 34.519183673469385, 32109.603570594238);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 35094.64893843904, 2278.430897614334, 1.4866666666666666, 35.28163265306122, 31264.770272288733);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 34672.06627428659, 2402.248080612835, 1.5133333333333334, 32.3469387755102, 31248.770272288733);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 36000.59159561031, 2046.1681479655606, 1.5033333333333334, 40.88897959183674, 32666.4914405612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 35538.785850212465, 1809.0347069748675, 1.5366666666666666, 40.10938775510204, 32274.379225388842);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 35876.21142910683, 1988.0591057626075, 1.58, 38.585306122448976, 31863.834334973744);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 35731.7482307493, 1911.1794691786347, 1.5933333333333333, 43.40163265306123, 31951.01836419126);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 35469.79213442055, 1971.9343213068105, 1.6366666666666667, 41.74204081632653, 30863.754321783592);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 35565.60164738961, 2128.129982027817, 1.64, 40.17387755102041, 30205.002778745078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 35704.556269895606, 2309.8388307840855, 1.5833333333333333, 41.31755102040816, 31466.73317491524);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 35701.28487817856, 2094.388305762249, 1.58, 41.07918367346939, 31389.407242266076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 35344.738384038974, 2368.8265495558544, 1.5733333333333333, 38.14938775510204, 30674.073690130335);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 37223.98080721537, 2197.1782316629397, 1.5733333333333333, 40.79673469387755, 32025.945425977294);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 36329.24758437559, 2784.2727630042064, 1.57, 39.27510204081633, 30915.92714530707);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 36363.14537992524, 2299.5330629371206, 1.57, 36.64163265306122, 30908.77632149911);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 36873.78558812324, 2426.238900589537, 1.59, 41.70857142857143, 33425.06358825319);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 36436.7308797875, 2285.401358762441, 1.6733333333333333, 38.015510204081636, 31846.699436705276);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 35249.828060346525, 1735.912709755203, 1.6633333333333333, 37.55265306122449, 30986.0046821877);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 35638.21743784213, 1719.7047052564749, 1.65, 39.77061224489796, 31782.349273887325);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 35266.58572016953, 1588.8264924735784, 1.6666666666666667, 39.266938775510205, 31535.62293035156);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 35240.486987921926, 1885.8184527317806, 1.7, 38.31918367346939, 31316.198363371124);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 36311.522785728775, 1710.4101289399714, 1.71, 38.733061224489795, 33911.808291891415);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 36100.05674477261, 1930.3804307854323, 1.75, 39.56, 32546.01949824031);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 36040.698397767526, 1876.7972095737698, 1.77, 39.08163265306123, 32298.34361108443);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 35165.81624916961, 2107.564859455631, 1.77, 37.23836734693877, 31995.64800639294);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 35196.95396310675, 2407.388240111246, 1.7133333333333334, 35.72244897959184, 30991.215250676043);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 35561.28072029453, 2357.140405691732, 1.6966666666666668, 35.14938775510204, 30971.809281718826);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 36145.196622508556, 1828.4004821865635, 1.6933333333333334, 39.285714285714285, 32974.09150805826);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 36102.73675749299, 2236.3355328951407, 1.7433333333333334, 39.66204081632653, 31880.32276342544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 35688.47194340313, 1922.6389537438654, 1.76, 39.36326530612245, 31782.857028250743);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 35188.035580451826, 1594.3192380260361, 1.7533333333333334, 38.92081632653061, 32405.818344716656);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 35115.70574472661, 1765.618208038983, 1.7633333333333334, 37.159183673469386, 31397.800560663552);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 35858.6379808462, 2492.262246828807, 1.7366666666666666, 37.08816326530612, 31381.902542985827);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 36464.43356571433, 2881.0456329672024, 1.7533333333333334, 37.013061224489796, 31393.767496016066);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 35820.80387638934, 2348.76974113602, 1.7633333333333334, 37.391836734693875, 30214.17389778405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 34730.90028761009, 2205.4134343420787, 1.7533333333333334, 36.70857142857143, 30214.17389778405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 35498.630337879564, 1846.8028099453713, 1.7533333333333334, 41.70448979591837, 31803.932754587062);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 35509.68332404543, 1625.1125213570588, 1.7433333333333334, 40.7469387755102, 30507.146099544334);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 34786.82557169485, 2030.4777059384805, 1.7366666666666666, 35.87510204081633, 30382.15510604804);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 35293.02187687668, 2055.4959918647032, 1.7066666666666668, 36.12897959183673, 31319.258225900598);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 34959.046133249176, 2072.1690079378423, 1.72, 35.282448979591834, 30638.835715222373);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 34580.025098368875, 1806.0616777509006, 1.6966666666666668, 33.177142857142854, 30189.365606463034);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 37027.667294037834, 1785.3381439460622, 1.6433333333333333, 37.17387755102041, 33595.69300282534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 36797.88806801994, 1413.2586417586933, 1.66, 37.14530612244898, 33561.47505072964);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 36522.323970441714, 1764.5353740519179, 1.6933333333333334, 34.881632653061224, 32268.680410000274);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 35077.09106863414, 2360.5917678931105, 1.72, 34.006530612244894, 30967.10613390997);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 35090.25504585917, 2959.488090278947, 1.7133333333333334, 32.59591836734694, 30773.639305733588);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 34687.17102507915, 2366.988345494829, 1.7133333333333334, 31.682448979591836, 30773.639305733588);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 36750.36810238951, 2128.492027358624, 1.7133333333333334, 35.47265306122449, 31715.262854943794);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 36064.664239289115, 1789.1035521720808, 1.66, 33.2334693877551, 30806.212768463145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 36267.31554735932, 1643.8179331799404, 1.66, 34.17469387755102, 30806.212768463145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 35038.285181802254, 1674.8551113211647, 1.66, 31.93469387755102, 31657.817040438815);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 35220.080176743126, 1570.3019272668637, 1.68, 35.48408163265306, 31076.18648503935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 35141.72063817897, 2061.5067788742663, 1.68, 33.16897959183674, 31076.18648503935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 35841.23917481508, 1586.6653637182446, 1.68, 34.693061224489796, 32777.69899887625);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 35271.33400573293, 1969.5327569650642, 1.6766666666666667, 32.161632653061226, 31726.059005158764);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 35486.67020847667, 2428.969872452155, 1.6566666666666667, 33.39918367346939, 30855.947357020756);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 36345.06265799405, 1656.8951993123158, 1.6466666666666667, 35.83102040816326, 31544.901605850533);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 36856.56925366392, 1845.3620940593587, 1.6733333333333333, 35.74938775510204, 30382.085701367894);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 37050.740997431545, 2277.278584998382, 1.6733333333333333, 34.70367346938775, 30382.085701367894);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 36242.98698937027, 1622.9477816123115, 1.6733333333333333, 36.10775510204082, 31971.098796998747);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 35968.06852871027, 1608.1873814441565, 1.6733333333333333, 35.45224489795918, 31971.098796998747);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 36083.949926761205, 1808.1528656205037, 1.6233333333333333, 33.80408163265306, 31947.527788341395);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 36416.07062854216, 1927.440922359199, 1.5866666666666667, 34.629387755102044, 32511.058271258924);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 36538.613532264215, 1869.1772480463896, 1.61, 34.14775510204082, 32024.072633795076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 36634.16971715338, 2143.3678298619147, 1.6, 34.17142857142857, 32014.276125648918);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 36041.2874961807, 1912.1096163706013, 1.66, 32.717551020408166, 31748.11913393289);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 35601.710534607584, 2009.0353176127776, 1.6533333333333333, 31.311020408163266, 31746.977449539023);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 35659.53831390849, 2087.3168686408294, 1.65, 30.77795918367347, 31428.427390415716);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 36421.840743585766, 1914.10754933121, 1.65, 33.21387755102041, 32038.11248976324);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 35435.176754414715, 1740.6093309940204, 1.6033333333333333, 32.68571428571428, 31763.690087795);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 36294.51653341166, 1664.8284367674985, 1.6033333333333333, 34.49142857142857, 31763.690087795);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 37714.746848424424, 3333.7033846491445, 1.57, 33.758367346938776, 33402.04892535444);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 36912.92200836171, 2732.0559424949215, 1.5933333333333333, 34.01469387755102, 31847.71594181569);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 37215.66451816037, 3121.780802826055, 1.59, 31.980408163265306, 31359.674908109846);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 36118.468275393025, 2505.4146944947497, 1.6, 32.93224489795919, 31629.31966200762);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 35849.20828116517, 2378.0612433530478, 1.59, 30.57061224489796, 31292.619261278996);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 35599.56377640153, 2254.5669667000025, 1.5833333333333333, 31.731428571428573, 31030.17897218602);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 34435.6197058425, 1804.4198837328468, 1.5433333333333332, 29.91265306122449, 31531.123543941154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 34950.30228233877, 2332.195680098411, 1.5666666666666667, 28.681632653061225, 31279.814448583515);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 34590.790537756366, 2156.559991713103, 1.5466666666666666, 28.58448979591837, 31233.03242901776);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 36152.11018742612, 1736.535353966845, 1.5533333333333332, 30.18204081632653, 32081.732318629005);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 35934.33050473917, 1767.1378513060736, 1.5733333333333333, 30.103673469387754, 31461.328257132755);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 35629.130669003556, 1613.0328748269324, 1.58, 30.139591836734695, 31442.328257132755);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 36096.82379920775, 2167.2857777966215, 1.5866666666666667, 30.34938775510204, 31098.717055835798);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 35938.80736220203, 1805.2804431125521, 1.5866666666666667, 30.85061224489796, 31098.717055835798);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 35342.98667066038, 2225.5944251819164, 1.56, 30.31265306122449, 30905.50051608079);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 34790.942360700785, 1915.7360821066827, 1.58, 28.84734693877551, 32067.55979613242);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 35238.945122127196, 1787.0617245270687, 1.5866666666666667, 28.2865306122449, 31656.418608827502);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 34425.59282699518, 1909.1958707445244, 1.5766666666666667, 24.920816326530613, 30930.68473941865);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 35477.48953384983, 2774.895717198548, 1.5766666666666667, 25.608979591836736, 31141.86612888958);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 34859.70706532129, 2592.0648710666524, 1.5766666666666667, 22.826122448979593, 31141.86612888958);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 34753.27527819663, 2614.9791625872217, 1.5766666666666667, 22.14857142857143, 31141.86612888958);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 34716.493971097196, 2136.088188971407, 1.5766666666666667, 22.765714285714285, 32096.172911175523);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 34383.82777670234, 2152.9319727562033, 1.48, 21.451428571428572, 31510.056893795423);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 34495.86845264549, 2361.1138435497464, 1.46, 22.43265306122449, 31033.24024257189);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 36594.36156910859, 3829.6439541793798, 1.4733333333333334, 25.720816326530613, 32420.65075818664);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 36057.258328245596, 3644.0743060469017, 1.48, 23.666938775510204, 31563.85902769223);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 36755.7917438094, 4008.563563544234, 1.48, 22.239183673469388, 31563.85902769223);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 34693.18676178195, 1854.5598098745706, 1.4866666666666666, 23.78530612244898, 31794.530021627925);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 34418.93202907297, 2065.16277624458, 1.4833333333333334, 20.795102040816328, 31144.724445325155);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 34076.12594400617, 2009.1339288078611, 1.4833333333333334, 20.738775510204082, 31103.672361366407);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 35050.05759640613, 2833.914574484231, 1.46, 23.42204081632653, 30740.03038900177);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 34400.80497084881, 2406.241157537987, 1.46, 22.357551020408163, 30334.000780766397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 33938.4835862731, 2840.494290444873, 1.46, 20.366530612244897, 30334.000780766397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 34624.10562444891, 2417.274724724264, 1.46, 24.438367346938776, 30542.18668584644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 34386.88400641583, 2506.6606894034376, 1.46, 23.866122448979592, 30542.18668584644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 34399.61781407258, 2651.873440991055, 1.46, 22.897142857142857, 30290.940859305523);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 34339.23562045606, 2606.6304456244734, 1.46, 22.322448979591837, 30569.732685512656);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 34279.14615665208, 2331.327236096895, 1.42, 21.951836734693877, 30424.648031627163);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 34432.850345739396, 1996.7139940107847, 1.42, 20.87183673469388, 30343.614915876944);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 35611.19247866977, 2282.7138135820355, 1.42, 22.78530612244898, 33162.863031129236);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 34969.72633750106, 2321.0194201532436, 1.4566666666666668, 23.02122448979592, 32391.18799893543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 35178.8849947682, 2695.1716424849465, 1.4333333333333333, 23.375510204081632, 31495.100424711552);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 35077.07759800815, 2102.907427004532, 1.4333333333333333, 20.42612244897959, 31391.52807842668);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 34683.26271914885, 1919.6075676536232, 1.4333333333333333, 20.88734693877551, 31391.52807842668);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 34950.61291074094, 2198.237865149071, 1.4333333333333333, 20.08326530612245, 31391.52807842668);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 33698.95924142576, 2004.1267685640664, 1.3566666666666667, 22.125714285714285, 30630.667123401254);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 33650.96767257436, 1902.2130786045464, 1.3433333333333333, 21.466938775510204, 30503.648031627163);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 34631.27022456204, 2651.2425624618118, 1.3433333333333333, 19.983673469387757, 30503.648031627163);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 36884.908554419286, 2739.5607998133055, 1.3366666666666667, 21.639183673469386, 31352.504922916596);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 36736.11223929175, 2906.636528928167, 1.3433333333333333, 21.826122448979593, 30956.752978845594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 36491.949067879366, 2845.6821112586003, 1.3266666666666667, 21.43265306122449, 30794.997211494378);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 35958.529290890576, 2398.044434592904, 1.3, 22.058775510204082, 32356.026677967682);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 35345.06743121035, 2325.667948414443, 1.3033333333333332, 21.394285714285715, 31919.980253046633);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 35487.720071023155, 2428.2340297200067, 1.2933333333333332, 20.293877551020408, 31867.54223375154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 33531.8096845691, 1535.4006104342789, 1.29, 20.208163265306123, 31309.362537056782);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 34107.68700074057, 2075.5391841127816, 1.29, 20.124897959183674, 31309.362537056782);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 33732.8498414655, 1946.3483012630556, 1.2933333333333332, 20.06530612244898, 31266.653652633286);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 35783.548080622895, 2627.88512719156, 1.2733333333333334, 20.262857142857143, 31858.877835658277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 34626.71758175012, 1316.17556486704, 1.2733333333333334, 18.819591836734695, 31858.877835658277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 34848.488433598046, 1473.3148441760904, 1.2733333333333334, 19.830204081632655, 31858.877835658277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 33443.01839723665, 1227.4240887443152, 1.3, 18.37142857142857, 32141.44655224832);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 33271.485434561575, 946.1003119456742, 1.2933333333333332, 17.577142857142857, 31746.6056711624);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 33265.27661273244, 1002.871184162115, 1.2833333333333334, 18.139591836734695, 31488.773479858526);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 34988.24999259511, 1940.2969166103765, 1.2833333333333334, 18.58204081632653, 32285.167452139227);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 34815.82824380543, 2485.881605476171, 1.2733333333333334, 19.093061224489794, 31626.538269261862);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 35059.763742426665, 2455.726485686318, 1.2433333333333334, 18.906938775510206, 31240.595119907706);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 33361.31300524537, 944.2915598011127, 1.23, 16.644897959183673, 31959.01843861827);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 33583.07438355346, 1128.015130308968, 1.2366666666666666, 18.008163265306123, 31277.473162859395);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 33248.95965727709, 829.1783150519348, 1.2366666666666666, 17.842448979591836, 31277.473162859395);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 33067.51849575381, 916.3510078095097, 1.2433333333333334, 16.124081632653063, 31188.220618874882);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 32984.83194010406, 1267.16535582047, 1.2333333333333334, 16.27591836734694, 31030.220618874882);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 32985.66198636188, 1253.6758188547165, 1.2233333333333334, 16.449795918367347, 30972.220618874882);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 33804.86565610268, 1665.669655445498, 1.18, 16.426938775510205, 31091.098626334482);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 33766.72284477486, 1472.3403729375125, 1.18, 15.691428571428572, 31091.098626334482);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 34069.96560902338, 1436.7633914856146, 1.1633333333333333, 16.821224489795917, 30839.665102211442);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 33107.26714214285, 1447.9263662622122, 1.1766666666666667, 16.678367346938774, 30964.12932474715);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 33214.23906715779, 1333.0344322172923, 1.1766666666666667, 16.986122448979593, 30964.12932474715);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 33171.21508817499, 1499.649218127843, 1.15, 17.015510204081632, 30922.12932474715);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 33266.270308086016, 844.1059750791653, 1.15, 17.622857142857143, 31417.163760984546);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 33325.11942099235, 1072.6724917247714, 1.15, 16.760816326530612, 31417.163760984546);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 32838.00807066321, 1132.9748080653821, 1.15, 13.869387755102041, 31417.163760984546);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 33140.32768908808, 1650.4153582292731, 1.15, 14.529795918367347, 31228.58954073378);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 33240.64305528125, 1525.8980601346855, 1.1333333333333333, 14.984489795918368, 31120.58954073378);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 32778.62457926698, 1379.02706621072, 1.1333333333333333, 13.381224489795919, 31109.493822287182);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 33682.14100586252, 1297.555380360758, 1.1533333333333333, 16.067755102040817, 31365.70097331801);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 32689.795396565994, 819.2200952383926, 1.1533333333333333, 14.672653061224489, 31365.70097331801);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 32710.669767045627, 1186.8849412276925, 1.15, 15.058775510204082, 31360.957708011658);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 33408.46693982506, 949.0338013020664, 1.1066666666666667, 15.193469387755101, 31647.890533935242);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 32740.51792159937, 954.156863094046, 1.1033333333333333, 13.256326530612245, 31397.92687153133);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 32568.98360070418, 888.6808565842566, 1.1, 14.699591836734694, 31291.69160501979);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 32646.291512429576, 1028.352975356908, 1.11, 13.024489795918367, 31074.221598144817);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 32480.080164604955, 1077.6421028850802, 1.11, 12.775510204081632, 31074.221598144817);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 32479.22017863686, 1115.6795474867445, 1.1066666666666667, 13.027755102040816, 31029.221598144817);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 34281.75747757358, 1575.659059444648, 1.0833333333333333, 12.88734693877551, 31045.134967256992);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 33827.14306239819, 1705.0814453172961, 1.0833333333333333, 11.914285714285715, 31045.134967256992);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 33693.92817762065, 1637.1498737103589, 1.0833333333333333, 12.36734693877551, 31045.134967256992);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 32146.68624421838, 884.308344780305, 1.0466666666666666, 9.507755102040816, 31060.651079093637);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 32542.052444447163, 1123.1787870035337, 1.0533333333333332, 11.284897959183674, 31022.651079093637);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 32156.40822334042, 725.8926784938706, 1.0533333333333332, 9.922448979591836, 31022.651079093637);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 32387.835637699252, 678.0097394417431, 1.0633333333333332, 11.582040816326531, 31240.29705547266);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 32429.33516669797, 614.4033535756325, 1.0633333333333332, 11.310204081632653, 31240.29705547266);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 32421.598218811854, 719.326102326985, 1.0633333333333332, 10.306122448979592, 31240.29705547266);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 32282.393886759506, 644.9210922077401, 1.02, 10.0, 31342.24653016239);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 32387.416703407784, 829.4870532730415, 1.0233333333333334, 9.244081632653062, 31025.24653016239);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 32135.743219400854, 718.874488856689, 1.0233333333333334, 9.074285714285715, 31025.24653016239);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 34279.45259490612, 687.4399066987629, 1.02, 13.53061224489796, 31549.700656258115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 33774.7531803086, 1079.8424771532984, 1.0333333333333334, 13.433469387755101, 31540.700656258115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 32246.773016912433, 628.5653725072012, 1.0333333333333334, 10.628571428571428, 31540.700656258115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 32692.734145235332, 1019.0536474259098, 0.9933333333333333, 8.128163265306123, 31201.58345252156);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 32605.121942588612, 989.1833791854964, 0.9933333333333333, 8.347755102040816, 31201.58345252156);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 32677.969486985134, 1009.6179207919529, 0.9933333333333333, 8.742857142857142, 31201.58345252156);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 33048.378270167064, 838.8430349487653, 0.97, 10.206530612244897, 31485.406251656987);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 32904.49234214682, 795.7436093216263, 0.9666666666666667, 9.94530612244898, 31375.406251656987);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 32833.98531579199, 736.0169047718044, 0.9433333333333334, 9.261224489795918, 31375.406251656987);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 32855.73942446997, 452.7927123951936, 0.9466666666666667, 10.65469387755102, 31936.34795031264);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 32847.05798470846, 590.53541911074, 0.9466666666666667, 10.598367346938776, 31717.34795031264);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 32896.55612913895, 428.65490884552463, 0.9533333333333334, 9.569795918367348, 31701.34795031264);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 32643.48722388606, 671.4107906817796, 0.9466666666666667, 10.146938775510204, 31614.84158891046);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 32571.19080136442, 618.1976918739641, 0.9533333333333334, 9.696326530612245, 31346.84158891046);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 32519.12111165049, 684.2394113686811, 0.9533333333333334, 9.631020408163264, 31346.84158891046);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 32516.366667201106, 578.100891671722, 0.9133333333333333, 9.759183673469387, 31663.886585929817);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 32332.681494042696, 503.556891985727, 0.9066666666666666, 9.448163265306123, 31632.11027446271);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 32413.286591994358, 605.8858808463589, 0.9066666666666666, 8.404897959183673, 31632.11027446271);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 32881.10360236538, 493.1745590702786, 0.9133333333333333, 8.94530612244898, 31883.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 32966.94735354211, 627.7963531555947, 0.9133333333333333, 8.588571428571429, 31829.38769745087);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 32939.09721099625, 587.5607487463944, 0.92, 8.913469387755102, 31814.6772283221);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 32614.228863206572, 663.4859151354933, 0.8866666666666667, 8.855510204081632, 31603.265297597198);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 32693.778123079665, 884.3718656332851, 0.8833333333333333, 8.8, 31355.265297597198);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 32150.467152441026, 470.08236364032354, 0.88, 5.833469387755102, 31286.265297597198);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 32551.901295810436, 1109.1140926107526, 0.88, 5.726530612244898, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 32175.569533352555, 526.9206872664507, 0.88, 4.885714285714286, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 32187.926942231312, 558.2785158929416, 0.88, 5.204897959183674, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 32233.642804663934, 459.8827932812234, 0.88, 6.17795918367347, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 32079.137765492564, 402.8831609615252, 0.88, 6.173061224489796, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 32177.256328525433, 388.04760084493205, 0.88, 6.2995918367346935, 31284.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 32514.060105289118, 299.52718267978054, 0.89, 4.324897959183674, 32204.93959142281);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 32502.9887039999, 309.4617928293973, 0.89, 4.501224489795918, 32182.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 32582.731734127177, 390.41858250755826, 0.88, 4.697959183673469, 31980.93959142281);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 32316.59219888972, 554.4692145515021, 0.8766666666666667, 5.121632653061225, 31733.935666167054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 32169.69510624667, 244.2710248925009, 0.8766666666666667, 4.689795918367347, 31733.935666167054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 32176.755265573905, 300.1909310866283, 0.8833333333333333, 5.209795918367347, 31434.811996553835);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 32109.463238444627, 575.9077305898385, 0.89, 5.096326530612245, 31638.00822197411);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 32540.924652533242, 1006.1216875510227, 0.8866666666666667, 5.329795918367347, 31626.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 32060.554788498262, 570.8570175063805, 0.8666666666666667, 4.332244897959184, 31626.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 32051.249378895172, 407.96481411336873, 0.86, 5.380408163265306, 31387.141664211067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 32149.21980896987, 438.243305319519, 0.86, 5.3428571428571425, 31387.141664211067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 32062.439047407814, 364.73297999900876, 0.86, 4.9314285714285715, 31387.141664211067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 32335.281558110273, 318.45866270913916, 0.84, 5.133061224489796, 31825.752181830674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 32355.01488364581, 306.2407118056791, 0.84, 5.067755102040817, 31825.752181830674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 32547.057035349662, 313.1934132311779, 0.84, 4.258775510204082, 31825.752181830674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 32531.20743761271, 1118.229382540378, 0.84, 3.28734693877551, 31532.881712461174);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 32419.666608886528, 1089.1228391368438, 0.84, 2.5844897959183672, 31532.881712461174);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 32363.989908180534, 980.3957603184762, 0.84, 2.1812244897959183, 31532.881712461174);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 33110.68590644168, 1599.3348484708608, 0.84, 4.084081632653061, 31645.72732900621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 33095.09569169956, 1532.6493626901536, 0.84, 4.0416326530612245, 31645.72732900621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 31669.57179002303, 154.6552904884471, 0.84, 0.3551020408163265, 31645.72732900621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 31521.835012620213, 37.11661160643382, 0.84, 0.23673469387755103, 31513.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 31516.77501262021, 25.738686835190347, 0.84, 0.08, 31513.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 31516.77501262021, 25.738686835190336, 0.84, 0.08, 31513.135012620245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 31687.437710704064, 86.16411725330222, 0.84, 0.31510204081632653, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 31674.537710704062, 52.32590180780452, 0.84, 0.12, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 31670.777710704064, 25.738686835190325, 0.84, 0.08, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 31670.777710704064, 25.738686835190325, 0.84, 0.08, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 31771.393653582545, 7.34982709802142E-12, 0.84, 0.0, 31771.393653582538);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 31771.393653582545, 7.34982709802142E-12, 0.84, 0.0, 31771.393653582538);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 31771.393653582545, 7.34982709802142E-12, 0.84, 0.0, 31771.393653582538);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 31667.137710704064, 1.102474064703213E-11, 0.84, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 31667.137710704064, 1.102474064703213E-11, 0.7933333333333333, 0.0, 31667.137710704075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 31667.137710704064, 1.102474064703213E-11, 0.6466666666666666, 0.0, 31667.137710704075);

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[38, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 20, 73, 140, 58, 126, 35, 23, 37, 103, 101, 110, 98, 83, 9, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 129, 0, 46, 16, 14, 10, 91, 7, 74, 18, 52, 133, 17, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 16, 14, 10, 58, 140, 73, 20, 71, 9, 83, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 112, 62, 5, 48, 89, 91, 129, 0, 27, 92, 57, 107, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 55, 142, 118, 46, 130, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 33, 82, 54, 148, 85, 114, 119, 122, 42, 127, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 146, 36, 4, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 116, 6, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 16, 14, 10, 31, 108, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 118, 64, 3, 128, 123, 25, 117, 65, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 139, 134, 84, 67, 33, 82, 54, 148, 114, 119, 122, 42, 127, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 135, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 84, 67, 72, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 104, 141, 147, 66, 132, 137, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 123, 25, 117, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 16, 14, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 82, 54, 148, 114, 119, 122, 42, 127, 2, 45, 28, 131, 111, 47, 99, 40, 70, 13, 135, 33, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 146, 36, 4, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 26, 85, 19, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 123, 25, 117, 69, 15, 21, 93, 87, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 101, 110, 98, 17, 23, 37, 35, 126, 58, 140, 73, 20, 71, 112, 46, 149, 34, 114, 119, 122, 45, 28, 131, 111, 47, 99, 70, 40, 135, 2, 42, 127, 13, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 6, 116, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 16, 14, 10, 31, 108, 46, 112, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 27, 92, 130, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 57, 107, 72, 67, 84, 134, 139, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 84, 67, 72, 107, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 118, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 130, 27, 92, 57, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 19, 11, 26, 148, 54, 82, 33, 28, 131, 111, 13, 135, 2, 45, 42, 127, 122, 114, 119, 134, 47, 99, 70, 40, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 72, 107, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 133, 52, 18, 74, 96, 142, 55, 118, 3, 64, 65, 128, 25, 123, 117, 69, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 130, 27, 92, 57, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 26, 11, 19, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 26, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 10, 14, 16, 73, 140, 58, 126, 71, 20, 112, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 130, 44, 34, 114, 119, 122, 45, 28, 131, 111, 13, 135, 2, 42, 127, 99, 47, 40, 70, 84, 67, 72, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 72, 67, 84, 134, 139, 33, 82, 54, 148, 114, 119, 122, 42, 2, 135, 13, 70, 40, 99, 47, 131, 111, 28, 45, 127, 11, 26, 85, 19, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 105, 78, 136, 87, 15, 21, 69, 93, 133, 52, 18, 74, 96, 142, 55, 118, 3, 128, 25, 123, 117, 64, 65, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 46, 34, 116, 8, 6, 56, 86, 144, 124, 50, 60, 80, 24, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 104, 141, 147, 66, 132, 137, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 123, 25, 117, 69, 15, 87, 93, 21, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 20, 73, 140, 58, 126, 71, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 148, 54, 82, 33, 28, 131, 111, 13, 70, 40, 99, 47, 135, 2, 42, 45, 122, 114, 119, 127, 11, 26, 85, 19, 56, 8, 6, 116, 86, 144, 124, 50, 60, 80, 24, 68, 72, 67, 84, 134, 139, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 26, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 10, 14, 16, 73, 140, 58, 126, 71, 20, 112, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 44, 34, 114, 119, 122, 42, 127, 2, 45, 28, 131, 111, 47, 99, 70, 40, 135, 13, 84, 67, 72, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 26, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 10, 14, 16, 73, 140, 58, 126, 71, 20, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 118, 79, 30, 88, 132, 137, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 0, 129, 91, 7, 121, 41, 138, 3, 64, 65, 128, 25, 123, 117, 15, 87, 93, 21, 69, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 44, 34, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 67, 84, 139, 134, 33, 82, 54, 11, 19, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 130, 27, 92, 57, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 79, 30, 118, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 3, 64, 65, 128, 25, 123, 117, 69, 15, 87, 93, 21, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 112, 46, 34, 85, 26, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 135, 127, 99, 70, 40, 47, 8, 6, 116, 56, 86, 144, 50, 124, 60, 80, 24, 68, 63, 39, 53, 143, 113, 43, 1, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 19, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 73, 140, 58, 126, 71, 20, 112, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 133, 52, 18, 74, 96, 142, 55, 118, 3, 64, 65, 128, 25, 123, 117, 69, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 44, 34, 85, 26, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 135, 127, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 87, 93, 21, 17, 23, 37, 103, 101, 98, 35, 83, 9, 78, 136, 110, 126, 34, 85, 26, 119, 114, 122, 45, 28, 131, 111, 13, 70, 99, 47, 135, 2, 42, 127, 40, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 9, 83, 23, 37, 103, 101, 110, 98, 35, 126, 17, 136, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 93, 21, 69, 15, 87, 3, 64, 65, 128, 123, 25, 117, 118, 79, 30, 121, 41, 88, 132, 137, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 34, 85, 26, 119, 114, 122, 45, 2, 42, 127, 135, 13, 70, 99, 40, 47, 131, 111, 28, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 86, 144, 56, 19, 11, 26, 85, 34, 114, 119, 122, 45, 28, 111, 131, 13, 70, 40, 99, 47, 135, 2, 42, 127, 33, 82, 54, 148, 116, 8, 6, 139, 134, 84, 67, 107, 66, 104, 141, 147, 132, 137, 30, 79, 121, 41, 88, 7, 91, 0, 129, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 142, 55, 138, 118, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 136, 78, 17, 23, 37, 35, 103, 110, 101, 98, 93, 83, 9, 71, 20, 73, 140, 58, 126, 112, 46, 130, 92, 27, 57, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 11, 19, 85, 149, 34, 26, 119, 114, 122, 42, 2, 135, 127, 70, 40, 99, 47, 13, 131, 111, 28, 45, 84, 67, 107, 57, 92, 27, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 87, 15, 17, 136, 133, 52, 18, 74, 96, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 130, 44, 90, 108, 31, 10, 16, 14, 22, 97, 76, 109, 59, 61, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 144, 86, 60, 107, 57, 92, 27, 104, 66, 141, 147, 132, 137, 88, 41, 121, 79, 30, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 136, 78, 105, 133, 52, 18, 74, 96, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 103, 110, 101, 98, 16, 14, 10, 31, 44, 22, 97, 90, 108, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 135, 127, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 144, 86, 60, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 79, 30, 118, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 3, 64, 65, 128, 25, 123, 117, 69, 15, 87, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 112, 46, 130, 27, 92, 57, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 114, 119, 122, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 131, 28, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 93, 133, 52, 18, 74, 96, 142, 55, 138, 41, 121, 79, 30, 88, 132, 137, 147, 66, 104, 141, 0, 129, 91, 7, 118, 3, 64, 65, 128, 25, 123, 117, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 10, 14, 16, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 131, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 9, 83, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 88, 30, 79, 132, 137, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 91, 7, 118, 3, 64, 65, 128, 25, 123, 117, 87, 15, 21, 93, 69, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 10, 14, 16, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 19, 85, 26, 11, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 131, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 47, 99, 70, 40, 34, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 138, 41, 121, 79, 30, 88, 132, 137, 147, 66, 104, 141, 0, 129, 91, 7, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 126, 58, 140, 73, 20, 71, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 131, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 47, 99, 70, 40, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 9, 83, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 104, 141, 147, 66, 132, 137, 88, 41, 121, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 87, 21, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 131, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 7, 91, 129, 0, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 35, 126, 58, 140, 73, 20, 71, 9, 83, 103, 101, 110, 98, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 83, 9, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 91, 7, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 87, 21, 93, 17, 23, 37, 103, 110, 101, 98, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 127, 33, 134, 139, 144, 86, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 103, 101, 110, 98, 23, 17, 136, 78, 105, 133, 52, 69, 21, 15, 87, 93, 64, 65, 128, 25, 123, 117, 118, 3, 96, 142, 55, 138, 121, 41, 88, 30, 79, 132, 137, 147, 141, 104, 66, 129, 0, 91, 7, 74, 18, 48, 5, 62, 89, 9, 83, 10, 14, 16, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 148, 54, 82, 33, 134, 139, 86, 144, 56, 6, 8, 116, 26, 85, 34, 114, 119, 122, 42, 127, 135, 70, 40, 99, 47, 13, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 103, 101, 98, 110, 23, 17, 136, 78, 105, 133, 52, 15, 87, 21, 93, 69, 65, 128, 25, 123, 117, 64, 3, 118, 142, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 104, 141, 0, 129, 91, 7, 74, 96, 18, 48, 5, 62, 89, 9, 83, 10, 14, 16, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 127, 33, 82, 54, 148, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 141, 104, 66, 129, 0, 91, 7, 48, 5, 62, 89, 105, 78, 87, 15, 21, 93, 69, 65, 128, 25, 123, 117, 64, 3, 118, 9, 83, 103, 101, 110, 98, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 135, 127, 33, 82, 54, 148, 116, 8, 6, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 9, 83, 103, 101, 110, 98, 93, 87, 15, 21, 69, 65, 64, 3, 117, 123, 25, 128, 118, 91, 7, 90, 108, 31, 10, 14, 16, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 127, 33, 82, 54, 148, 116, 8, 6, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 15, 87, 93, 21, 69, 65, 64, 3, 117, 25, 123, 128, 118, 142, 55, 138, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 129, 0, 91, 7, 74, 96, 18, 48, 5, 62, 89, 9, 83, 103, 110, 101, 98, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 135, 70, 40, 99, 47, 127, 33, 82, 54, 148, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 48, 5, 62, 89, 9, 83, 98, 110, 101, 103, 87, 15, 21, 93, 69, 65, 64, 3, 118, 142, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 129, 0, 91, 7, 74, 96, 117, 123, 25, 128, 108, 31, 10, 14, 16, 44, 97, 90, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 70, 40, 99, 47, 131, 111, 28, 45, 127, 33, 134, 139, 144, 86, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 110, 101, 98, 93, 21, 15, 87, 69, 65, 128, 25, 123, 117, 64, 3, 118, 79, 30, 88, 132, 137, 147, 141, 104, 66, 41, 121, 90, 108, 31, 10, 14, 16, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 127, 40, 70, 99, 47, 13, 131, 28, 45, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 101, 98, 110, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 88, 41, 121, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 14, 16, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 135, 127, 42, 122, 114, 119, 116, 6, 8, 56, 86, 144, 19, 139, 134, 84, 67, 47, 99, 70, 40, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 88, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 110, 101, 98, 103, 9, 83, 89, 48, 5, 62, 0, 129, 91, 7, 141, 104, 66, 147, 132, 137, 90, 108, 31, 10, 16, 14, 44, 22, 97, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 33, 82, 54, 148, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 88, 132, 137, 147, 141, 104, 66, 129, 0, 91, 7, 30, 79, 118, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 110, 101, 98, 103, 83, 9, 89, 48, 5, 62, 108, 31, 10, 14, 16, 44, 22, 97, 90, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 139, 134, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 144, 86, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 121, 41, 88, 132, 137, 147, 141, 104, 66, 129, 0, 91, 7, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 110, 101, 98, 103, 83, 9, 89, 48, 5, 62, 108, 31, 10, 14, 16, 44, 97, 90, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 131, 28, 33, 134, 139, 86, 144, 67, 84, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 110, 101, 98, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 88, 41, 121, 132, 137, 147, 104, 66, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 127, 42, 2, 135, 13, 70, 40, 99, 47, 111, 131, 28, 45, 33, 82, 54, 148, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 110, 101, 98, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 88, 41, 121, 132, 137, 147, 104, 66, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 122, 127, 42, 2, 135, 13, 70, 40, 99, 47, 111, 131, 28, 45, 33, 82, 54, 148, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 128, 123, 25, 117, 64, 3, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 141, 104, 97, 90, 108, 31, 10, 14, 16, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 144, 86, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 111, 131, 13, 135, 127, 40, 70, 99, 47, 84, 67, 134, 139, 33, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 103, 98, 101, 110, 93, 21, 15, 87, 69, 128, 123, 25, 117, 64, 65, 3, 118, 79, 30, 88, 41, 121, 132, 137, 147, 141, 104, 66, 144, 86, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 101, 110, 103, 93, 21, 15, 87, 69, 128, 123, 25, 117, 64, 65, 3, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 14, 16, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 135, 127, 33, 134, 139, 86, 144, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 101, 110, 103, 93, 21, 15, 87, 69, 65, 64, 3, 117, 25, 123, 128, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 141, 104, 90, 108, 31, 10, 16, 14, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 111, 131, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 87, 15, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 141, 104, 66, 147, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 127, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 33, 134, 139, 144, 86, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 128, 25, 123, 117, 64, 65, 3, 118, 79, 30, 121, 41, 88, 132, 137, 147, 66, 141, 104, 90, 108, 31, 10, 16, 14, 44, 22, 97, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 135, 127, 40, 70, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 128, 25, 123, 117, 64, 65, 3, 118, 30, 79, 121, 41, 88, 132, 137, 141, 104, 66, 147, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 148, 54, 82, 33, 134, 139, 86, 144, 56, 6, 8, 116, 119, 114, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 134, 84, 67, 144, 86, 139, 116, 8, 6, 56, 19, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 79, 30, 88, 41, 121, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 127, 33, 134, 139, 144, 86, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 14, 16, 44, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 148, 54, 82, 33, 28, 131, 111, 13, 47, 99, 70, 40, 135, 2, 45, 42, 122, 127, 119, 114, 116, 6, 8, 56, 86, 144, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 141, 104, 66, 144, 86, 139, 134, 84, 67, 111, 131, 28, 45, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 10, 16, 14, 56, 8, 6, 116, 82, 54, 33, 13, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 141, 104, 66, 144, 86, 56, 8, 6, 116, 82, 54, 33, 28, 131, 111, 13, 47, 40, 99, 70, 135, 127, 42, 2, 45, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 139, 134, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 148, 54, 82, 33, 134, 139, 116, 6, 8, 56, 86, 144, 67, 84, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 122, 114, 119, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 47, 99, 70, 40, 135, 127, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 86, 144, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 45, 2, 135, 13, 70, 40, 99, 47, 111, 131, 28, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 45, 2, 135, 13, 70, 40, 99, 47, 111, 131, 28, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 97, 90, 108, 31, 10, 16, 14, 44, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 45, 2, 135, 13, 70, 40, 99, 47, 111, 131, 28, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 84, 67, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 134, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 19, 56, 8, 116, 6, 86, 144, 139, 134, 33, 82, 54, 148, 11, 26, 85, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 135, 127, 40, 70, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 67, 84, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 134, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 33, 134, 139, 86, 144, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 45, 42, 2, 135, 127, 40, 70, 99, 47, 13, 131, 111, 28, 33, 134, 139, 86, 144, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 131, 111, 28, 45, 127, 40, 70, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 33, 134, 139, 86, 144, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 116, 8, 86, 144, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 131, 28, 45, 2, 40, 70, 99, 47, 111, 33, 134, 139, 86, 144, 67, 84, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 131, 111, 28, 45, 2, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 50, 124, 60, 107, 57, 27, 92, 130, 46, 112, 71, 20, 73, 140, 58, 126, 35, 37, 23, 17, 136, 78, 105, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 98, 103, 110, 101, 93, 21, 15, 87, 69, 65, 64, 3, 117, 123, 25, 128, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 61, 59, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 139, 134, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 13, 47, 99, 70, 40, 127, 45, 28, 131, 111, 84, 67, 38]");
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 100);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(24382.787726908366);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(24382.787726908366);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 92, 27, 0, 62, 5, 48, 89, 78, 52, 37, 35, 98, 23, 17, 87, 93, 21, 15, 69, 3, 64, 65, 25, 18, 96, 55, 74, 91, 7, 30, 79, 88, 41, 66, 46, 97, 22, 44, 90, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 17, 23, 98, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 21, 15, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 42, 2, 13, 70, 40, 99, 47, 28, 45, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 21, 15, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 42, 2, 13, 70, 40, 99, 47, 28, 45, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 8, 6, 56, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 32, 75, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 29, 38, 84, 67, 72, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 72, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 24, 80, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 77, 51, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 86, 50, 60, 24, 80, 67, 84, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 77, 51, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 86, 50, 60, 24, 80, 67, 84, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 77, 51, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 86, 50, 60, 24, 80, 67, 84, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 60, 24, 80, 68, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 40, 70, 99, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 8, 6, 56, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 75, 32, 12, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[11, 19, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 78, 52, 62, 46, 0, 92, 27, 57, 66, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 68, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 31671.967452268564, 1903.8917677261363, 0.0, 54.80326530612245, 28431.703154969287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 25708.6609269715, 1969.6690245684817, 0.5, 2.994285714285714, 24532.863214936);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 25875.13726416559, 2491.3730101938822, 0.5, 3.486530612244898, 23490.548724198074);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 28857.88304545952, 4484.67498454788, 0.5, 5.0620408163265305, 24736.702598362877);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 29610.67823403911, 1892.5318590104778, 0.73, 13.696326530612245, 23840.03960484521);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 26680.734586455972, 2482.6167333704684, 0.845, 13.692244897959183, 23274.595408954556);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 30372.558548437235, 2507.7824171450243, 0.845, 17.071020408163264, 25665.527724507363);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 26058.715508425787, 1986.9540406813223, 0.95, 12.474285714285715, 23970.445893929773);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 25411.245945375817, 2038.7747465414327, 0.905, 7.153469387755102, 23900.07554022895);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 26973.27307476205, 2118.3805137493105, 0.91, 12.653877551020408, 25184.614984182383);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 25854.123443245975, 2409.3287747372706, 0.99, 4.403265306122449, 24628.594274161136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 24957.81838743112, 758.7431941595648, 0.895, 5.483265306122449, 24451.594274161136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 26491.63948545209, 969.5805134785587, 0.885, 11.729795918367348, 25400.608075818724);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 25018.731176698228, 693.0951451780494, 0.995, 6.364897959183674, 24309.170418464717);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 24655.217425981336, 611.9186674567881, 0.88, 4.394285714285714, 24309.170418464717);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 26349.2173282309, 985.377367863335, 0.895, 8.27591836734694, 24360.640775186745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 24993.14955316424, 878.7308630641991, 0.945, 5.488163265306122, 24353.640775186745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 24626.23058861382, 540.0716811570724, 0.805, 2.942040816326531, 24353.640775186745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 25828.424007274945, 1181.224377163822, 0.78, 3.5608163265306123, 24729.954165547297);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 24745.02982854331, 580.0342691204295, 0.825, 2.5118367346938775, 24523.184529318);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 24653.942998524588, 545.9376743588344, 0.73, 3.2187755102040816, 24489.184529318);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 26381.05301354854, 1717.338706751191, 0.735, 4.324081632653061, 24570.01988318601);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 24783.670387669936, 979.3170370402069, 0.76, 2.6212244897959183, 24476.640775186745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 24721.87076788979, 885.5331798922566, 0.735, 1.8106122448979591, 24476.640775186745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 24705.759473065318, 967.9245859602272, 0.715, 2.433469387755102, 24352.303385523075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 24357.263385523067, 20.523714506464383, 0.715, 0.43020408163265306, 24352.303385523075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 24357.303385523068, 26.158075195992225, 0.705, 0.3159183673469388, 24352.303385523075);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 24396.096262261333, 38.49757765135018, 0.705, 0.7869387755102041, 24382.787726908366);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 24382.787726908362, 3.67491354901071E-12, 0.705, 0.0, 24382.787726908366);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 24382.787726908362, 3.67491354901071E-12, 0.65, 0.0, 24382.787726908366);


        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(15000);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 100);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(30961.049975153193);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(30961.049975153193);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 40284.6246055206, 2461.8304778529255, 0.0, 80.8130612244898, 36554.3909905504);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 32724.545266355704, 2748.492786551185, 0.5133333333333333, 6.107755102040817, 30931.229840839023);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 33380.18821725434, 3409.828176644703, 0.5033333333333333, 7.803265306122449, 30391.782755971548);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 35126.77755942732, 2760.2977517065992, 0.5066666666666667, 12.164897959183673, 31206.366499322678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 34204.53192837616, 2841.2195845071424, 0.6766666666666666, 12.559183673469388, 29970.177386711264);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 34766.70978624268, 3252.739699348135, 0.7266666666666667, 9.626938775510204, 29809.753539561974);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 36471.34838003456, 1774.7377313355591, 0.7266666666666667, 13.776326530612245, 32515.252854522634);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 32729.848775239756, 2422.469751774527, 0.86, 11.20734693877551, 30271.665182810753);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 32857.32833047451, 3022.492586684081, 0.7833333333333333, 8.918367346938776, 30028.665182810753);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 36335.07973804311, 1107.2923728354929, 0.7833333333333333, 19.084897959183674, 33362.41606076593);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 33576.32257518195, 2547.042151389934, 0.8866666666666667, 16.184489795918367, 30067.227558943134);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 32946.4680019555, 3469.972831418927, 0.83, 9.968163265306123, 30046.227558943134);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 35163.20076895053, 1611.99231532764, 0.83, 13.653877551020408, 32690.809410087866);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 33325.038307696675, 1780.7305965642286, 0.8233333333333334, 12.416326530612245, 30544.02075419253);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 31638.490504910125, 2267.1977089147035, 0.7633333333333333, 7.430204081632653, 30298.355045285047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 35622.78761077218, 2826.933665294244, 0.7633333333333333, 8.220408163265306, 30575.38705937793);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 32908.353328726465, 3355.155426320845, 0.79, 6.401632653061225, 30001.68096407671);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 30557.89054699365, 1330.7428471299413, 0.7466666666666667, 3.8416326530612244, 30001.68096407671);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 31122.198536217213, 1299.572952969758, 0.7366666666666667, 4.8742857142857146, 30356.397072329084);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 30438.063463177165, 584.2523766921503, 0.75, 4.256326530612245, 30017.262608944493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 30232.860487939917, 422.5478226842047, 0.71, 2.259591836734694, 30017.262608944493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 32274.72293627059, 962.6189946993545, 0.7166666666666667, 5.322448979591837, 31416.5644815552);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 31293.68934249682, 701.3083660746391, 0.79, 4.30530612244898, 30927.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 30941.349975153218, 27.66877706892369, 0.73, 1.413061224489796, 30927.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 30974.5540571986, 78.899251378536, 0.7233333333333334, 0.23918367346938776, 30961.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 30961.04997515322, 2.572439484307497E-11, 0.7233333333333334, 0.0, 30961.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 30961.04997515322, 2.572439484307497E-11, 0.6333333333333333, 0.0, 30961.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 30961.04997515322, 2.572439484307497E-11, 0.6333333333333333, 0.0, 30961.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 30961.04997515322, 2.572439484307497E-11, 0.6333333333333333, 0.0, 30961.049975153193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 30961.04997515322, 2.572439484307497E-11, 0.66, 0.0, 30961.049975153193);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 20, 73, 140, 58, 126, 35, 23, 37, 103, 101, 110, 98, 83, 9, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 129, 0, 46, 16, 14, 10, 91, 7, 74, 18, 52, 133, 17, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 28, 131, 45, 2, 13, 135, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 27, 92, 57, 107, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 129, 0, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 83, 9, 126, 58, 140, 46, 130, 92, 27, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 57, 107, 24, 80, 124, 50, 86, 144, 60, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 83, 9, 126, 58, 140, 73, 20, 46, 130, 92, 27, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 57, 107, 24, 80, 124, 50, 86, 144, 60, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 130, 92, 27, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 57, 107, 24, 80, 124, 50, 86, 144, 60, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 130, 92, 27, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 130, 92, 27, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 0, 129, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 110, 103, 101, 98, 35, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 110, 103, 101, 98, 35, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 110, 103, 101, 98, 35, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 93, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 55, 142, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 65, 128, 25, 123, 117, 64, 3, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 65, 128, 25, 123, 117, 64, 3, 118, 96, 74, 18, 52, 133, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 142, 55, 138, 7, 91, 0, 129, 66, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 74, 96, 18, 52, 133, 17, 23, 37, 35, 103, 101, 110, 98, 83, 9, 46, 108, 130, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 92, 27, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 7, 91, 0, 129, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 7, 91, 0, 129, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 7, 91, 0, 129, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 3, 64, 65, 128, 25, 123, 117, 118, 142, 55, 138, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 66, 104, 141, 147, 137, 132, 88, 30, 79, 121, 41, 7, 91, 0, 129, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 140, 58, 126, 71, 112, 62, 5, 48, 89, 105, 78, 136, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 130, 108, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 136, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 46, 130, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 15, 21, 93, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 92, 27, 66, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 92, 27, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 108, 46, 130, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 87, 15, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 3, 64, 65, 128, 25, 123, 117, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 93, 15, 87, 136, 78, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 86, 144, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 87, 15, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 87, 15, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 87, 15, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 92, 27, 57, 107, 60, 124, 50, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 60, 50, 124, 144, 86, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 144, 86, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 51, 77, 95, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[38, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 135, 2, 13, 28, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 140, 126, 71, 112, 62, 5, 48, 89, 105, 52, 133, 18, 74, 96, 118, 142, 55, 138, 7, 91, 0, 129, 66, 104, 141, 147, 137, 132, 88, 41, 121, 79, 30, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 46, 108, 130, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 68, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 146, 38]");


        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(20000);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.75, 10);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(41403.77176828554);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(41403.77176828554);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");

        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 11, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0, 5, 48, 18, 96, 55, 74, 15, 87, 93, 21, 69, 65, 64, 3, 25, 78, 17, 37, 23, 35, 9, 83, 89, 71, 20, 73, 58, 98, 52, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 76, 19, 26, 85, 34, 54, 82, 33, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 8, 6, 11, 42, 2, 45, 28, 13, 99, 70, 40, 47, 77, 51, 95, 29, 38, 36, 4, 12, 75, 32, 94, 81, 57, 66, 92, 27, 46, 71, 9, 83, 89, 62, 48, 5, 74, 96, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 78, 17, 37, 23, 35, 58, 20, 73, 91, 0, 7, 41, 30, 79, 88, 55, 52, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 83, 9, 71, 31, 90, 97, 22, 76, 61, 59, 92, 27, 66, 57, 60, 50, 86, 8, 6, 19, 26, 85, 34, 11, 56, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 84, 67, 49, 43, 1, 63, 39, 53, 68, 80, 24, 72, 81, 94, 32, 75, 12, 4, 36, 51, 95, 77, 38, 44, 0, 46, 5, 48, 62, 89, 78, 87, 15, 21, 93, 52, 18, 3, 64, 65, 25, 96, 55, 79, 88, 30, 41, 7, 91, 74, 69, 17, 37, 23, 35, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[10, 16, 14, 31, 90, 97, 22, 59, 61, 76, 19, 26, 85, 34, 11, 6, 8, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 51, 95, 77, 4, 36, 32, 12, 75, 94, 81, 1, 53, 39, 63, 68, 24, 80, 60, 50, 86, 67, 84, 29, 38, 72, 49, 43, 57, 92, 27, 66, 7, 91, 74, 18, 69, 93, 15, 21, 87, 17, 78, 52, 89, 62, 5, 48, 0, 46, 71, 20, 73, 58, 35, 98, 37, 23, 83, 9, 65, 64, 3, 55, 96, 25, 30, 79, 88, 41, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 20, 73, 58, 83, 9, 71, 98, 35, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 3, 64, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0, 46, 62, 48, 5, 89, 18, 74, 27, 92, 57, 66, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 38, 29, 45, 42, 2, 13, 99, 70, 40, 47, 95, 77, 51, 36, 4, 12, 75, 32, 81, 94, 80, 24, 60, 50, 86, 6, 8, 56, 54, 82, 33, 28, 11, 19, 26, 85, 34, 59, 61, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 65, 64, 25, 69, 93, 21, 87, 15, 78, 52, 89, 37, 23, 17, 35, 83, 9, 71, 20, 73, 58, 76, 61, 59, 11, 19, 26, 85, 34, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 38, 29, 84, 67, 72, 49, 43, 51, 77, 95, 13, 28, 45, 42, 2, 70, 40, 99, 47, 54, 82, 33, 92, 27, 66, 57, 0, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 76, 61, 59, 85, 34, 26, 11, 6, 56, 8, 86, 50, 60, 24, 80, 68, 72, 43, 1, 53, 39, 63, 67, 84, 29, 47, 95, 77, 51, 36, 4, 32, 12, 75, 94, 81, 38, 49, 45, 2, 42, 28, 13, 70, 40, 99, 82, 54, 33, 19, 66, 27, 92, 57, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 98, 35, 83, 9, 71, 73, 58, 20, 5, 62, 48, 89, 78, 52, 18, 74, 0, 46, 90, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 71, 20, 73, 58, 35, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 25, 69, 93, 15, 21, 87, 17, 78, 23, 37, 98, 52, 18, 74, 27, 92, 66, 57, 60, 24, 80, 50, 86, 8, 6, 56, 54, 82, 33, 11, 19, 26, 85, 34, 61, 76, 59, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 29, 38, 4, 36, 75, 12, 32, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 8, 6, 19, 61, 59, 76, 11, 34, 26, 85, 54, 82, 33, 42, 2, 45, 28, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 71, 20, 73, 58, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 65, 64, 25, 69, 15, 87, 21, 93, 78, 52, 23, 37, 35, 98, 17, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 89, 78, 17, 23, 37, 35, 98, 73, 58, 20, 71, 9, 83, 27, 92, 66, 57, 60, 50, 86, 56, 8, 6, 19, 61, 59, 76, 11, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 77, 51, 4, 36, 75, 32, 12, 94, 81, 49, 43, 72, 84, 67, 1, 53, 39, 63, 68, 24, 80, 54, 82, 26, 85, 34, 38, 95, 29, 0, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 87, 15, 21, 93, 17, 23, 37, 35, 83, 9, 71, 73, 20, 58, 98, 69, 65, 64, 25, 3, 18, 55, 96, 74, 91, 7, 41, 79, 30, 88, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 8, 6, 19, 61, 59, 76, 34, 26, 85, 11, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 49, 43, 1, 53, 39, 63, 68, 72, 0, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 27, 92, 66, 57, 60, 50, 86, 56, 8, 6, 19, 26, 85, 34, 61, 59, 76, 11, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 77, 51, 95, 29, 38, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 67, 84, 68, 72, 24, 80, 71, 9, 83, 23, 37, 35, 98, 17, 93, 15, 87, 21, 69, 65, 64, 25, 3, 58, 73, 20, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 27, 92, 57, 60, 50, 86, 8, 6, 56, 19, 26, 85, 11, 34, 61, 59, 76, 33, 82, 54, 28, 13, 99, 70, 40, 42, 45, 2, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 84, 29, 49, 43, 72, 67, 24, 80, 68, 63, 39, 53, 1, 66, 58, 73, 20, 71, 9, 83, 23, 17, 37, 98, 35, 93, 15, 21, 69, 65, 64, 3, 25, 87, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 24, 80, 50, 86, 8, 6, 56, 19, 34, 61, 59, 76, 85, 11, 26, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 71, 20, 73, 58, 83, 9, 37, 23, 17, 93, 87, 15, 21, 69, 65, 64, 3, 25, 98, 35, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 96, 3, 25, 64, 65, 69, 15, 87, 21, 93, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 0, 27, 92, 57, 60, 24, 80, 50, 86, 56, 8, 6, 11, 26, 85, 34, 61, 76, 59, 19, 54, 82, 33, 45, 2, 42, 13, 99, 47, 51, 77, 95, 29, 38, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 91, 7, 41, 79, 30, 88, 55, 81, 94, 32, 75, 12, 4, 36, 70, 40, 28, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 3, 96, 74, 21, 15, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 91, 0, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 8, 6, 11, 54, 82, 33, 45, 28, 13, 99, 47, 51, 77, 95, 36, 4, 12, 32, 75, 94, 81, 38, 29, 67, 84, 43, 49, 72, 1, 63, 39, 53, 68, 76, 59, 61, 85, 34, 19, 26, 42, 2, 70, 40, 58, 20, 73, 71, 9, 83, 35, 98, 17, 23, 37, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 27, 92, 66, 57, 60, 24, 80, 68, 72, 84, 38, 29, 28, 45, 42, 2, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 67, 8, 6, 56, 54, 82, 33, 11, 19, 61, 59, 76, 85, 26, 34, 86, 50, 71, 20, 73, 58, 98, 35, 37, 23, 17, 21, 15, 87, 93, 69, 25, 64, 3, 65, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 69, 15, 87, 21, 93, 17, 23, 37, 35, 98, 83, 9, 71, 20, 73, 58, 0, 27, 92, 57, 60, 24, 80, 50, 86, 8, 56, 6, 11, 26, 85, 34, 61, 76, 59, 19, 33, 54, 82, 28, 45, 2, 42, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 75, 12, 94, 81, 32, 39, 63, 53, 1, 43, 72, 67, 84, 29, 38, 49, 68, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 21, 87, 15, 69, 93, 17, 37, 23, 35, 98, 83, 9, 71, 20, 73, 58, 0, 92, 27, 57, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 28, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 2, 42, 26, 85, 11, 19, 34, 61, 59, 76, 24, 80, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 25, 65, 69, 15, 87, 21, 93, 17, 23, 37, 35, 98, 20, 73, 58, 71, 9, 83, 92, 27, 66, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 38, 29, 95, 24, 80, 68, 63, 39, 53, 43, 1, 60, 76, 59, 61, 19, 26, 85, 11, 34, 57, 0, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 25, 65, 69, 15, 87, 93, 21, 17, 23, 37, 35, 71, 83, 9, 58, 73, 20, 0, 27, 92, 57, 60, 50, 86, 8, 6, 56, 11, 85, 19, 61, 76, 59, 34, 26, 54, 82, 33, 45, 2, 42, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 72, 80, 24, 68, 1, 63, 39, 53, 43, 84, 67, 38, 29, 28, 66, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 21, 93, 87, 15, 69, 37, 23, 17, 83, 9, 71, 73, 58, 20, 0, 92, 27, 57, 60, 50, 86, 8, 6, 56, 11, 19, 34, 85, 26, 54, 82, 33, 28, 42, 45, 2, 13, 70, 40, 99, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 49, 72, 1, 63, 39, 53, 68, 66, 80, 24, 67, 84, 29, 38, 43, 61, 76, 59, 35, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 96, 55, 0, 92, 27, 66, 57, 60, 50, 86, 8, 56, 85, 26, 19, 34, 61, 59, 76, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 4, 36, 75, 12, 32, 94, 81, 45, 2, 42, 70, 40, 99, 13, 47, 28, 33, 54, 82, 11, 6, 73, 20, 58, 71, 9, 83, 35, 98, 37, 23, 17, 87, 21, 15, 69, 65, 64, 3, 25, 93, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 25, 21, 93, 15, 87, 17, 23, 37, 35, 83, 9, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 11, 85, 26, 34, 61, 76, 59, 82, 54, 33, 28, 45, 2, 42, 70, 40, 99, 47, 51, 77, 95, 36, 4, 38, 29, 84, 67, 72, 43, 1, 53, 39, 63, 68, 24, 80, 60, 13, 49, 81, 94, 12, 75, 32, 69, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 65, 64, 25, 15, 21, 87, 69, 93, 17, 37, 35, 98, 83, 9, 71, 20, 73, 58, 76, 59, 61, 85, 26, 34, 19, 11, 6, 8, 56, 86, 50, 60, 68, 63, 39, 53, 1, 43, 49, 72, 84, 67, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 13, 99, 70, 40, 42, 45, 28, 2, 54, 82, 33, 80, 24, 66, 57, 92, 27, 0, 23, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 25, 65, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 83, 9, 71, 20, 73, 58, 0, 92, 27, 66, 57, 60, 24, 80, 68, 72, 49, 43, 84, 67, 38, 29, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 53, 39, 63, 1, 50, 86, 8, 6, 56, 19, 26, 85, 34, 11, 33, 82, 54, 28, 45, 2, 42, 13, 47, 99, 70, 40, 59, 61, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 25, 21, 15, 87, 69, 93, 17, 23, 37, 35, 98, 58, 73, 20, 71, 9, 83, 0, 92, 27, 57, 50, 60, 80, 24, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 51, 77, 95, 38, 29, 84, 67, 49, 43, 72, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 11, 26, 85, 34, 61, 59, 76, 56, 6, 8, 86, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 25, 0, 92, 27, 66, 57, 60, 50, 86, 6, 8, 56, 11, 26, 85, 34, 61, 59, 76, 19, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 49, 43, 1, 72, 67, 84, 38, 29, 24, 80, 68, 63, 39, 53, 58, 73, 20, 71, 83, 9, 37, 23, 17, 35, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 25, 0, 92, 27, 66, 57, 50, 60, 80, 24, 68, 72, 43, 49, 1, 39, 63, 67, 84, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 53, 86, 8, 6, 56, 19, 11, 85, 34, 26, 54, 82, 33, 45, 2, 42, 13, 47, 99, 70, 40, 28, 59, 61, 76, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 23, 37, 98, 35, 17, 83, 9, 71, 20, 73, 58, 59, 76, 61, 85, 26, 34, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 77, 95, 51, 4, 36, 12, 32, 75, 94, 81, 1, 63, 39, 53, 43, 72, 67, 84, 29, 38, 49, 68, 80, 24, 60, 50, 86, 66, 57, 92, 27, 0, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 17, 37, 23, 35, 98, 9, 58, 20, 73, 71, 83, 93, 25, 0, 92, 27, 57, 60, 50, 86, 6, 8, 56, 11, 26, 85, 34, 61, 59, 76, 19, 54, 82, 33, 28, 2, 45, 42, 13, 47, 99, 70, 40, 51, 77, 95, 36, 4, 12, 75, 32, 94, 81, 1, 63, 39, 53, 68, 24, 80, 72, 49, 43, 67, 84, 29, 38, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 98, 35, 83, 9, 71, 20, 73, 58, 92, 27, 57, 60, 24, 80, 50, 86, 8, 6, 56, 11, 26, 85, 34, 19, 61, 59, 76, 54, 82, 33, 28, 45, 2, 42, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 1, 43, 49, 72, 68, 63, 39, 53, 67, 84, 38, 29, 13, 66, 0, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 23, 37, 35, 83, 9, 71, 20, 73, 58, 17, 98, 25, 0, 27, 92, 57, 50, 86, 8, 6, 56, 11, 26, 85, 19, 34, 54, 82, 33, 28, 45, 2, 42, 70, 40, 99, 13, 47, 29, 38, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 68, 24, 80, 60, 76, 59, 61, 39, 53, 1, 43, 63, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 23, 37, 83, 9, 71, 73, 20, 58, 0, 27, 92, 57, 60, 80, 24, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 29, 28, 45, 42, 2, 13, 99, 70, 40, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 47, 33, 82, 54, 8, 6, 56, 11, 26, 85, 34, 61, 76, 59, 66, 50, 86, 19, 25, 98, 35, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 35, 71, 20, 73, 58, 83, 9, 23, 98, 25, 0, 92, 27, 66, 57, 50, 86, 8, 6, 56, 11, 26, 85, 19, 34, 61, 59, 76, 24, 80, 60, 68, 72, 49, 43, 1, 63, 39, 53, 38, 29, 77, 95, 51, 4, 36, 32, 75, 12, 94, 81, 67, 84, 33, 82, 54, 28, 2, 45, 42, 70, 40, 99, 47, 13, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 98, 35, 71, 73, 20, 58, 83, 9, 0, 27, 92, 66, 57, 50, 86, 56, 6, 8, 19, 26, 85, 34, 61, 59, 76, 11, 54, 82, 33, 28, 45, 2, 13, 99, 70, 40, 47, 42, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 1, 43, 72, 49, 67, 84, 38, 29, 80, 24, 60, 68, 63, 39, 53, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 9, 83, 0, 27, 92, 66, 39, 63, 53, 43, 72, 49, 67, 84, 38, 29, 2, 45, 42, 40, 70, 99, 47, 13, 28, 33, 82, 54, 6, 56, 8, 86, 50, 60, 80, 24, 68, 1, 81, 12, 75, 32, 94, 36, 4, 95, 77, 51, 11, 26, 85, 34, 19, 61, 59, 76, 57, 25, 20, 73, 58, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 83, 9, 71, 20, 73, 58, 59, 61, 85, 26, 11, 6, 56, 8, 82, 54, 33, 45, 28, 2, 42, 40, 70, 99, 13, 47, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 72, 68, 24, 80, 50, 86, 57, 92, 27, 66, 39, 53, 63, 67, 84, 38, 60, 76, 34, 19, 0, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 73, 20, 58, 0, 27, 92, 66, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 68, 63, 60, 50, 86, 56, 8, 6, 11, 19, 26, 85, 34, 54, 82, 33, 28, 45, 2, 13, 47, 40, 99, 70, 42, 76, 59, 61, 57, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 9, 83, 0, 27, 92, 66, 80, 24, 68, 72, 49, 43, 1, 63, 39, 53, 81, 94, 12, 32, 75, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 45, 28, 2, 42, 54, 82, 33, 11, 26, 34, 85, 19, 56, 6, 8, 86, 50, 60, 57, 67, 84, 38, 29, 59, 61, 76, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 76, 59, 61, 85, 34, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 66, 57, 92, 27, 0, 83, 9, 25, 68, 32, 47, 13, 99, 70, 40, 42, 45, 2, 28, 33, 82, 54, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 83, 9, 92, 27, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 11, 26, 85, 34, 19, 61, 59, 76, 82, 54, 33, 45, 28, 2, 42, 70, 40, 99, 47, 13, 29, 95, 51, 77, 36, 4, 32, 75, 12, 94, 81, 49, 43, 72, 67, 84, 38, 68, 63, 39, 53, 1, 25, 0, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 92, 27, 57, 60, 24, 80, 50, 86, 8, 6, 56, 19, 26, 85, 34, 61, 59, 76, 11, 54, 82, 33, 45, 2, 28, 42, 13, 99, 40, 70, 47, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 38, 66, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 29, 42, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 66, 67, 84, 80, 24, 68, 72, 38, 26, 85, 19, 11, 34, 61, 59, 76, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 57, 66, 86, 50, 60, 24, 80, 68, 67, 84, 72, 49, 43, 1, 53, 39, 63, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 45, 28, 2, 42, 40, 70, 99, 47, 13, 33, 82, 54, 6, 56, 8, 19, 11, 26, 34, 85, 59, 61, 76, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 45, 2, 13, 28, 42, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 1, 43, 49, 72, 68, 39, 53, 63, 67, 84, 38, 29, 24, 80, 19, 11, 26, 85, 34, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 60, 24, 80, 68, 39, 63, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 6, 56, 8, 86, 50, 82, 54, 33, 45, 42, 28, 2, 13, 70, 40, 99, 47, 29, 11, 26, 85, 19, 76, 59, 61, 34, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 56, 6, 8, 19, 85, 34, 26, 11, 54, 82, 33, 28, 45, 2, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 53, 39, 68, 24, 80, 60, 72, 84, 67, 38, 29, 42, 61, 59, 76, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 56, 8, 6, 19, 11, 85, 26, 34, 61, 59, 76, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 38, 4, 36, 32, 12, 75, 94, 81, 49, 67, 72, 43, 63, 39, 53, 1, 29, 84, 80, 24, 60, 68, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 85, 11, 26, 34, 61, 59, 76, 24, 80, 60, 68, 63, 39, 53, 1, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 28, 33, 45, 2, 42, 82, 54, 29, 38, 84, 67, 49, 72, 43, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 82, 54, 33, 28, 45, 2, 42, 13, 47, 99, 40, 70, 77, 95, 51, 29, 38, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 81, 94, 75, 12, 32, 36, 4, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 60, 24, 80, 72, 43, 1, 53, 39, 63, 68, 67, 38, 29, 84, 49, 81, 94, 12, 32, 75, 36, 4, 51, 77, 95, 45, 28, 2, 42, 13, 70, 40, 99, 47, 33, 82, 54, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 85, 11, 26, 34, 54, 82, 33, 28, 45, 42, 2, 13, 70, 99, 40, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 72, 84, 67, 80, 24, 60, 68, 63, 39, 53, 1, 43, 38, 29, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 34, 61, 59, 76, 11, 54, 82, 33, 28, 45, 42, 2, 13, 99, 40, 70, 47, 29, 84, 67, 49, 72, 68, 63, 39, 53, 1, 43, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 80, 24, 60, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 77, 95, 51, 36, 4, 12, 75, 32, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 60, 24, 80, 67, 84, 29, 38, 34, 61, 59, 76, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 45, 42, 2, 28, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 49, 72, 68, 60, 24, 80, 63, 39, 53, 1, 43, 61, 59, 76, 34, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 45, 2, 42, 13, 99, 70, 40, 47, 29, 84, 67, 49, 43, 72, 68, 24, 80, 60, 76, 59, 61, 34, 28, 77, 51, 95, 38, 4, 36, 32, 12, 75, 94, 81, 1, 53, 39, 63, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 2, 13, 47, 77, 51, 95, 36, 4, 29, 38, 84, 67, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 99, 70, 40, 45, 42, 34, 61, 59, 76, 60, 24, 80, 68, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 42, 2, 45, 28, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 76, 59, 61, 34, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 2, 42, 45, 13, 99, 40, 70, 47, 29, 38, 43, 72, 49, 1, 53, 39, 63, 68, 60, 24, 80, 67, 84, 81, 94, 12, 32, 75, 36, 4, 77, 51, 95, 34, 61, 59, 76, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 2, 45, 42, 70, 40, 99, 47, 51, 95, 77, 4, 36, 32, 12, 94, 81, 49, 43, 1, 39, 63, 68, 72, 60, 24, 80, 67, 84, 29, 38, 75, 53, 25, 83, 9, 76, 59, 61, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 40, 42, 2, 45, 29, 84, 67, 49, 43, 72, 68, 63, 39, 53, 1, 81, 12, 75, 32, 94, 24, 80, 60, 59, 76, 61, 34, 38, 95, 77, 51, 36, 4, 47, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 40, 42, 45, 2, 29, 84, 67, 72, 43, 49, 81, 94, 12, 32, 75, 36, 4, 51, 77, 95, 38, 68, 63, 39, 53, 1, 24, 80, 60, 59, 61, 76, 34, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 40, 42, 2, 45, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 72, 49, 67, 84, 24, 80, 68, 63, 39, 53, 60, 61, 59, 76, 34, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 1, 43, 49, 67, 84, 38, 24, 80, 60, 68, 63, 39, 53, 72, 45, 42, 2, 40, 34, 61, 59, 76, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 84, 67, 72, 68, 63, 39, 53, 49, 43, 1, 32, 12, 75, 81, 94, 36, 4, 95, 77, 51, 45, 2, 40, 42, 34, 76, 59, 61, 60, 24, 80, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 95, 51, 4, 36, 12, 32, 75, 94, 81, 1, 53, 39, 63, 68, 72, 43, 49, 67, 84, 80, 24, 60, 61, 34, 76, 59, 9, 83, 25, 42, 45, 2, 40, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 75, 32, 12, 94, 81, 49, 43, 63, 39, 53, 1, 72, 68, 80, 24, 60, 76, 59, 61, 34, 67, 84, 2, 45, 42, 40, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 12, 75, 32, 94, 81, 49, 43, 1, 53, 39, 63, 72, 68, 24, 80, 60, 76, 59, 61, 34, 2, 45, 42, 40, 84, 67, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 43, 49, 1, 53, 39, 63, 68, 80, 24, 60, 76, 59, 61, 34, 42, 45, 2, 40, 67, 84, 72, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 80, 24, 60, 76, 59, 61, 34, 42, 40, 2, 45, 84, 67, 72, 43, 49, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 1, 43, 49, 72, 68, 80, 24, 60, 76, 59, 61, 34, 2, 45, 42, 40, 67, 84, 63, 39, 53, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 67, 84, 80, 24, 60, 76, 59, 61, 34, 42, 45, 2, 40, 43, 49, 68, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 63, 39, 53, 72, 49, 67, 84, 2, 45, 42, 40, 61, 34, 76, 59, 60, 24, 80, 68, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 68, 80, 24, 60, 63, 39, 53, 1, 49, 67, 84, 2, 42, 40, 45, 34, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 63, 39, 53, 68, 80, 24, 60, 72, 49, 67, 84, 2, 45, 42, 40, 34, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 49, 43, 72, 67, 84, 2, 45, 40, 42, 24, 80, 60, 68, 39, 53, 63, 25, 9, 83, 34, 61, 59, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 68, 80, 24, 60, 72, 49, 43, 84, 67, 45, 42, 2, 40, 61, 76, 59, 34, 83, 9, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 68, 72, 49, 43, 67, 84, 2, 42, 45, 40, 61, 59, 76, 34, 60, 24, 80, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 67, 84, 80, 24, 60, 76, 59, 61, 34, 2, 42, 45, 40, 43, 49, 68, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 43, 49, 67, 84, 2, 42, 45, 40, 61, 59, 76, 34, 60, 24, 80, 68, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 60, 24, 80, 68, 67, 84, 45, 42, 2, 40, 61, 59, 76, 34, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 84, 67, 68, 80, 24, 60, 61, 59, 76, 34, 42, 2, 45, 40, 25, 83, 9, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 80, 24, 60, 67, 84, 2, 40, 42, 45, 34, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 2, 40, 42, 76, 59, 61, 34, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 76, 59, 61, 34, 2, 45, 42, 40, 84, 67, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 76, 59, 61, 34, 2, 45, 42, 40, 84, 67, 25, 9, 83, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 34, 61, 76, 59, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 2, 40, 42, 34, 61, 59, 76, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 2, 42, 40, 61, 59, 76, 34, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 40, 2, 61, 59, 76, 34, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 61, 59, 76, 34, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 61, 34, 59, 76, 9, 83, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 61, 59, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 61, 34, 59, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 61, 59, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 22, 90, 46, 62, 5, 48, 89, 78, 52, 18, 74, 91, 7, 41, 79, 30, 88, 55, 96, 3, 64, 65, 69, 21, 15, 87, 93, 17, 37, 23, 35, 98, 71, 20, 73, 58, 0, 27, 92, 66, 57, 50, 86, 8, 6, 56, 19, 26, 85, 11, 54, 82, 33, 28, 13, 70, 99, 47, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 72, 49, 43, 68, 60, 24, 80, 84, 67, 45, 42, 2, 40, 9, 83, 25, 59, 61, 76, 34, 10]");
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 46813.33363202887, 3211.946543021583, 0.0, 56.90775510204082, 39102.466113931514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 35554.57594816564, 2624.4671475129076, 0.615, 3.0220408163265304, 34045.74227704834);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 34365.52002605536, 1879.3858827868253, 0.51, 2.9779591836734696, 33520.61458584829);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 48410.4599466737, 3711.5138748312115, 0.475, 30.76408163265306, 42732.50196283305);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 39138.47254493587, 3461.7004380668036, 1.41, 33.25959183673469, 32192.810485067217);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 36543.591417196265, 4162.865914909502, 1.565, 17.903673469387755, 31478.517607679147);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 46266.019885460606, 3661.336304745062, 1.24, 40.21224489795918, 39486.821520551275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 43506.613058615854, 3251.2705378461765, 1.675, 32.00816326530612, 38214.66182229473);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 43230.11633564083, 3129.7781106587663, 1.685, 26.172244897959185, 37373.0641515385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 47946.56480537194, 4393.330226810184, 1.54, 43.08571428571429, 42002.656497778546);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 45511.96319935941, 3459.4612977042148, 1.755, 40.733061224489795, 38107.132216399106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 44865.28493503632, 3077.36409080974, 1.95, 38.006530612244894, 36145.094210739924);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 43922.637883526564, 3549.7278308043865, 2.0, 40.15102040816326, 35153.22231697113);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 42345.39767596575, 3658.949358593489, 2.105, 35.713469387755104, 33769.206669549116);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 41569.27495473383, 3536.032903735481, 2.105, 33.99510204081633, 33769.206669549116);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 42924.89384234301, 3312.3891837485235, 1.965, 37.59673469387755, 36930.188024057556);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 40555.86011776751, 3328.8892985952157, 2.075, 36.28326530612245, 34801.07335603519);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 40876.513964879356, 4433.668725869716, 2.145, 34.348571428571425, 33599.54212764074);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 45625.980340446724, 3398.551912428457, 2.165, 40.55265306122449, 40080.597226859034);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 43632.17505765744, 3298.2549675808327, 2.215, 39.226122448979595, 37861.71210888618);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 43032.89300931588, 2941.953013170745, 2.35, 39.674285714285716, 37538.29095401298);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 42092.20725210902, 3210.0550962739962, 2.18, 39.05877551020408, 36231.38295245779);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 39871.76672195024, 2582.194020564625, 2.21, 35.69387755102041, 35476.996714923844);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 40193.738763258996, 2750.5683729552316, 2.245, 33.434285714285714, 35170.64056120497);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 42146.36218358513, 3363.4642331778036, 2.21, 31.616326530612245, 35770.51937841445);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 41022.06723707674, 3223.2734199668616, 2.25, 32.990204081632655, 35221.675126362396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 40226.030936438896, 3112.5712820752315, 2.355, 32.85142857142857, 34088.55239698694);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 41961.18590322404, 3464.0269990947168, 2.275, 35.97877551020408, 36650.54399064558);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 41117.69037044913, 2794.1658041514083, 2.325, 32.46204081632653, 34981.83550686194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 39865.01390442932, 3159.7297492993166, 2.335, 29.882448979591835, 34981.83550686194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 41854.65279494265, 4049.1015456451787, 2.265, 31.36326530612245, 34529.647215191544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 41777.21303078066, 4370.44822056124, 2.305, 29.802448979591837, 34466.17513995044);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 41090.48843357786, 3629.327483254183, 2.32, 28.816326530612244, 34056.33590059776);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 43567.04188108491, 3676.6962916387124, 2.23, 33.74612244897959, 39001.605371353064);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 43549.625825936164, 3186.634742107251, 2.275, 34.883265306122446, 35596.530029485664);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 42420.67197063865, 3409.9787606339846, 2.325, 31.921632653061224, 34568.89800774157);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 43793.80693987052, 3856.4821068517936, 2.305, 37.863673469387756, 37555.61036237277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 43280.825911089705, 3133.7025120686103, 2.305, 37.68489795918367, 37555.61036237277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 42179.06705097882, 3599.7507391025288, 2.405, 36.99918367346939, 35124.4174730066);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 43134.5387414392, 3703.558473847851, 2.295, 34.82857142857143, 37065.081438248555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 41233.950936885776, 2651.4107385150496, 2.36, 32.44408163265306, 35729.81121993441);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 42106.16847037703, 3611.260793186002, 2.375, 29.732244897959184, 35433.85570070249);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 43847.492776066174, 3257.126870003502, 2.365, 34.06367346938776, 37769.27716559327);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 42031.91663919939, 2997.693427708601, 2.385, 32.42448979591837, 34865.9710220907);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 41337.43148556682, 2959.2730118828035, 2.47, 33.04081632653061, 34551.673180623526);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 43616.81357232418, 3054.246700638648, 2.45, 35.65877551020408, 36217.15751896592);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 42587.35877374795, 2643.637281021252, 2.45, 35.438367346938776, 36217.15751896592);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 43189.42682249076, 3077.7792372982244, 2.56, 34.79673469387755, 36051.26876751385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 41896.291185920934, 2514.6758532786857, 2.375, 34.46612244897959, 37502.90192896753);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 41902.81989048171, 3045.7830842063368, 2.425, 31.328163265306124, 36358.941311980714);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 41605.50191112008, 3088.9750207620764, 2.485, 31.907755102040817, 35456.70321479527);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 43278.983697864205, 3726.5290420599954, 2.395, 32.372244897959185, 37275.212366579646);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 42384.13750640269, 3324.9816538779464, 2.41, 28.643265306122448, 35469.07169293164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 41778.101716334124, 2724.7150454601465, 2.41, 29.897142857142857, 35469.07169293164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 41742.98151236323, 3086.7105553669326, 2.405, 30.982857142857142, 36525.04768791725);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 43450.43903661458, 2772.594577195607, 2.42, 27.07591836734694, 35810.126579031596);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 43484.78331779498, 3969.671827052783, 2.43, 28.27265306122449, 35678.64230968413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 42094.77057936526, 3789.672218408043, 2.28, 30.82938775510204, 36789.179611748055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 42666.5559081566, 4314.844858238338, 2.375, 28.809795918367346, 36043.07048558149);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 43366.49838638697, 3591.11052330654, 2.36, 28.543673469387755, 35734.75350492583);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 42093.46911203922, 3037.0294466455525, 2.43, 31.804081632653062, 35538.16385444085);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 41510.64469826961, 2264.118309937104, 2.43, 27.18285714285714, 35538.16385444085);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 41298.950145991264, 2920.3350354541044, 2.47, 28.27673469387755, 34893.32663933565);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 44769.275781797805, 3135.578307868127, 2.405, 32.309387755102044, 39250.82381090917);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 42890.3671400436, 2561.313509164897, 2.48, 31.241632653061224, 36791.45885257502);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 43081.06376881709, 3394.820601081137, 2.48, 29.961632653061226, 36791.45885257502);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 44465.98876296114, 3201.199820432635, 2.475, 29.360816326530614, 38106.075682503826);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 43384.613085429155, 3274.7865061578746, 2.51, 27.582857142857144, 37731.968323747555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 43185.25285874787, 3226.5702675954294, 2.51, 29.40408163265306, 37731.968323747555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 45177.84843391031, 3229.3417966636994, 2.4, 32.19183673469388, 39729.36733327066);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 45393.55324722342, 3733.6013325219733, 2.4, 29.200816326530614, 38438.23886998651);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 43182.89100571433, 2843.3780293212067, 2.44, 27.300408163265306, 38164.38990411213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 44175.49698948857, 2986.287659249124, 2.415, 31.59265306122449, 38120.79764422764);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 42307.78809177855, 3639.7017103323983, 2.445, 29.485714285714284, 34573.77813767373);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 40847.713863342826, 3361.1814993912612, 2.445, 28.516734693877552, 34573.77813767373);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 42566.96622680234, 3042.4065153629595, 2.315, 29.234285714285715, 36393.2400887942);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 42045.83292492519, 3250.51048756093, 2.36, 27.90204081632653, 35932.83777771714);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 40642.60365176731, 2718.85849418571, 2.37, 25.477551020408164, 35819.65912455601);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 41994.8468933018, 2615.1328820804574, 2.32, 29.01142857142857, 36649.46258020955);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 41360.63655276486, 2680.594131397681, 2.35, 28.212244897959184, 36096.59256496303);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 41326.907552549805, 3060.4145186249148, 2.37, 27.33142857142857, 33697.43564882741);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 44407.356376353775, 2786.797407430283, 2.33, 28.798367346938775, 39213.17126654323);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 44248.91562685238, 2469.970297632622, 2.375, 28.573061224489795, 38318.12867883912);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 44551.411669423105, 3558.201201142805, 2.375, 26.871020408163265, 38318.12867883912);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 46454.76491997693, 3153.663341770541, 2.375, 32.31755102040816, 40690.049535322105);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 43719.25359582193, 3281.251339763569, 2.405, 30.459591836734695, 38735.50906300054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 44075.973255523415, 3532.4886425010263, 2.375, 30.85142857142857, 37897.67764450947);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 44525.664314382535, 2651.207365157169, 2.265, 27.87265306122449, 39741.629042652305);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 44453.907307767004, 3057.6708065896128, 2.27, 25.03918367346939, 38646.45306772022);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 43888.12196169913, 3015.2298223816665, 2.35, 24.19918367346939, 38118.145039015115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 45847.12089555023, 2392.307403685357, 2.265, 27.692244897959185, 40346.45075877517);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 45398.062451112346, 2824.334266680676, 2.315, 26.666122448979593, 39478.56850334024);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 45046.440642331465, 2950.5788561055165, 2.3, 25.70122448979592, 37118.402354354635);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 45029.420975674715, 3454.2701691945986, 2.285, 23.208163265306123, 40439.912166679984);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 43761.17062284811, 2498.4556818597684, 2.305, 23.70122448979592, 38809.11131616573);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 44257.51410219632, 2492.25006907532, 2.31, 23.706938775510203, 38069.17262125393);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 45256.44346970011, 2766.6761630649285, 2.235, 28.07183673469388, 40277.42842818351);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 44335.21101812868, 2896.8216039594313, 2.235, 26.482448979591837, 39392.47325721446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 44751.08637296655, 3001.3370607238144, 2.235, 26.082448979591838, 38142.76798192656);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 45588.716457954506, 3012.8052330896135, 2.225, 25.783673469387754, 41707.30423833578);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 45414.138287128524, 2490.611629237908, 2.245, 25.822857142857142, 39473.13726125615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 45604.08447211765, 3059.715905918662, 2.245, 23.548571428571428, 39473.13726125615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 43285.22673618124, 3255.281136997809, 2.205, 26.333877551020407, 38709.97585927335);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 42095.54014674968, 3215.7823719707976, 2.235, 25.813877551020408, 35607.200342493175);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 41825.179884160265, 2753.627677196114, 2.205, 23.53061224489796, 35327.0808704213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 45880.90694104494, 3178.485956741176, 2.105, 28.58122448979592, 40389.41355336734);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 45643.220137764256, 2766.1577278306668, 2.135, 27.05142857142857, 38504.23637627333);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 44949.38659791502, 2444.1928774074004, 2.15, 27.00734693877551, 38447.37964708965);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 46308.77009947575, 3407.232036311906, 2.125, 28.373061224489796, 39804.21579090086);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 45369.2986220688, 3075.6947455152385, 2.165, 26.866938775510203, 37995.03637017179);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 44661.122435543155, 3037.480786356067, 2.165, 25.43265306122449, 37696.96986040801);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 43799.492179734596, 3046.5749830260893, 2.17, 27.586938775510205, 39591.374947135904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 42550.02284621325, 2425.5655557690698, 2.155, 26.604897959183674, 38424.91330664066);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 42156.66278369535, 2464.6167926439452, 2.165, 26.345306122448978, 37876.02483895905);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 45640.94838878843, 2528.1279954392267, 2.12, 22.844897959183672, 41286.51999750334);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 45309.81368148592, 2595.9178269510912, 2.135, 20.347755102040818, 37441.52719913354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 44689.86447256235, 2340.3283286668484, 2.135, 20.86204081632653, 37441.52719913354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 43508.179309004394, 3218.289130570365, 2.02, 26.164897959183673, 39043.24354720053);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 43924.36052701988, 3919.77816117961, 2.025, 25.066938775510206, 38029.1561198118);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 42353.283642548435, 2308.9091496366964, 2.045, 24.020408163265305, 37798.21641254304);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 48431.03520281276, 2873.207069745499, 2.03, 23.697142857142858, 41211.26219565731);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 48608.12091364462, 3155.2953572005476, 2.03, 24.517551020408163, 41211.26219565731);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 47516.861463961584, 2905.4543186647425, 2.065, 25.335510204081633, 40626.893139596876);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 44812.102991001804, 2858.2796289963508, 2.03, 23.644081632653062, 40078.01498959102);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 44425.46382429171, 2490.7601521419388, 2.05, 23.685714285714287, 38928.41296380973);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 43789.566791929996, 2682.635743697742, 2.055, 19.73469387755102, 38036.85003630794);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 44896.56990416993, 2815.6353946204035, 2.04, 24.438367346938776, 39814.66548348958);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 42499.13028469439, 2246.427807138529, 2.08, 23.666938775510204, 38270.483259878645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 42263.33162523996, 2390.186178133009, 2.08, 23.793469387755103, 38270.483259878645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 45253.96318111455, 3511.87535911731, 2.035, 21.526530612244898, 39056.66935855612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 44627.99265281946, 3640.576144741694, 2.035, 21.151836734693877, 37932.04655349931);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 43869.487646410715, 3256.8407944936657, 2.035, 19.398367346938777, 37932.04655349931);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 45280.88262399671, 2512.012659013128, 1.99, 23.749387755102042, 39665.81347860078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 45415.28808499853, 2777.380724497563, 1.99, 24.599183673469387, 39665.81347860078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 43639.20361432687, 1984.1103190067333, 2.045, 24.256326530612245, 39196.7332310936);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 43097.99313134235, 3468.3326538620126, 2.03, 23.25387755102041, 38677.00250053375);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 43552.73330079969, 3749.1005127287713, 2.035, 22.17142857142857, 38278.21883702237);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 41919.628308775136, 2340.868037590167, 2.03, 20.864489795918367, 37175.65915272616);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 42864.128413128004, 2927.869940772924, 1.915, 22.172244897959185, 39924.978974176935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 42795.505734327606, 2821.8034665094224, 1.945, 22.06204081632653, 38969.02175616797);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 42946.7843734202, 3013.948413032422, 1.945, 19.60816326530612, 38969.02175616797);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 45266.0772887724, 2309.7313981144703, 1.965, 21.732244897959184, 40528.884694831766);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 43716.361376773726, 2042.465983559008, 1.99, 19.042448979591835, 39537.165535684064);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 43524.44369419763, 3293.7509204613325, 1.995, 18.146122448979593, 38925.84353336254);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 45414.22682295913, 2734.3937965999426, 1.925, 22.877551020408163, 40565.1741117539);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 45248.41793688662, 2244.9579744358743, 1.925, 20.955102040816328, 40565.1741117539);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 45410.5299110252, 2070.036977032915, 1.92, 19.626938775510204, 40428.510424026965);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 45081.62489488535, 2870.9664092430558, 1.865, 23.373061224489796, 39957.35731589236);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 45341.60444076975, 3412.7397261164438, 1.9, 21.12734693877551, 39491.30925141921);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 45760.85926172637, 3235.9667680933294, 1.88, 21.006530612244898, 39491.30925141921);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 45074.91095577476, 4232.009505642561, 1.88, 19.758367346938776, 39567.188132936855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 43170.660186823785, 3827.8633727406623, 1.855, 18.768979591836736, 37786.751848355845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 43703.45081334263, 3626.093358538489, 1.855, 18.94857142857143, 37786.751848355845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 41728.40461290121, 3107.9643795428324, 1.785, 18.437551020408165, 37781.39913769743);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 40797.487923554, 2217.455965329344, 1.8, 17.07265306122449, 37222.36836537968);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 41968.62330893729, 3631.75308855011, 1.81, 18.1265306122449, 36948.84587758723);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 44184.703732650094, 2715.5195633550225, 1.755, 19.350204081632654, 39753.823568125816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 42985.574554213126, 2699.503713577499, 1.775, 17.562448979591835, 38725.5253443771);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 42283.350619741694, 2423.8539612994714, 1.775, 15.798367346938775, 38725.5253443771);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 43173.17748565349, 2598.6079034067657, 1.785, 17.98857142857143, 39909.87016966875);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 42824.54022136511, 2357.4830218627076, 1.82, 16.42448979591837, 38455.870515050825);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 41897.7066253759, 2210.290035917393, 1.82, 16.57387755102041, 37333.377862524285);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 44114.11529137706, 2449.822552436544, 1.72, 18.293877551020408, 41200.8060043919);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 44905.058940285424, 3251.3802899225634, 1.755, 17.733061224489795, 40029.939553754346);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 44491.102421288284, 3458.3753921566386, 1.755, 16.94938775510204, 39185.894882220804);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 43669.082916698906, 2182.69701872716, 1.715, 18.8065306122449, 40384.232769904505);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 42975.47609986091, 3140.6379353525317, 1.725, 15.514285714285714, 38816.664955118824);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 43215.642557186016, 3227.345942187637, 1.725, 14.595918367346938, 38816.664955118824);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 42428.69764026982, 2704.186210589901, 1.645, 15.498775510204082, 39112.83868392838);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 42725.6387090969, 3563.240680658867, 1.65, 14.80326530612245, 38559.00442005493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 41741.94172366024, 2050.899491346882, 1.645, 14.662040816326531, 38443.356319252685);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 43807.531350275494, 2728.4886833238716, 1.665, 15.59673469387755, 39578.54144334028);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 43245.080240303774, 2538.272218635677, 1.675, 16.704489795918366, 38538.303077900746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 43056.68628273052, 2561.336986690713, 1.675, 16.84408163265306, 38538.303077900746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 44983.03913622403, 3691.509007247888, 1.69, 14.341224489795918, 40058.01815658485);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 45177.18462323623, 3361.397053997135, 1.695, 15.453061224489796, 38754.447829260615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 46199.534432871966, 3637.276749496832, 1.66, 14.386938775510204, 38171.4307274329);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 45934.43461428357, 4397.814468716685, 1.655, 16.926530612244896, 38811.42627654799);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 45727.71928541266, 4586.879138569137, 1.68, 15.774693877551021, 38613.03699683127);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 45985.00198395939, 4790.268569611025, 1.59, 14.074285714285715, 38613.03699683127);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 45821.800389824995, 2657.969882108283, 1.565, 16.540408163265305, 40195.02518802827);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 44635.913114143965, 2338.081477433166, 1.565, 15.733061224489797, 38976.726018926005);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 45289.554667437915, 2759.8557466651314, 1.565, 15.066122448979591, 38976.726018926005);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 46860.88591645748, 2049.484333838467, 1.48, 17.601632653061223, 42865.67587461336);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 47798.560098742724, 3009.9693400768165, 1.545, 16.826122448979593, 41195.08870616853);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 47659.463346541284, 3162.780381878379, 1.51, 15.8, 41102.54649496313);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 48180.87225205916, 3716.6374093353656, 1.52, 15.499591836734695, 42228.648096831625);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 46946.81375870884, 3318.0636659539737, 1.545, 12.682448979591836, 41359.952461377114);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 46295.68254477756, 3392.7190516225714, 1.525, 11.82857142857143, 40793.23361662206);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 47216.4720278162, 3513.7534398968724, 1.45, 14.448163265306123, 41054.071024234465);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 45746.40900746165, 4450.080971470055, 1.475, 13.50530612244898, 39801.23278017543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 46633.82667096429, 3995.9271354961807, 1.46, 14.234285714285715, 39452.19556521333);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 46063.133773520676, 3196.32512496337, 1.44, 15.72408163265306, 41370.77786122354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 45299.10204415237, 3748.391901078474, 1.465, 13.142040816326531, 39698.910995117796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 47123.44862176683, 3211.0884097637554, 1.465, 12.861224489795918, 39698.910995117796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 45998.67675459634, 2649.740391489297, 1.475, 14.160816326530613, 41598.9509083053);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 45376.731034327306, 2335.349124000826, 1.475, 14.584489795918367, 41598.9509083053);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 44530.2299148638, 2512.066408855121, 1.53, 13.914285714285715, 41213.773568141885);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 47224.58551058839, 2260.508727427462, 1.415, 15.851428571428572, 43603.13984328649);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 46310.819880513074, 1814.9559040233435, 1.465, 14.292244897959185, 42943.109970076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 46460.804444252535, 1722.2221480604114, 1.465, 13.82938775510204, 42943.109970076);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 44447.13088827652, 2765.4684782513646, 1.38, 12.037551020408163, 40826.0437517441);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 44604.82404970585, 3331.160278406366, 1.36, 11.166530612244898, 39845.866660437096);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 45242.58978698415, 4045.1406596997963, 1.335, 11.165714285714285, 39176.80175217892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 45548.66457597629, 3903.6467921668577, 1.36, 11.390204081632653, 40580.30668939441);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 44994.04667317944, 3368.2742270525746, 1.375, 12.866122448979592, 39986.69674606706);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 44454.64903779929, 3729.6258123144294, 1.39, 11.946938775510205, 39977.505724481256);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 45015.19254435347, 2988.062235050907, 1.355, 12.266938775510203, 41072.58751975719);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 45634.766003983765, 2946.1509950987975, 1.365, 11.75673469387755, 40886.151366570455);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 45804.73252644187, 2538.0646983795536, 1.34, 11.175510204081633, 40757.7902979911);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 44062.5990587853, 2954.0469154889006, 1.36, 8.991020408163266, 41251.304909168975);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 43770.84977853914, 2388.2905114497585, 1.36, 9.165714285714285, 41251.304909168975);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 43763.58948043298, 2530.9851574515583, 1.33, 8.619591836734694, 40696.89249457572);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 45820.49278911723, 2679.850754847507, 1.325, 10.337142857142856, 41397.87962219052);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 47344.44166170569, 3745.7112778219102, 1.34, 8.841632653061225, 41352.590620687406);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 46785.97190317194, 3618.616707581928, 1.34, 8.72408163265306, 41352.590620687406);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 45003.439603492094, 2272.57584933501, 1.26, 6.039183673469387, 40644.491486486644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 44576.77236724937, 1774.37275950229, 1.25, 4.569795918367347, 40458.39118497073);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 44389.16779050727, 1918.9440161540194, 1.255, 6.008979591836734, 39908.93566633018);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 46478.82724582191, 3365.2696389708444, 1.31, 11.050612244897959, 41552.046829974446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 46465.68102421563, 4370.822584254065, 1.29, 11.96408163265306, 39326.634575094606);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 45322.47074625086, 4341.627635885107, 1.27, 11.551836734693877, 39286.33019755165);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 43535.052994439604, 2644.121215188309, 1.245, 9.678367346938776, 38785.585354268216);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 44415.78580848566, 3499.719004642278, 1.25, 10.115102040816327, 38618.199670343885);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 43098.78691496199, 4268.624524609584, 1.25, 9.199183673469388, 38618.199670343885);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 43693.07134091657, 2796.0456506591745, 1.165, 9.077551020408164, 40684.7725391079);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 44138.69387608128, 3144.8631258659025, 1.18, 8.69061224489796, 40513.364887161035);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 43356.586631602135, 2873.489651521755, 1.18, 8.96, 40243.70896133177);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 45805.38076281345, 1730.5847096045677, 1.13, 8.933877551020409, 42181.55911616168);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 45845.41753059297, 2001.9640250436644, 1.145, 9.046530612244897, 40270.40097259386);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 44949.422539420266, 2254.826606692733, 1.15, 9.77061224489796, 39749.12001349016);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 42427.81691845815, 1203.6525949810484, 1.085, 8.575510204081633, 40365.64767285834);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 42671.574649896036, 1464.3972134244393, 1.085, 8.304489795918368, 40365.64767285834);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 42195.50711671815, 2048.6592565765504, 1.1, 7.533061224489796, 40113.4894465043);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 44939.51029359128, 3372.967124176476, 1.05, 6.641632653061224, 40279.138508963384);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 44365.94989601169, 2858.961314599046, 1.05, 6.169795918367347, 40279.138508963384);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 43642.8881755873, 3220.2328476273788, 1.05, 5.831836734693877, 40174.545956393784);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 46234.05378862435, 2286.9237401404494, 1.105, 7.858775510204081, 41928.98630186142);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 45568.553827869764, 2870.997008253694, 1.13, 6.603265306122449, 41729.244950179454);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 45326.223926046805, 3096.7516821125237, 1.115, 6.609795918367347, 41496.32082382129);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 43931.36826413394, 1727.8997380258945, 1.14, 9.69795918367347, 40874.48648698039);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 42763.781191260496, 1688.5285572762632, 1.125, 7.211428571428572, 40829.15188433779);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 42503.93427319898, 1496.3477835285366, 1.125, 6.005714285714285, 40829.15188433779);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 43888.27509464753, 1670.389653320831, 1.06, 6.708571428571428, 40387.4829893368);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 42344.22323188791, 1888.1241271873735, 1.06, 7.061224489795919, 40387.4829893368);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 41786.14302394043, 1478.677021428432, 1.06, 6.626122448979592, 40387.4829893368);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 43141.17342407731, 1560.845242807226, 1.065, 6.559183673469388, 41460.414582186175);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 42497.03129353675, 1325.2570871434823, 1.065, 5.589387755102041, 41460.414582186175);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 42042.15096555624, 816.2288879567328, 1.045, 4.266938775510204, 41218.92654191364);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 46876.346411986815, 2080.2523529312743, 1.085, 5.817142857142857, 42399.39537164205);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 43324.91108604379, 1529.1938531969868, 1.085, 1.8873469387755102, 42399.39537164205);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 43771.449407819855, 2554.6985312877564, 1.085, 2.471020408163265, 42399.39537164205);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 46710.063846156, 1186.1270639029694, 1.04, 3.623673469387755, 43379.14501688779);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 45441.35218918629, 991.7812853411909, 1.04, 3.060408163265306, 42991.6380153326);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 45604.05969451541, 1317.468893976403, 1.05, 3.4351020408163264, 42754.72307057901);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 42790.88180252893, 3021.6376349227107, 1.105, 4.332244897959184, 39964.2640057816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 42670.95894686346, 2874.603590016355, 1.105, 3.813061224489796, 39964.2640057816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 42013.44700313844, 2798.4312711602847, 1.105, 3.3053061224489797, 39964.2640057816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 41728.056819159945, 409.9833464313791, 1.105, 0.8522448979591837, 41587.738550551396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 41850.51749280497, 649.8527831498086, 1.105, 1.497142857142857, 41587.738550551396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 41759.15984561334, 460.43509089451686, 1.105, 0.9289795918367347, 41587.738550551396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 41119.85727697734, 471.426564414155, 0.96, 0.8048979591836735, 38825.76015760097);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 40935.062929200874, 714.4696358650815, 0.96, 0.64, 38825.76015760097);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 40834.91283784695, 832.760213351012, 0.96, 0.9812244897959184, 38825.76015760097);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 41538.02619005943, 320.70447650240874, 0.96, 1.2342857142857142, 40540.35089708887);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 41594.37348535676, 539.428549580355, 0.96, 1.4808163265306122, 40540.35089708887);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 41835.45292787605, 795.1061904681824, 0.96, 1.8089795918367346, 40540.35089708887);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 41835.10099723767, 874.9862743887753, 0.99, 1.4375510204081632, 41595.86636528511);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 41661.62113600167, 276.39287310688866, 0.975, 0.9469387755102041, 41580.47726368965);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 41706.72376659894, 355.26660411904686, 0.96, 0.8040816326530612, 41580.47726368965);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 44570.711693000485, 2337.201584578522, 0.96, 2.189387755102041, 42531.237593182035);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 44240.03901418189, 537.282480522266, 0.96, 1.336326530612245, 42531.237593182035);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 44096.447466243124, 477.5790395054539, 0.96, 2.217142857142857, 42531.237593182035);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 41785.41599587538, 200.6376003126061, 0.895, 0.3673469387755102, 41719.20896559573);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 41745.69177770761, 131.0559317286293, 0.895, 0.156734693877551, 41719.20896559573);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 41801.52595722522, 247.37583270395757, 0.86, 0.5657142857142857, 41200.56642749583);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 43259.967413632105, 319.85996528857794, 0.845, 0.5485714285714286, 41986.83170522213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 43313.99445036233, 259.108876241127, 0.845, 0.4310204081632653, 41986.83170522213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 43235.060585188934, 111.62934265874924, 0.845, 0.08, 41986.83170522213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 44581.99935649799, 2.939930839208568E-11, 0.84, 0.0, 44581.99935649796);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 44581.99935649799, 2.939930839208568E-11, 0.845, 0.0, 44474.90200789089);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 44577.71546255371, 21.199777044956043, 0.845, 0.156734693877551, 44474.90200789089);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 46396.04455460662, 127.16890128805218, 0.9, 0.7616326530612245, 46136.1130063324);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 46424.15739048075, 144.47634215520122, 0.9, 0.9567346938775511, 46136.1130063324);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 46415.14495437711, 185.83344713960614, 0.9, 1.0914285714285714, 46136.1130063324);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 47525.39126034722, 495.3794813012485, 0.815, 1.4220408163265306, 47098.386460241636);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 41420.06003506036, 148.89157399888816, 0.815, 1.5085714285714287, 41253.77589295193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 41390.3664382553, 149.49462050915733, 0.815, 1.5208163265306123, 41253.77589295193);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 42356.38349580373, 319.87911081507326, 0.795, 0.6163265306122448, 42230.68905270226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 42230.68905270222, 4.409896258812852E-11, 0.795, 0.0, 42230.68905270226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 42313.0291261362, 282.0636570046537, 0.795, 0.3004081632653061, 42230.68905270226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 41059.13004092943, 7.34982709802142E-12, 0.795, 0.0, 41059.130040929434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 41059.13004092943, 7.34982709802142E-12, 0.795, 0.0, 41059.130040929434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 41059.13004092943, 7.34982709802142E-12, 0.795, 0.0, 41059.130040929434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 41693.69090219084, 85.33887286776651, 0.795, 1.013877551020408, 41615.71830932508);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 41615.71830932511, 2.939930839208568E-11, 0.795, 0.0, 41615.71830932508);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 41615.71830932511, 2.939930839208568E-11, 0.795, 0.0, 41615.71830932508);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 41403.771768285485, 5.144878968614994E-11, 0.795, 0.0, 41403.77176828554);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 41403.771768285485, 5.144878968614994E-11, 0.795, 0.0, 41403.77176828554);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 41403.771768285485, 5.144878968614994E-11, 0.775, 0.0, 41403.77176828554);

        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(10000);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

}
