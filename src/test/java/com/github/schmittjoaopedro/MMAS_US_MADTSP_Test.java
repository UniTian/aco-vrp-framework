package com.github.schmittjoaopedro;

import com.github.schmittjoaopedro.algorithms.MMAS_US_MADTSP;
import com.github.schmittjoaopedro.graph.Vertex;
import com.github.schmittjoaopedro.tools.IterationStatistic;
import org.junit.Before;
import org.junit.Test;

import java.util.Locale;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_US_MADTSP_Test {

    private String kroA100;

    private String kroA200;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA200 = getClass().getClassLoader().getResource("tsp/KroA200.tsp").getFile();
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_10() {
        MMAS_US_MADTSP mmas_us_madtsp = new MMAS_US_MADTSP(kroA100, 0.8, 1000, 0.1, 10);
        mmas_us_madtsp.setMmasSeed(1);
        mmas_us_madtsp.setDbgpSeed(1);
        mmas_us_madtsp.setStatisticInterval(1);
        mmas_us_madtsp.setShowLog(false);
        mmas_us_madtsp.run();
        assertThat(mmas_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(23547.986365623736);
        assertThat(getTourString(mmas_us_madtsp)).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");

        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 0, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 0, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 0, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 0, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 0, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");

        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 27, 92, 66, 57, 50, 86, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 12, 32, 36, 4, 38, 29, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 89, 48, 5, 62, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 18, 74, 48, 5, 62, 89, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 39, 53, 63, 68, 80, 24, 86, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 18, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 74, 5, 48, 89, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 19, 56, 8, 6, 11, 54, 82, 33, 45, 28, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 46, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 91, 7, 41, 88, 79, 30, 55, 96, 3, 64, 25, 65, 69, 21, 15, 87, 93, 17, 78, 52, 18, 74, 5, 48, 89, 9, 83, 23, 37, 98, 35, 71, 20, 73, 58, 16, 14, 10, 31, 44, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 57, 66, 27, 92, 50, 86, 8, 6, 56, 19, 76, 59, 22, 97, 90, 46, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 52, 78, 83, 35, 98, 37, 23, 17, 93, 87, 15, 21, 69, 65, 25, 64, 3, 74, 5, 48, 89, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 46, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 52, 78, 83, 35, 98, 37, 23, 17, 93, 87, 15, 21, 69, 65, 25, 64, 3, 74, 62, 5, 48, 89, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 12, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 50, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 46, 71, 73, 58, 20, 14, 16, 10, 31, 97, 90, 44, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 4, 36, 75, 32, 12, 94, 81, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 50, 60, 57, 66, 92, 27, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 93, 21, 15, 87, 52, 78, 17, 23, 35, 98, 37, 83, 9, 89, 48, 5, 62, 46, 20, 71, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 19, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 81, 94, 75, 12, 32, 36, 4, 51, 77, 95, 29, 38, 84, 67, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 57, 66, 92, 27, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 5, 48, 62, 46, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 19, 11, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 4, 36, 81, 94, 75, 32, 12, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 8, 6, 56, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 15, 87, 93, 21, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 46, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 19, 56, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 72, 84, 67, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11, 6, 8, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 71, 73, 20, 58, 16, 14, 10, 31, 46, 90, 97, 44, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 86, 50, 57, 92, 27, 66, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 58, 73, 16, 14, 10, 31, 44, 97, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 32, 75, 12, 94, 81, 36, 4, 51, 77, 95, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 90, 46, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 93, 21, 15, 87, 52, 78, 17, 37, 23, 98, 35, 83, 9, 89, 48, 5, 62, 46, 71, 20, 73, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 92, 27, 66, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 46, 71, 20, 73, 58, 10, 16, 14, 31, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 77, 51, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 35, 98, 83, 9, 89, 5, 48, 62, 46, 71, 20, 73, 58, 14, 16, 10, 31, 90, 44, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 98, 35, 37, 46, 92, 27, 66, 57, 60, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 77, 95, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 83, 9, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 78, 52, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 70, 40, 99, 13, 2, 42, 28, 45, 33, 82, 54, 11, 6, 8, 56, 19, 26, 85, 34, 61, 76, 59, 22, 97, 44, 90, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 89, 48, 5, 62, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 90, 97, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 5, 48, 62, 92, 27, 66, 57, 60, 50, 24, 80, 68, 63, 53, 39, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 92, 27, 66, 57, 60, 50, 86, 80, 24, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 29, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 5, 48, 62, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 72, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 38, 67, 84, 29, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 46, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 83, 9, 89, 48, 5, 62, 46, 10, 16, 14, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 86, 24, 80, 68, 63, 39, 53, 1, 43, 72, 67, 84, 49, 81, 94, 12, 75, 32, 36, 4, 38, 29, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 82, 54, 6, 8, 50, 60, 57, 66, 27, 92, 46, 62, 5, 48, 89, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 5, 48, 62, 46, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 19, 11, 6, 8, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 54, 82, 56, 86, 50, 24, 80, 60, 57, 66, 27, 92, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 48, 5, 62, 46, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 75, 12, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 67, 84, 60, 57, 66, 92, 27, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 90, 97, 92, 27, 66, 57, 60, 80, 24, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 68, 63, 39, 53, 1, 43, 67, 84, 11, 19, 26, 85, 34, 61, 76, 59, 22, 44, 31, 46, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 58, 73, 10, 16, 14, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 86, 50, 60, 57, 66, 92, 27, 46, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 58, 14, 16, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 75, 32, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 80, 24, 86, 50, 60, 57, 66, 27, 92, 46, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 8, 6, 54, 82, 33, 45, 28, 42, 2, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 43, 49, 67, 84, 80, 24, 86, 50, 60, 57, 66, 27, 92, 46, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 53, 39, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 62, 89, 48, 5, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 68, 80, 24, 60, 50, 86, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 56, 19, 26, 11, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 14, 16, 10, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 40, 70, 99, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 5, 48, 89, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 86, 50, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 5, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 56, 19, 11, 26, 85, 34, 61, 59, 76, 97, 22, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 84, 67, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 28, 45, 33, 54, 82, 11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 42, 45, 28, 2, 13, 70, 40, 99, 47, 51, 95, 77, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 43, 49, 72, 68, 80, 24, 67, 84, 38, 29, 33, 82, 54, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 54, 82, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 43, 49, 72, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 33, 54, 26, 34, 85, 61, 76, 59, 22, 97, 90, 44, 31, 10, 16, 14, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 45, 28, 29, 38, 67, 84, 24, 80, 68, 72, 49, 43, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 2, 42, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 5, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 84, 67, 72, 80, 24, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 26, 85, 34, 61, 59, 76, 22, 97, 90, 31, 44, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 38, 84, 67, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 14, 16, 10, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 38, 84, 67, 24, 80, 68, 63, 39, 53, 1, 72, 49, 43, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 72, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 5, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 24, 80, 72, 67, 84, 38, 47, 99, 70, 40, 13, 2, 45, 42, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 39, 53, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 45, 42, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 42, 2, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 13, 47, 99, 70, 40, 2, 42, 45, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 84, 67, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 16, 14, 10, 58, 5, 48, 89, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 84, 67, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 34, 85, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 24, 80, 72, 49, 67, 84, 38, 47, 70, 40, 99, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 39, 53, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 42, 2, 45, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 14, 16, 10, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 76, 59, 22, 97, 44, 90, 31, 10, 14, 16, 58, 48, 89, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 24, 80, 67, 84, 38, 47, 70, 40, 99, 13, 2, 42, 45, 26, 85, 34, 61, 76, 59, 22, 44, 90, 97, 31, 10, 14, 16, 58, 5, 48, 89, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 84, 67, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 5, 89, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 24, 80, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 45, 42, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 45, 42, 26, 85, 34, 61, 59, 76, 97, 22, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 34, 85, 26, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 40, 70, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 42, 2, 45, 26, 85, 34, 61, 76, 59, 22, 44, 97, 90, 31, 10, 14, 16, 58, 48, 89, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 45, 42, 85, 26, 34, 61, 59, 76, 22, 97, 44, 90, 31, 10, 16, 14, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 89, 5, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 44, 90, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 14, 16, 10, 58, 89, 48, 62, 5, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 48, 89, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 48, 89, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 14, 16, 10, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 5, 48, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 48, 89, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");
        assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 73, 20, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 82, 54, 33, 28, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 80, 24, 67, 84, 38, 47, 99, 70, 40, 13, 2, 42, 45, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 89, 48, 5, 62, 0]");

        checkValues(mmas_us_madtsp, 1, 32015.743414647244, 2698.4582059349004, 0.0, 54.4065306122449, 22712.155756102817);
        checkValues(mmas_us_madtsp, 5, 27976.440598816742, 1571.0584098302982, 0.0, 13.562448979591837, 22712.155756102817);
        checkValues(mmas_us_madtsp, 10, 27812.832663829453, 1889.655512921118, 0.0, 10.374693877551021, 22712.155756102817);
        checkValues(mmas_us_madtsp, 11, 29114.72367107843, 1424.3667998114468, 0.485, 20.973061224489797, 22053.361032344394);
        checkValues(mmas_us_madtsp, 15, 24069.409742165717, 1969.3629594713273, 0.485, 5.784489795918367, 22053.361032344394);
        checkValues(mmas_us_madtsp, 20, 24343.64179995904, 1836.927438609726, 0.485, 8.030204081632654, 22053.361032344394);
        checkValues(mmas_us_madtsp, 21, 28429.498778456757, 2077.607614874625, 0.495, 16.15591836734694, 22397.97940082742);
        checkValues(mmas_us_madtsp, 25, 26198.61728774464, 2440.4888084389454, 0.495, 7.995918367346939, 22397.97940082742);
        checkValues(mmas_us_madtsp, 30, 25861.00900274171, 1918.5388339129277, 0.5, 8.506122448979593, 22352.97940082742);
        checkValues(mmas_us_madtsp, 31, 27943.433401885824, 1286.9531745317952, 0.52, 14.205714285714286, 23108.463050648472);
        checkValues(mmas_us_madtsp, 35, 24446.89099478231, 2028.2385157572985, 0.76, 7.204897959183674, 22239.04657417757);
        checkValues(mmas_us_madtsp, 40, 24554.910666381154, 2204.761107754884, 0.5, 6.768163265306122, 22221.365227990136);
        checkValues(mmas_us_madtsp, 41, 24663.038198841772, 2085.2929849557427, 0.5, 7.781224489795918, 22106.0);
        checkValues(mmas_us_madtsp, 45, 24573.67575999988, 2366.985547722363, 0.5, 6.44734693877551, 22106.0);
        checkValues(mmas_us_madtsp, 50, 23936.06410173937, 2012.8683105393352, 0.5, 5.329795918367347, 22106.0);
        checkValues(mmas_us_madtsp, 51, 26314.256330022137, 1795.8119192501338, 0.5, 9.121632653061225, 22441.80895454066);
        checkValues(mmas_us_madtsp, 55, 25856.258195140945, 2454.0993411441664, 0.5, 10.606530612244898, 22441.80895454066);
        checkValues(mmas_us_madtsp, 60, 26136.86320364296, 1976.463521690171, 0.5, 11.448163265306123, 22441.80895454066);
        checkValues(mmas_us_madtsp, 61, 30293.69290893797, 1766.3809493483875, 0.49, 22.97714285714286, 23075.731965971645);
        checkValues(mmas_us_madtsp, 65, 26603.565238841275, 1264.102656334987, 0.49, 11.655510204081633, 23075.731965971645);
        checkValues(mmas_us_madtsp, 70, 26608.373416867118, 1206.7434482430651, 0.49, 14.831836734693878, 23075.731965971645);
        checkValues(mmas_us_madtsp, 71, 26986.10887093463, 1577.7164211859, 0.51, 16.035102040816327, 22699.955168159144);
        checkValues(mmas_us_madtsp, 75, 28197.916413115756, 1142.943838307197, 0.51, 10.467755102040817, 22699.955168159144);
        checkValues(mmas_us_madtsp, 80, 27846.16173018849, 1510.7399330110948, 0.51, 7.775510204081633, 22699.955168159144);
        checkValues(mmas_us_madtsp, 81, 28938.748728918537, 1911.9019072318647, 0.5, 15.495510204081633, 22212.505117140365);
        checkValues(mmas_us_madtsp, 85, 25191.758110526152, 2713.3442005050906, 0.5, 8.202448979591837, 22212.505117140365);
        checkValues(mmas_us_madtsp, 90, 25430.386345837614, 2746.909005957312, 0.5, 8.335510204081633, 22212.505117140365);
        checkValues(mmas_us_madtsp, 91, 28045.852294597393, 1784.2942187048118, 0.495, 17.877551020408163, 22169.29284085561);
        checkValues(mmas_us_madtsp, 95, 24645.158838239582, 1921.2684326184558, 0.495, 10.282448979591837, 22169.29284085561);
        checkValues(mmas_us_madtsp, 100, 24510.03414799872, 1724.6965331743613, 0.5, 9.969795918367346, 22169.29284085561);
        checkValues(mmas_us_madtsp, 101, 27137.89874226222, 1881.1123499434386, 0.495, 20.400816326530613, 22184.685145793734);
        checkValues(mmas_us_madtsp, 105, 24101.389620289134, 2763.3973160512487, 0.495, 5.667755102040816, 22184.685145793734);
        checkValues(mmas_us_madtsp, 110, 23733.729830881886, 1676.559713048223, 0.495, 4.626122448979592, 22184.685145793734);
        checkValues(mmas_us_madtsp, 111, 27000.38465594093, 2349.820611403023, 0.495, 11.70530612244898, 22866.876299283045);
        checkValues(mmas_us_madtsp, 115, 26601.202232338583, 2496.9552255646076, 0.495, 10.296326530612244, 22866.876299283045);
        checkValues(mmas_us_madtsp, 120, 27643.765544479418, 2526.875566258907, 0.495, 15.588571428571429, 22866.876299283045);
        checkValues(mmas_us_madtsp, 121, 29180.683159060765, 2429.7298001294716, 0.52, 19.747755102040816, 21787.397107404235);
        checkValues(mmas_us_madtsp, 125, 24067.134595324205, 2594.773080828731, 0.52, 5.893877551020408, 21787.397107404235);
        checkValues(mmas_us_madtsp, 130, 23651.92020985572, 2024.6056677524384, 0.52, 6.28734693877551, 21787.397107404235);
        checkValues(mmas_us_madtsp, 131, 25914.492729743823, 1434.4303670023908, 0.495, 10.156734693877551, 21867.876357790807);
        checkValues(mmas_us_madtsp, 135, 23651.92660683966, 1948.032956799012, 0.495, 6.325714285714286, 21867.876357790807);
        checkValues(mmas_us_madtsp, 140, 23303.6780756876, 1545.3584838980028, 0.495, 4.642448979591837, 21867.876357790807);
        checkValues(mmas_us_madtsp, 141, 24344.895354373763, 1633.5394791420977, 0.5, 6.3730612244897955, 21816.89942637604);
        checkValues(mmas_us_madtsp, 145, 22608.386990675666, 1222.3635227258694, 0.5, 4.293877551020408, 21816.89942637604);
        checkValues(mmas_us_madtsp, 150, 23012.921322256854, 1686.2243760072456, 0.5, 3.869387755102041, 21816.89942637604);
        checkValues(mmas_us_madtsp, 151, 28065.798116613623, 1957.6216787672997, 0.49, 19.947755102040816, 22272.374204089774);
        checkValues(mmas_us_madtsp, 155, 24422.78594916685, 2189.757633462763, 0.83, 7.738775510204082, 21906.97756438411);
        checkValues(mmas_us_madtsp, 160, 24088.465257575474, 1896.366810277587, 0.83, 7.153469387755102, 21906.97756438411);
        checkValues(mmas_us_madtsp, 161, 26701.742111353426, 1444.642943585219, 0.495, 12.419591836734694, 22362.68308266974);
        checkValues(mmas_us_madtsp, 165, 23436.74076957677, 1347.6043701869871, 0.495, 3.8253061224489797, 22362.68308266974);
        checkValues(mmas_us_madtsp, 170, 25627.125299350246, 1605.6348038202086, 0.495, 8.446530612244898, 22281.68308266974);
        checkValues(mmas_us_madtsp, 171, 25238.78476764756, 1759.1664744748298, 0.505, 8.973877551020408, 21816.532299752154);
        checkValues(mmas_us_madtsp, 175, 23085.56919335961, 1773.1177368742333, 0.505, 5.74204081632653, 21816.532299752154);
        checkValues(mmas_us_madtsp, 180, 23702.987878333715, 2071.521734971945, 0.505, 5.342040816326531, 21816.532299752154);
        checkValues(mmas_us_madtsp, 181, 26489.300478704354, 1770.9817474287202, 0.49, 15.158367346938775, 22641.36213112615);
        checkValues(mmas_us_madtsp, 185, 24431.64127004305, 1755.0090208827862, 0.49, 10.566530612244899, 22641.36213112615);
        checkValues(mmas_us_madtsp, 190, 23969.104486842534, 1956.3413898052381, 0.49, 5.517551020408163, 22641.36213112615);
        checkValues(mmas_us_madtsp, 191, 24969.58394616401, 2200.3510603188956, 0.5, 8.146938775510204, 22015.417280458525);
        checkValues(mmas_us_madtsp, 195, 23182.086343557494, 1945.1141293100166, 0.5, 6.086530612244898, 22015.417280458525);
        checkValues(mmas_us_madtsp, 200, 23077.681866934527, 1735.7830901421696, 0.5, 5.57469387755102, 22015.417280458525);
        checkValues(mmas_us_madtsp, 201, 25202.03927352828, 2058.265698512071, 0.5, 9.892244897959184, 22533.91800441923);
        checkValues(mmas_us_madtsp, 205, 24245.617625910767, 1917.036260565294, 0.5, 7.45469387755102, 22533.91800441923);
        checkValues(mmas_us_madtsp, 210, 23349.24673198514, 1576.6917322686236, 0.5, 2.5583673469387755, 22533.91800441923);
        checkValues(mmas_us_madtsp, 211, 24523.726220536748, 1664.6836319156703, 0.5, 6.478367346938776, 22252.543428051347);
        checkValues(mmas_us_madtsp, 215, 23906.346468358915, 2006.413225244515, 0.5, 6.32, 22252.543428051347);
        checkValues(mmas_us_madtsp, 220, 24474.859267849974, 2456.188444643651, 0.5, 8.88326530612245, 22252.543428051347);
        checkValues(mmas_us_madtsp, 221, 26898.645391423455, 1192.6737377254306, 0.495, 12.82857142857143, 21986.03844426992);
        checkValues(mmas_us_madtsp, 225, 24442.088866021146, 1796.5704913569061, 0.495, 9.805714285714286, 21986.03844426992);
        checkValues(mmas_us_madtsp, 230, 24431.368616774693, 2125.973072707374, 0.495, 12.915102040816327, 21986.03844426992);
        checkValues(mmas_us_madtsp, 231, 24200.93096269063, 1670.1237440599075, 0.555, 7.060408163265306, 22359.510655874918);
        checkValues(mmas_us_madtsp, 235, 24481.65191136089, 1983.229136129547, 0.505, 9.248163265306122, 22311.510655874918);
        checkValues(mmas_us_madtsp, 240, 24186.485496945184, 1761.6297525425373, 0.505, 9.816326530612244, 22311.510655874918);
        checkValues(mmas_us_madtsp, 241, 27268.80110896025, 2354.992063686267, 0.495, 23.019591836734694, 21911.069932916656);
        checkValues(mmas_us_madtsp, 245, 23625.237935071247, 2180.856604104723, 0.495, 4.3363265306122445, 21911.069932916656);
        checkValues(mmas_us_madtsp, 250, 22982.619123491393, 1707.1033057397703, 0.495, 4.292244897959184, 21911.069932916656);
        checkValues(mmas_us_madtsp, 251, 27809.81666023161, 1860.5387838703807, 0.495, 12.51265306122449, 22246.123524462888);
        checkValues(mmas_us_madtsp, 255, 23071.388543235, 1287.384804433192, 0.495, 2.670204081632653, 22246.123524462888);
        checkValues(mmas_us_madtsp, 260, 23766.69699912097, 1877.383023790621, 0.495, 5.261224489795918, 22246.123524462888);
        checkValues(mmas_us_madtsp, 261, 24750.64230323375, 2097.6564307506646, 0.49, 8.245714285714286, 21959.71461303421);
        checkValues(mmas_us_madtsp, 265, 24331.64048577324, 933.3743903433218, 0.49, 8.177142857142858, 21959.71461303421);
        checkValues(mmas_us_madtsp, 270, 24222.37287939691, 1554.1665690356485, 0.49, 9.24, 21959.71461303421);
        checkValues(mmas_us_madtsp, 271, 23753.905786551913, 1308.6079727764732, 0.51, 3.5738775510204084, 22439.4061761603);
        checkValues(mmas_us_madtsp, 275, 23346.70204475981, 1456.5880795325613, 0.51, 4.318367346938776, 22439.4061761603);
        checkValues(mmas_us_madtsp, 280, 23204.330040101242, 1510.8857938685492, 0.51, 3.0220408163265304, 22439.4061761603);
        checkValues(mmas_us_madtsp, 281, 26092.708691471555, 1158.3882889725758, 0.49, 18.456326530612245, 22694.0);
        checkValues(mmas_us_madtsp, 285, 22742.857135572227, 1587.3334372672473, 0.645, 3.409795918367347, 21861.0);
        checkValues(mmas_us_madtsp, 290, 22888.15838723392, 1668.4361382285192, 0.645, 2.8677551020408165, 21861.0);
        checkValues(mmas_us_madtsp, 291, 25581.522077944115, 1180.8480793586766, 0.49, 5.748571428571428, 21985.63865341277);
        checkValues(mmas_us_madtsp, 295, 23546.861901893586, 1436.225290852616, 0.49, 2.1583673469387756, 21985.63865341277);
        checkValues(mmas_us_madtsp, 300, 23734.490179400902, 1742.347211346791, 0.5, 2.942857142857143, 21985.63865341277);
        checkValues(mmas_us_madtsp, 301, 24331.102243644822, 2318.3639374639783, 0.5, 3.696326530612245, 21882.90951807517);
        checkValues(mmas_us_madtsp, 305, 22859.251227103574, 1713.6285771148662, 0.5, 2.6783673469387757, 21882.90951807517);
        checkValues(mmas_us_madtsp, 310, 23070.67145703675, 1559.1533273970836, 0.5, 2.8310204081632655, 21882.90951807517);
        checkValues(mmas_us_madtsp, 311, 25090.317484977742, 1788.725006676513, 0.5, 6.8375510204081635, 21936.3196569012);
        checkValues(mmas_us_madtsp, 315, 23435.957586416604, 1969.9699541381337, 0.5, 4.815510204081632, 21936.3196569012);
        checkValues(mmas_us_madtsp, 320, 23228.863091895077, 1791.978451820055, 0.5, 3.5493877551020407, 21936.3196569012);
        checkValues(mmas_us_madtsp, 321, 27731.045183558646, 2338.4661836566197, 0.5, 11.670204081632653, 22441.27057120082);
        checkValues(mmas_us_madtsp, 325, 25490.864624691218, 2774.417759228922, 0.5, 6.151020408163265, 22441.27057120082);
        checkValues(mmas_us_madtsp, 330, 25174.460727931197, 2799.3754774568965, 0.5, 6.034285714285715, 22441.27057120082);
        checkValues(mmas_us_madtsp, 331, 26842.907858630348, 2072.516067977937, 0.495, 10.130612244897959, 22862.0);
        checkValues(mmas_us_madtsp, 335, 26309.002207761918, 1920.0196094226947, 0.495, 9.307755102040817, 22862.0);
        checkValues(mmas_us_madtsp, 340, 26087.918460833193, 1982.628912153002, 0.495, 7.535510204081633, 22862.0);
        checkValues(mmas_us_madtsp, 341, 28844.382730658013, 1148.547404521615, 0.49, 21.13469387755102, 23188.0);
        checkValues(mmas_us_madtsp, 345, 24813.21690719, 1861.138162876564, 0.49, 7.124081632653061, 23188.0);
        checkValues(mmas_us_madtsp, 350, 25445.78931436508, 1804.629228108737, 0.49, 8.66938775510204, 23188.0);
        checkValues(mmas_us_madtsp, 351, 27649.604787041004, 2393.7445547710477, 0.495, 11.500408163265305, 22920.042015408206);
        checkValues(mmas_us_madtsp, 355, 25390.951653127155, 2467.6538845078076, 0.495, 5.210612244897959, 22920.042015408206);
        checkValues(mmas_us_madtsp, 360, 25314.195367767297, 2117.092285307497, 0.495, 5.310204081632653, 22920.042015408206);
        checkValues(mmas_us_madtsp, 361, 28246.33967340292, 1931.1507629166244, 0.495, 13.117551020408163, 22587.754400459562);
        checkValues(mmas_us_madtsp, 365, 24430.847413494517, 1993.005858096351, 0.57, 5.8040816326530615, 22323.754400459562);
        checkValues(mmas_us_madtsp, 370, 23626.63424568197, 1614.5822186641649, 0.57, 4.723265306122449, 22323.754400459562);
        checkValues(mmas_us_madtsp, 371, 26801.85952175903, 1614.5539352100293, 0.495, 9.249795918367347, 22528.526220403084);
        checkValues(mmas_us_madtsp, 375, 23462.587501228787, 1692.0745685567847, 0.495, 2.1551020408163266, 22528.526220403084);
        checkValues(mmas_us_madtsp, 380, 23461.415306638773, 1966.0007720431915, 0.495, 1.9910204081632652, 22528.526220403084);
        checkValues(mmas_us_madtsp, 381, 23747.454956836948, 1615.4645953101658, 0.5, 2.742857142857143, 22536.80599304442);
        checkValues(mmas_us_madtsp, 385, 23564.423571229243, 1680.926460666081, 0.5, 2.2179591836734693, 22536.80599304442);
        checkValues(mmas_us_madtsp, 390, 23463.665836788532, 1342.0824447601099, 0.5, 2.6840816326530614, 22536.80599304442);
        checkValues(mmas_us_madtsp, 391, 28202.29207446692, 2077.3867405554197, 0.5, 7.384489795918367, 22998.599882547474);
        checkValues(mmas_us_madtsp, 395, 25611.00098176149, 1895.394588034092, 0.52, 10.13795918367347, 22893.599882547474);
        checkValues(mmas_us_madtsp, 400, 25664.977968548937, 1707.8698444735703, 0.5, 9.679183673469387, 22893.599882547474);
        checkValues(mmas_us_madtsp, 401, 26633.27907662955, 1757.5890926275101, 0.5, 12.346938775510203, 22580.301012511);
        checkValues(mmas_us_madtsp, 405, 25049.19981083361, 2062.061944381034, 0.5, 8.947755102040816, 22580.301012511);
        checkValues(mmas_us_madtsp, 410, 24958.95447358346, 2251.2232658068283, 0.5, 10.451428571428572, 22580.301012511);
        checkValues(mmas_us_madtsp, 411, 26976.74468627516, 1231.2909350834034, 0.495, 9.864489795918367, 22750.0);
        checkValues(mmas_us_madtsp, 415, 24588.39112100102, 1968.1281401763044, 0.495, 7.226122448979591, 22750.0);
        checkValues(mmas_us_madtsp, 420, 25217.273401455983, 1884.146103987029, 0.495, 8.979591836734693, 22750.0);
        checkValues(mmas_us_madtsp, 421, 26757.243465894684, 1008.1657615901466, 0.495, 11.748571428571429, 22688.0);
        checkValues(mmas_us_madtsp, 425, 25399.371997935086, 653.7635607289095, 0.495, 10.282448979591837, 22688.0);
        checkValues(mmas_us_madtsp, 430, 25252.04402721715, 1272.7191094638, 0.495, 3.249795918367347, 22688.0);
        checkValues(mmas_us_madtsp, 431, 26770.774073139484, 1018.8614737865655, 0.515, 9.01469387755102, 23357.174152120693);
        checkValues(mmas_us_madtsp, 435, 25641.584995736208, 1068.1676094392044, 0.515, 3.470204081632653, 23357.174152120693);
        checkValues(mmas_us_madtsp, 440, 25866.478650278215, 1002.3411678020975, 0.515, 3.155918367346939, 23357.174152120693);
        checkValues(mmas_us_madtsp, 441, 28391.28338328224, 1434.5068149140423, 0.48, 10.056326530612244, 23245.883224522677);
        checkValues(mmas_us_madtsp, 445, 26388.15054629941, 1318.240986919595, 0.48, 5.35265306122449, 23245.883224522677);
        checkValues(mmas_us_madtsp, 450, 26140.258976433506, 1465.898423545355, 0.48, 5.638367346938775, 23245.883224522677);
        checkValues(mmas_us_madtsp, 451, 28211.154911877642, 1440.1015813417043, 0.495, 11.435102040816327, 23441.680027484308);
        checkValues(mmas_us_madtsp, 455, 25958.572875710906, 1001.0909536516738, 0.495, 4.705306122448979, 23441.680027484308);
        checkValues(mmas_us_madtsp, 460, 25973.43600107164, 1226.481840865079, 0.495, 3.4971428571428573, 23441.680027484308);
        checkValues(mmas_us_madtsp, 461, 28583.46292642327, 1462.8547084951483, 0.485, 9.086530612244898, 23396.439891772352);
        checkValues(mmas_us_madtsp, 465, 24556.949454184392, 1876.055012301996, 0.485, 3.7012244897959183, 23396.439891772352);
        checkValues(mmas_us_madtsp, 470, 24178.632980356786, 1451.949683721167, 0.485, 3.6473469387755104, 23396.439891772352);
        checkValues(mmas_us_madtsp, 471, 26817.666709706493, 987.9702920690767, 0.495, 8.62122448979592, 23619.02043438278);
        checkValues(mmas_us_madtsp, 475, 24890.146908781506, 1672.5485125894231, 0.625, 8.4, 23575.02043438278);
        checkValues(mmas_us_madtsp, 480, 24238.80688643835, 1565.11060587393, 0.495, 2.939591836734694, 23376.285412714547);
        checkValues(mmas_us_madtsp, 481, 26437.73013539768, 705.6165071399729, 0.49, 5.8612244897959185, 23226.2854170226);
        checkValues(mmas_us_madtsp, 485, 25010.718602760186, 1704.2369296454633, 0.49, 8.85061224489796, 23226.2854170226);
        checkValues(mmas_us_madtsp, 490, 24728.312232763637, 1475.2458640201623, 0.49, 9.608979591836734, 23226.2854170226);
        checkValues(mmas_us_madtsp, 491, 25692.455788911488, 1632.463166801612, 0.5, 11.973877551020408, 23078.0);
        checkValues(mmas_us_madtsp, 495, 24153.20642498806, 1602.678876883453, 0.525, 2.8057142857142856, 23014.0);
        checkValues(mmas_us_madtsp, 500, 23937.222542821874, 1390.2033222885382, 0.5, 2.893061224489796, 23014.0);
        checkValues(mmas_us_madtsp, 501, 26065.796961195836, 1818.15484227364, 0.5, 4.979591836734694, 23282.88642286522);
        checkValues(mmas_us_madtsp, 505, 24075.737766091344, 1541.9458697854757, 0.5, 2.250612244897959, 23282.88642286522);
        checkValues(mmas_us_madtsp, 510, 23800.430417599528, 1118.023850173793, 0.5, 1.579591836734694, 23282.88642286522);
        checkValues(mmas_us_madtsp, 511, 25390.924325474436, 1283.3564328337259, 0.5, 3.911020408163265, 23506.922495717856);
        checkValues(mmas_us_madtsp, 515, 24055.175768829762, 1310.3232362906076, 0.5, 1.2857142857142858, 23506.922495717856);
        checkValues(mmas_us_madtsp, 520, 23816.78327548327, 1112.6141262001538, 0.5, 0.6334693877551021, 23506.922495717856);
        checkValues(mmas_us_madtsp, 521, 25636.280818265117, 2412.162136517313, 0.5, 4.18530612244898, 23341.669006022526);
        checkValues(mmas_us_madtsp, 525, 24311.298994443467, 1560.9183700331685, 0.5, 2.085714285714286, 23341.669006022526);
        checkValues(mmas_us_madtsp, 530, 23814.51173299626, 1249.4879064543034, 0.5, 1.0481632653061224, 23341.669006022526);
        checkValues(mmas_us_madtsp, 531, 25246.79343377311, 2062.170987119189, 0.5, 3.9518367346938774, 23283.0);
        checkValues(mmas_us_madtsp, 535, 23553.62912361363, 857.6285343189827, 0.5, 0.6702040816326531, 23283.0);
        checkValues(mmas_us_madtsp, 540, 23347.52, 425.4823068817166, 0.5, 0.28, 23283.0);
        checkValues(mmas_us_madtsp, 541, 23958.216676914777, 1024.320313519117, 0.5, 1.5110204081632652, 23308.981899336606);
        checkValues(mmas_us_madtsp, 545, 23738.029493883798, 1332.0999133051587, 0.5, 0.8228571428571428, 23308.981899336606);
        checkValues(mmas_us_madtsp, 550, 23586.229855897065, 897.9066465998937, 0.5, 0.986938775510204, 23308.981899336606);
        checkValues(mmas_us_madtsp, 551, 23632.663732029338, 951.0284377477522, 0.5, 1.0742857142857143, 23213.831485198138);
        checkValues(mmas_us_madtsp, 555, 23635.77279596447, 1202.9870931599291, 0.5, 1.2546938775510204, 23213.831485198138);
        checkValues(mmas_us_madtsp, 560, 23460.332292478102, 814.8381925661973, 0.5, 0.7804081632653062, 23213.831485198138);
        checkValues(mmas_us_madtsp, 561, 27237.871545850332, 2064.978329890527, 0.495, 4.40734693877551, 23696.222350666387);
        checkValues(mmas_us_madtsp, 565, 24103.537629510265, 1119.7969785622938, 0.495, 1.4424489795918367, 23696.222350666387);
        checkValues(mmas_us_madtsp, 570, 23953.19762456666, 913.2149753669775, 0.495, 0.830204081632653, 23696.222350666387);
        checkValues(mmas_us_madtsp, 571, 27102.858560776283, 1588.9282896081597, 0.49, 5.357551020408163, 23817.03986817809);
        checkValues(mmas_us_madtsp, 575, 24117.80009367954, 1219.6333554393257, 0.49, 0.7493877551020408, 23817.03986817809);
        checkValues(mmas_us_madtsp, 580, 24104.856899771028, 1035.1500919068162, 0.49, 1.2122448979591838, 23817.03986817809);
        checkValues(mmas_us_madtsp, 581, 26759.026761268335, 920.1656390600742, 0.495, 4.716734693877551, 23541.08719380043);
        checkValues(mmas_us_madtsp, 585, 24320.737302258323, 1466.6095508757335, 0.495, 1.483265306122449, 23541.08719380043);
        checkValues(mmas_us_madtsp, 590, 24570.955997744528, 1479.749385093134, 0.495, 2.4204081632653063, 23541.08719380043);
        checkValues(mmas_us_madtsp, 591, 26605.86748077407, 2009.0579877266964, 0.49, 8.504489795918367, 23489.97682823041);
        checkValues(mmas_us_madtsp, 595, 24081.73682823041, 1411.4129056389133, 0.49, 1.6016326530612246, 23489.97682823041);
        checkValues(mmas_us_madtsp, 600, 24276.792029652574, 1523.2072756868333, 0.5, 1.8775510204081634, 23489.97682823041);
        checkValues(mmas_us_madtsp, 601, 24385.934921837477, 1554.2602027992125, 0.5, 1.7346938775510203, 23276.94633550203);
        checkValues(mmas_us_madtsp, 605, 23356.866335502047, 426.901692071931, 0.5, 0.5110204081632653, 23276.94633550203);
        checkValues(mmas_us_madtsp, 610, 23294.507408792007, 81.74794186483764, 0.5, 0.32, 23276.94633550203);
        checkValues(mmas_us_madtsp, 611, 24317.00274039319, 1443.037005941098, 0.5, 1.96, 23268.0);
        checkValues(mmas_us_madtsp, 615, 23297.34, 194.89333660508066, 0.5, 0.2, 23268.0);
        checkValues(mmas_us_madtsp, 620, 23540.389297326627, 842.2238275594448, 0.5, 0.8628571428571429, 23268.0);
        checkValues(mmas_us_madtsp, 621, 24110.137095319402, 1485.0822548015376, 0.5, 1.6089795918367347, 23269.48085917213);
        checkValues(mmas_us_madtsp, 625, 23612.360324328343, 1123.7081649485235, 0.5, 0.8253061224489796, 23269.48085917213);
        checkValues(mmas_us_madtsp, 630, 23573.792007621814, 1122.065542638653, 0.5, 0.6342857142857142, 23269.48085917213);
        checkValues(mmas_us_madtsp, 631, 24179.553287128867, 1189.4240330654027, 0.5, 2.506938775510204, 23308.059699528367);
        checkValues(mmas_us_madtsp, 635, 23713.595946799633, 1199.5552016832514, 0.5, 0.976326530612245, 23308.059699528367);
        checkValues(mmas_us_madtsp, 640, 23492.720192006025, 842.2389680885116, 0.5, 0.746938775510204, 23308.059699528367);
        checkValues(mmas_us_madtsp, 641, 24354.7185818253, 884.8399325621874, 0.495, 4.004081632653061, 23525.0);
        checkValues(mmas_us_madtsp, 645, 23870.66, 468.8958202032533, 0.495, 1.4775510204081632, 23525.0);
        checkValues(mmas_us_madtsp, 650, 24077.21545961149, 1019.7636410102978, 0.495, 1.7910204081632652, 23525.0);
        checkValues(mmas_us_madtsp, 651, 27640.15026241621, 1709.9758541036065, 0.495, 5.005714285714285, 23806.261256143312);
        checkValues(mmas_us_madtsp, 655, 24138.74049651329, 958.1218071760914, 0.495, 1.2930612244897959, 23806.261256143312);
        checkValues(mmas_us_madtsp, 660, 24144.453945407848, 586.6618234322252, 0.495, 1.9493877551020409, 23806.261256143312);
        checkValues(mmas_us_madtsp, 661, 24576.58022886361, 624.9141531478124, 0.495, 2.849795918367347, 23637.0);
        checkValues(mmas_us_madtsp, 665, 23987.257008573088, 1096.8676911147527, 0.495, 1.4375510204081632, 23637.0);
        checkValues(mmas_us_madtsp, 670, 23762.69184408628, 366.2331954766489, 0.495, 1.213877551020408, 23637.0);
        checkValues(mmas_us_madtsp, 671, 24073.271047687263, 755.6094900959181, 0.5, 0.833469387755102, 23160.272237646936);
        checkValues(mmas_us_madtsp, 675, 23391.781348141063, 1028.2033998753027, 0.5, 0.7020408163265306, 23160.272237646936);
        checkValues(mmas_us_madtsp, 680, 23311.762369741868, 725.4299437094037, 0.5, 0.6375510204081632, 23160.272237646936);
        checkValues(mmas_us_madtsp, 681, 23714.1553198947, 1252.7226356960819, 0.5, 1.3518367346938776, 23155.26410878029);
        checkValues(mmas_us_madtsp, 685, 23277.527836533893, 491.87465735425684, 0.5, 0.7379591836734694, 23155.26410878029);
        checkValues(mmas_us_madtsp, 690, 23249.476625072617, 476.18034749680663, 0.5, 0.5493877551020409, 23155.26410878029);
        checkValues(mmas_us_madtsp, 691, 24060.011016994536, 1345.3866791471407, 0.5, 1.2710204081632652, 23404.572263694412);
        checkValues(mmas_us_madtsp, 695, 23691.589404104812, 1147.9968736572616, 0.5, 0.5085714285714286, 23404.572263694412);
        checkValues(mmas_us_madtsp, 700, 23816.557840839174, 1248.6827362235683, 0.5, 1.2048979591836735, 23404.572263694412);
        checkValues(mmas_us_madtsp, 701, 24007.411414365444, 1632.393401311961, 0.5, 1.2473469387755103, 23461.43888196403);
        checkValues(mmas_us_madtsp, 705, 23522.004711245172, 344.8171258283541, 0.5, 0.19918367346938776, 23461.43888196403);
        checkValues(mmas_us_madtsp, 710, 23645.378881964036, 913.9823248860354, 0.5, 0.3159183673469388, 23461.43888196403);
        checkValues(mmas_us_madtsp, 711, 26148.250900909883, 965.2759979231062, 0.495, 2.11265306122449, 23452.955742468297);
        checkValues(mmas_us_madtsp, 715, 23604.826661787556, 768.9284029150131, 0.495, 0.27918367346938777, 23452.955742468297);
        checkValues(mmas_us_madtsp, 720, 23696.59574246828, 1035.6791670893342, 0.495, 0.5093877551020408, 23452.955742468297);
        checkValues(mmas_us_madtsp, 721, 23744.775215487556, 1398.6776493008488, 0.5, 0.7502040816326531, 23222.922485418243);
        checkValues(mmas_us_madtsp, 725, 23299.68248541825, 424.00859444504755, 0.5, 0.6612244897959184, 23222.922485418243);
        checkValues(mmas_us_madtsp, 730, 23613.982824680334, 1582.1802277098066, 0.5, 0.553469387755102, 23222.922485418243);
        checkValues(mmas_us_madtsp, 731, 25979.53032872274, 1428.5417066349826, 0.495, 3.6220408163265305, 23457.713876347585);
        checkValues(mmas_us_madtsp, 735, 23727.033876347603, 1097.138680051572, 0.495, 0.4751020408163265, 23457.713876347585);
        checkValues(mmas_us_madtsp, 740, 23724.731554100243, 919.1368855821224, 0.495, 1.0220408163265307, 23457.713876347585);
        checkValues(mmas_us_madtsp, 741, 24564.360806101933, 1424.6342215124669, 0.495, 2.9404081632653063, 23211.44669353515);
        checkValues(mmas_us_madtsp, 745, 23368.326693535168, 726.4122245667398, 0.495, 0.7787755102040816, 23211.44669353515);
        checkValues(mmas_us_madtsp, 750, 23737.667793833105, 1481.3648706064434, 0.495, 0.7714285714285715, 23211.44669353515);
        checkValues(mmas_us_madtsp, 751, 24965.22220390244, 1900.1414861822916, 0.495, 2.8587755102040817, 23861.228238138694);
        checkValues(mmas_us_madtsp, 755, 23922.959176950433, 259.51464243980405, 0.495, 0.39346938775510204, 23861.228238138694);
        checkValues(mmas_us_madtsp, 760, 24090.420120950617, 712.4362709192977, 0.495, 1.0220408163265307, 23861.228238138694);
        checkValues(mmas_us_madtsp, 761, 24484.71234026589, 813.1534875688135, 0.495, 3.986938775510204, 23332.216402619455);
        checkValues(mmas_us_madtsp, 765, 23502.796402619464, 484.6398237614305, 0.495, 0.68, 23332.216402619455);
        checkValues(mmas_us_madtsp, 770, 23646.556402619462, 644.0601001871339, 0.495, 1.0914285714285714, 23332.216402619455);
        checkValues(mmas_us_madtsp, 771, 23778.257304432907, 757.1910945548049, 0.5, 1.1551020408163266, 23292.107344664917);
        checkValues(mmas_us_madtsp, 775, 23309.227344664894, 93.09587772280574, 0.5, 0.24, 23292.107344664917);
        checkValues(mmas_us_madtsp, 780, 23292.107344664895, 2.204948129406426E-11, 0.5, 0.0, 23292.107344664917);
        checkValues(mmas_us_madtsp, 781, 26133.22730392562, 1371.896749134346, 0.5, 3.31265306122449, 23489.015831071185);
        checkValues(mmas_us_madtsp, 785, 23726.166696612505, 503.10045025079705, 0.5, 1.0163265306122449, 23489.015831071185);
        checkValues(mmas_us_madtsp, 790, 23797.675831071185, 555.1728765503075, 0.5, 1.2236734693877551, 23489.015831071185);
        checkValues(mmas_us_madtsp, 791, 24577.02485107324, 1079.2118917799874, 0.5, 1.606530612244898, 23310.36810587724);
        checkValues(mmas_us_madtsp, 795, 23310.36810587722, 2.204948129406426E-11, 0.5, 0.0, 23310.36810587724);
        checkValues(mmas_us_madtsp, 800, 23352.268105877218, 227.84905941774485, 0.5, 0.23918367346938776, 23310.36810587724);
        checkValues(mmas_us_madtsp, 801, 23656.450896592807, 541.3310951356527, 0.5, 1.2938775510204081, 23452.08018207253);
        checkValues(mmas_us_madtsp, 805, 23484.302642984538, 196.86461996584416, 0.5, 0.2, 23452.08018207253);
        checkValues(mmas_us_madtsp, 810, 23452.080182072503, 2.572439484307497E-11, 0.5, 0.0, 23452.08018207253);
        checkValues(mmas_us_madtsp, 811, 23382.209504533144, 1.9798989873223314, 0.5, 0.08, 23368.489504533158);
        checkValues(mmas_us_madtsp, 815, 23374.889504533145, 45.254833995939045, 0.5, 0.08, 23368.489504533158);
        checkValues(mmas_us_madtsp, 820, 23368.489504533143, 1.469965419604284E-11, 0.5, 0.0, 23368.489504533158);
        checkValues(mmas_us_madtsp, 821, 23941.92884442954, 329.94852938545694, 0.5, 1.3983673469387754, 23568.043374424975);
        checkValues(mmas_us_madtsp, 825, 23573.263374425005, 36.910973977937786, 0.5, 0.16, 23568.043374424975);
        checkValues(mmas_us_madtsp, 830, 23568.043374425004, 2.939930839208568E-11, 0.5, 0.0, 23568.043374424975);
        checkValues(mmas_us_madtsp, 831, 23671.167238308677, 240.01319307342038, 0.5, 0.4359183673469388, 23534.408304086657);
        checkValues(mmas_us_madtsp, 835, 23561.82830408666, 193.88867940135137, 0.5, 0.12, 23534.408304086657);
        checkValues(mmas_us_madtsp, 840, 23541.34830408666, 49.073210614346394, 0.5, 0.08, 23534.408304086657);
        checkValues(mmas_us_madtsp, 841, 23616.75297872433, 81.1305379257537, 0.5, 0.2, 23508.192930264755);
        checkValues(mmas_us_madtsp, 845, 23602.804793235497, 379.9154945071866, 0.5, 0.35346938775510206, 23508.192930264755);
        checkValues(mmas_us_madtsp, 850, 23649.316656206232, 460.21088535649574, 0.5, 0.5273469387755102, 23508.192930264755);
        checkValues(mmas_us_madtsp, 851, 23593.529504533144, 407.81893541329424, 0.5, 0.6244897959183674, 23448.489504533158);
        checkValues(mmas_us_madtsp, 855, 23453.869504533144, 38.04234482783621, 0.5, 0.08, 23448.489504533158);
        checkValues(mmas_us_madtsp, 860, 23460.089504533145, 82.0243866176395, 0.5, 0.12, 23448.489504533158);
        checkValues(mmas_us_madtsp, 861, 23837.830232373228, 343.7281876612656, 0.5, 0.689795918367347, 23581.80709899292);
        checkValues(mmas_us_madtsp, 865, 23628.977404680856, 235.41168472311628, 0.5, 0.23918367346938776, 23581.80709899292);
        checkValues(mmas_us_madtsp, 870, 23615.141933538613, 193.08499152603525, 0.5, 0.23918367346938776, 23581.80709899292);
        checkValues(mmas_us_madtsp, 871, 24335.553479123646, 761.4157163826624, 0.5, 1.2595918367346939, 23892.50622706699);
        checkValues(mmas_us_madtsp, 875, 24005.41954177925, 331.56952198999534, 0.5, 0.28, 23892.50622706699);
        checkValues(mmas_us_madtsp, 880, 23955.601707842663, 0.6066070756554746, 0.5, 0.12, 23892.50622706699);
        checkValues(mmas_us_madtsp, 881, 23997.64950453314, 133.8749584119297, 0.495, 2.09469387755102, 23722.489504533158);
        checkValues(mmas_us_madtsp, 885, 23852.40950453314, 119.73914504932313, 0.495, 0.8228571428571428, 23722.489504533158);
        checkValues(mmas_us_madtsp, 890, 23789.669504533143, 52.31446906420234, 0.495, 0.31020408163265306, 23722.489504533158);
        checkValues(mmas_us_madtsp, 891, 24077.589507425208, 47.41299695320247, 0.5, 1.1306122448979592, 23780.45194455817);
        checkValues(mmas_us_madtsp, 895, 23789.51583183542, 0.45175126968972257, 0.5, 0.08, 23780.45194455817);
        checkValues(mmas_us_madtsp, 900, 23796.51583183542, 49.490316263088296, 0.5, 0.16, 23780.45194455817);
        checkValues(mmas_us_madtsp, 901, 24045.016264338494, 296.17447390429453, 0.495, 2.1322448979591835, 23547.986365623736);
        checkValues(mmas_us_madtsp, 905, 23547.98636562375, 1.469965419604284E-11, 0.495, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 910, 23548.26636562375, 1.9798989873223316, 0.495, 0.08, 23547.986365623736);
        checkValues(mmas_us_madtsp, 911, 23745.385535956648, 5.604979810057404, 0.5, 0.12, 23706.54500748201);
        checkValues(mmas_us_madtsp, 915, 23711.973834644854, 38.38760500729998, 0.5, 0.08, 23706.54500748201);
        checkValues(mmas_us_madtsp, 920, 23706.54500748202, 7.34982709802142E-12, 0.5, 0.0, 23706.54500748201);
        checkValues(mmas_us_madtsp, 921, 23962.89549768701, 98.25948895696008, 0.5, 0.8718367346938776, 23633.986365623736);
        checkValues(mmas_us_madtsp, 925, 23663.96636562375, 211.99061299972706, 0.5, 0.16, 23633.986365623736);
        checkValues(mmas_us_madtsp, 930, 23634.26636562375, 1.9798989873223316, 0.5, 0.08, 23633.986365623736);
        checkValues(mmas_us_madtsp, 931, 23632.26636562375, 12.162236636408622, 0.5, 0.08, 23547.986365623736);
        checkValues(mmas_us_madtsp, 935, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 940, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 941, 23594.523624952086, 7.34982709802142E-12, 0.5, 0.0, 23594.523624952093);
        checkValues(mmas_us_madtsp, 945, 23594.523624952086, 7.34982709802142E-12, 0.5, 0.0, 23594.523624952093);
        checkValues(mmas_us_madtsp, 950, 23594.523624952086, 7.34982709802142E-12, 0.5, 0.0, 23594.523624952093);
        checkValues(mmas_us_madtsp, 951, 24057.431872833997, 74.64522438785102, 0.495, 1.8016326530612246, 23807.986365623736);
        checkValues(mmas_us_madtsp, 955, 23930.85721703463, 79.54331800442294, 0.495, 1.413061224489796, 23807.986365623736);
        checkValues(mmas_us_madtsp, 960, 23896.534463429518, 60.01610200976478, 0.495, 0.8865306122448979, 23807.986365623736);
        checkValues(mmas_us_madtsp, 961, 23869.286365623753, 52.58161780139747, 0.5, 0.9314285714285714, 23547.986365623736);
        checkValues(mmas_us_madtsp, 965, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 970, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 971, 23645.34484330701, 32.12884289874501, 0.5, 0.08, 23640.801138769937);
        checkValues(mmas_us_madtsp, 975, 23640.801138769937, 0.0, 0.5, 0.0, 23640.801138769937);
        checkValues(mmas_us_madtsp, 980, 23640.801138769937, 0.0, 0.5, 0.0, 23640.801138769937);
        checkValues(mmas_us_madtsp, 981, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 985, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 990, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 991, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 995, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);
        checkValues(mmas_us_madtsp, 1000, 23547.98636562375, 1.469965419604284E-11, 0.5, 0.0, 23547.986365623736);

        assertThat(mmas_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Execution")).isLessThan(15000);
        assertThat(mmas_us_madtsp.getGlobalStatistics().getTimeStatistics().get("MMAS Initialization")).isLessThan(150);
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_100() {
        MMAS_US_MADTSP mmas_us_madtsp = new MMAS_US_MADTSP(kroA100, 0.8, 1000, 0.1, 100);
        mmas_us_madtsp.setMmasSeed(1);
        mmas_us_madtsp.setDbgpSeed(1);
        mmas_us_madtsp.setStatisticInterval(1);
        mmas_us_madtsp.setShowLog(false);
        mmas_us_madtsp.run();
        assertThat(mmas_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(22295.972074659356);
        assertThat(getTourString(mmas_us_madtsp)).isEqualTo("[0, 27, 92, 66, 57, 50, 86, 60, 24, 80, 68, 63, 39, 53, 1, 49, 84, 67, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11, 6, 8, 56, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 9, 83, 35, 98, 23, 37, 17, 93, 87, 15, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 52, 78, 89, 48, 5, 62, 46, 0]");

    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_5_freq_10() {
        MMAS_US_MADTSP mmas_us_madtsp = new MMAS_US_MADTSP(kroA100, 0.8, 1000, 0.5, 10);
        mmas_us_madtsp.setMmasSeed(1);
        mmas_us_madtsp.setDbgpSeed(1);
        mmas_us_madtsp.setStatisticInterval(1);
        mmas_us_madtsp.setShowLog(false);
        mmas_us_madtsp.run();
        assertThat(mmas_us_madtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(32716.363944932156);
        assertThat(getTourString(mmas_us_madtsp)).isEqualTo("[0, 22, 44, 31, 10, 14, 16, 46, 97, 90, 59, 76, 61, 34, 26, 85, 11, 19, 86, 56, 8, 6, 50, 60, 80, 24, 68, 49, 43, 1, 53, 39, 63, 72, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 77, 95, 51, 47, 99, 40, 70, 13, 2, 28, 33, 82, 54, 45, 42, 57, 92, 27, 66, 7, 41, 91, 74, 48, 89, 9, 83, 35, 78, 52, 17, 37, 23, 98, 73, 58, 20, 71, 93, 21, 15, 87, 69, 65, 64, 25, 30, 88, 55, 79, 3, 96, 18, 5, 62, 0]");

    }

    private void printRoutes(MMAS_US_MADTSP mmas_us_madtsp) {
        for (IterationStatistic iter : mmas_us_madtsp.getIterationStatistics()) {
            if ((iter.getIteration() - 1) == 0 || (iter.getIteration() - 1) % 10 == 0 || iter.getIteration() == mmas_us_madtsp.getIterationStatistics().size())
                System.out.println(
                        "assertThat(getTourString(mmas_us_madtsp.getIterationStatistics().get(" + ((int) iter.getIteration() - 1) +
                                ").getTour())).isEqualTo(\"" +
                                getTourString(mmas_us_madtsp.getIterationStatistics().get((int) iter.getIteration() - 1).getTour()) +
                                "\");"
                );
        }
    }

    private void printTest10(MMAS_US_MADTSP mmas_us_madtsp) {
        for (IterationStatistic iter : mmas_us_madtsp.getIterationStatistics()) {
            if (iter.getIteration() % 10 == 0 || (iter.getIteration() - 1) % 10 == 0 || (iter.getIteration() - 5) % 10 == 0)
                System.out.println(
                        "checkValues(mmas_us_madtsp, " +
                                ((int) iter.getIteration()) + ", " +
                                iter.getIterationMean() + ", " +
                                iter.getIterationSd() + ", " +
                                iter.getBranchFactor() + ", " +
                                iter.getDiversity() + ", " +
                                iter.getBestSoFar() + ");"
                );
        }
    }

    private void printTest100(MMAS_US_MADTSP mmas_us_madtsp) {
        for (IterationStatistic iter : mmas_us_madtsp.getIterationStatistics()) {
            if (iter.getIteration() % 100 == 0 || (iter.getIteration() - 1) % 100 == 0 || (iter.getIteration() - 50) % 100 == 0)
                System.out.println(
                        "checkValues(mmas_us_madtsp, " +
                                ((int) iter.getIteration()) + ", " +
                                iter.getIterationMean() + ", " +
                                iter.getIterationSd() + ", " +
                                iter.getBranchFactor() + ", " +
                                iter.getDiversity() + ", " +
                                iter.getBestSoFar() + ");"
                );
        }
    }

    private void checkValues(MMAS_US_MADTSP mmas_us_madtsp, int iteration, double mean, double sd, double branchFactor, double div, double bsf) {
        assertThat(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getIteration()).isEqualTo(iteration);
        assertThat(round(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getIterationMean())).isEqualTo(round(mean));
        assertThat(round(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getIterationSd())).isEqualTo(round(sd));
        assertThat(round(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getBranchFactor())).isEqualTo(round(branchFactor));
        assertThat(round(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getDiversity())).isEqualTo(round(div));
        assertThat(round(mmas_us_madtsp.getIterationStatistics().get(iteration - 1).getBestSoFar())).isEqualTo(round(bsf));
    }

    private String getTourString(int[] tourAnt) {
        StringBuilder tour = new StringBuilder("[");
        for (int vertex : tourAnt) {
            tour.append(vertex).append(", ");
        }
        tour.delete(tour.length() - 2, tour.length()).append("]");
        return tour.toString();
    }

    private String getTourString(MMAS_US_MADTSP mmas_us_madtsp) {
        StringBuilder tour = new StringBuilder("[");
        for (Vertex vertex : mmas_us_madtsp.getGlobalStatistics().getBestRoute()) {
            tour.append(vertex.getId()).append(", ");
        }
        tour.delete(tour.length() - 2, tour.length()).append("]");
        return tour.toString();
    }

    private double round(double value) {
        return Double.valueOf(String.format(Locale.US, "%.2f", value));
    }
}
