package com.github.schmittjoaopedro.rinsim;

import com.github.rinde.rinsim.pdptw.common.StatisticsDTO;
import com.github.schmittjoaopedro.rinsim.dvrptwacs.RINSIM_ACS_DVRPTW;
import com.github.schmittjoaopedro.vrp.dvrptw.DVRPTW_ACS_Test;
import com.github.schmittjoaopedro.vrp.dvrptwacs.LoggerOutput;
import org.junit.Test;

import java.io.File;
import java.net.URISyntaxException;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class RINSIM_ACS_DVRPTW_Test {

    private static String rootDirectory;

    static {
        try {
            rootDirectory = Paths.get(DVRPTW_ACS_Test.class.getClassLoader().getResource("dvrptw").toURI()).toString();
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r103_0_1_test() throws Exception {
        File file = Paths.get(rootDirectory, "r103-0.1.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r103-0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 97 are a-priori known (available nodes excluding the depot) and 3 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.43478260869565216");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 576.5586588877334 (scalled value = 1326.0849154417867); Number of vehicles used: 14");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=562.5376010977425 (scalled value = 1293.8364825248077)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=560.1327697937832 (scalled value = 1288.3053705257014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=541.0653625954865 (scalled value = 1244.450333969619)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 11 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=570.2314666498314 (scalled value = 1311.5323732946124)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=569.1183542719467 (scalled value = 1308.9722148254775)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=560.6605711416032 (scalled value = 1289.5193136256873)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=566.3952447434705 (scalled value = 1302.709062909982)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=544.9207194427544 (scalled value = 1253.317654718335)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=539.8254035768805 (scalled value = 1241.5984282268253)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=561.9950536359795 (scalled value = 1292.588623362753)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=552.03983112901 (scalled value = 1269.691611596723)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.0637974965097 (scalled value = 1265.1467342419724)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=14 total tours length=561.6958560453328 (scalled value = 1291.9004689042654)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=560.6126550340819 (scalled value = 1289.4091065783882)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=556.1009040362512 (scalled value = 1279.032079283378)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=555.0428414576861 (scalled value = 1276.598535352678)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.9951576454781 (scalled value = 1276.4888625845997)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.4593046282453 (scalled value = 1275.256400644964)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.0709380594851 (scalled value = 1274.3631575368158)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.1378687174846 (scalled value = 1265.3170980502146)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.0901849052761 (scalled value = 1265.207425282135)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=14 total tours length=550.0901849052761 (scalled value = 1265.207425282135)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 76 79 3 29 68 24 80 12 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 40 53 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 95 42 43 87 97 37 98 100 59 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 27 69 88 8 46 47 48 82 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 31 62 11 63 10 90 32 70 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 50 33 30 9 66 20 51 1 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 94 96 5 84 17 60 89 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 18 45 83 99 6 13 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 2 57 15 41 75 56 4 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 73 22 74 72 21 58 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 92 91 14 44 38 86 16 61 85 93 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 36 64 49 19 7 52 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 26 39 23 67 55 25 54 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 71 65 78 34 35 81 77 28 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 970");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9700");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 76 	TimeWindow = [ 32 , 36 ]	BeginService =  31.74	CurrentTime = 33 	Route = *76 , 79 , 29 , 24 , 68 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 79 	TimeWindow = [ 40 , 44 ]	BeginService =  40.43	CurrentTime = 41 	Route = *76*,*79 ,  3 , 29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 3  	TimeWindow = [  0 , 86 ]	BeginService =  46.35	CurrentTime = 47 	Route = *76*,*79*,* 3 , 29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 29 	TimeWindow = [  0 , 83 ]	BeginService =  54.82	CurrentTime = 56 	Route = *76*,*79*,* 3*,*29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 68 	TimeWindow = [ 62 , 66 ]	BeginService =  62.89	CurrentTime = 64 	Route = *76*,*79*,* 3*,*29*,*68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [  0 , 83 ]	BeginService =  71.52	CurrentTime = 73 	Route = *76*,*79*,* 3*,*29*,*68*,*24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 79 , 83 ]	BeginService =  79.87	CurrentTime = 81 	Route = *76*,*79*,* 3*,*29*,*68*,*24*,*80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 12 	TimeWindow = [  0 , 89 ]	BeginService =  86.97	CurrentTime = 88 	Route = *76*,*79*,* 3*,*29*,*68*,*24*,*80*,*12 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 40 	TimeWindow = [ 37 , 41 ]	BeginService =  36.96	CurrentTime = 38 	Route = *40 , 53 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 53 	TimeWindow = [ 41 , 46 ]	BeginService =  44.22	CurrentTime = 45 	Route = *40*,*53 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 95 	TimeWindow = [  0 , 89 ]	BeginService =   6.46	CurrentTime = 7  	Route = *95 , 42 , 43 , 38 , 86 , 16 , 61 ,  5 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 42 	TimeWindow = [ 13 , 18 ]	BeginService =  16.05	CurrentTime = 17 	Route = *95*,*42 , 43 , 38 , 86 , 16 , 61 ,  5 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [  0 , 80 ]	BeginService =  24.33	CurrentTime = 25 	Route = *95*,*42*,*43 , 87 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 87 	TimeWindow = [ 40 , 45 ]	BeginService =  40.43	CurrentTime = 41 	Route = *95*,*42*,*43*,*87 , 97 , 59 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [  0 , 88 ]	BeginService =  46.63	CurrentTime = 48 	Route = *95*,*42*,*43*,*87*,*97 , 37 , 98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [  0 , 86 ]	BeginService =  53.19	CurrentTime = 54 	Route = *95*,*42*,*43*,*87*,*97*,*37 , 98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 98 	TimeWindow = [  0 , 86 ]	BeginService =  58.15	CurrentTime = 59 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 100	TimeWindow = [ 80 , 85 ]	BeginService =  80.43	CurrentTime = 81 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98*,*100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 59 	TimeWindow = [  0 , 88 ]	BeginService =  87.70	CurrentTime = 89 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98*,*100*,*59 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 27 	TimeWindow = [ 16 , 20 ]	BeginService =  16.09	CurrentTime = 17 	Route = *27 , 69 , 88 ,  8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 69 	TimeWindow = [ 22 , 26 ]	BeginService =  23.60	CurrentTime = 25 	Route = *27*,*69 , 88 ,  8 , 46 , 47 , 48 , 82 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 88 	TimeWindow = [ 32 , 37 ]	BeginService =  33.20	CurrentTime = 34 	Route = *27*,*69*,*88 ,  8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 41 , 46 ]	BeginService =  45.53	CurrentTime = 47 	Route = *27*,*69*,*88*,* 8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [  0 , 80 ]	BeginService =  53.98	CurrentTime = 55 	Route = *27*,*69*,*88*,* 8*,*46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 47 	TimeWindow = [  0 , 80 ]	BeginService =  62.68	CurrentTime = 64 	Route = *27*,*69*,*88*,* 8*,*46*,*47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [  0 , 83 ]	BeginService =  69.81	CurrentTime = 71 	Route = *27*,*69*,*88*,* 8*,*46*,*47*,*48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 82 	TimeWindow = [  0 , 85 ]	BeginService =  76.50	CurrentTime = 77 	Route = *27*,*69*,*88*,* 8*,*46*,*47*,*48*,*82 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 31 	TimeWindow = [  0 , 88 ]	BeginService =   7.59	CurrentTime = 9  	Route = *31 , 62 , 11 , 63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 62 	TimeWindow = [ 25 , 30 ]	BeginService =  25.22	CurrentTime = 26 	Route = *31*,*62 , 11 , 63 , 10 , 32 , 90 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 11 	TimeWindow = [ 29 , 33 ]	BeginService =  33.07	CurrentTime = 34 	Route = *31*,*62*,*11 , 63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 63 	TimeWindow = [  0 , 80 ]	BeginService =  40.92	CurrentTime = 42 	Route = *31*,*62*,*11*,*63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 10 	TimeWindow = [ 54 , 58 ]	BeginService =  53.91	CurrentTime = 55 	Route = *31*,*62*,*11*,*63*,*10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 90 	TimeWindow = [  0 , 81 ]	BeginService =  61.34	CurrentTime = 62 	Route = *31*,*62*,*11*,*63*,*10*,*90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 32 	TimeWindow = [  0 , 81 ]	BeginService =  67.63	CurrentTime = 69 	Route = *31*,*62*,*11*,*63*,*10*,*90*,*32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 70 	TimeWindow = [ 79 , 83 ]	BeginService =  79.13	CurrentTime = 80 	Route = *31*,*62*,*11*,*63*,*10*,*90*,*32*,*70 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 50 	TimeWindow = [  0 , 88 ]	BeginService =   7.38	CurrentTime = 8  	Route = *50 , 33 , 81 , 30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 33 	TimeWindow = [ 16 , 20 ]	BeginService =  16.09	CurrentTime = 17 	Route = *50*,*33 , 81 , 30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 30 	TimeWindow = [ 31 , 35 ]	BeginService =  30.87	CurrentTime = 32 	Route = *50*,*33*,*30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 9  	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = *50*,*33*,*30*,* 9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 66 	TimeWindow = [ 55 , 60 ]	BeginService =  55.22	CurrentTime = 56 	Route = *50*,*33*,*30*,* 9*,*66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 20 	TimeWindow = [  0 , 82 ]	BeginService =  63.45	CurrentTime = 64 	Route = *50*,*33*,*30*,* 9*,*66*,*20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 51 	TimeWindow = [  0 , 84 ]	BeginService =  71.31	CurrentTime = 72 	Route = *50*,*33*,*30*,* 9*,*66*,*20*,*51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 1  	TimeWindow = [  0 , 89 ]	BeginService =  80.89	CurrentTime = 82 	Route = *50*,*33*,*30*,* 9*,*66*,*20*,*51*,* 1 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 94 	TimeWindow = [  0 , 90 ]	BeginService =   5.24	CurrentTime = 6  	Route = *94 , 96 , 99 ,  6 , 59 , 37 , 98 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 96 	TimeWindow = [  0 , 89 ]	BeginService =  11.32	CurrentTime = 12 	Route = *94*,*96 , 99 ,  6 , 59 , 37 , 98 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 5  	TimeWindow = [  0 , 87 ]	BeginService =  18.98	CurrentTime = 21 	Route = *94*,*96*,* 5 , 84 , 17 , 93 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 84 	TimeWindow = [ 44 , 48 ]	BeginService =  43.91	CurrentTime = 45 	Route = *94*,*96*,* 5*,*84 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 17 	TimeWindow = [ 68 , 73 ]	BeginService =  68.26	CurrentTime = 69 	Route = *94*,*96*,* 5*,*84*,*17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 60 	TimeWindow = [  0 , 87 ]	BeginService =  78.11	CurrentTime = 79 	Route = *94*,*96*,* 5*,*84*,*17*,*60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 89 	TimeWindow = [  0 , 92 ]	BeginService =  86.39	CurrentTime = 87 	Route = *94*,*96*,* 5*,*84*,*17*,*60*,*89 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 18 	TimeWindow = [  0 , 89 ]	BeginService =   6.87	CurrentTime = 8  	Route = *18 , 45 , 84 , 17 , 83 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 45 	TimeWindow = [ 14 , 18 ]	BeginService =  17.37	CurrentTime = 18 	Route = *18*,*45 , 84 , 17 , 83 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 83 	TimeWindow = [  0 , 86 ]	BeginService =  25.22	CurrentTime = 27 	Route = *18*,*45*,*83 , 84 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 99 	TimeWindow = [ 36 , 40 ]	BeginService =  36.09	CurrentTime = 37 	Route = *18*,*45*,*83*,*99 ,  6 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 6  	TimeWindow = [ 43 , 47 ]	BeginService =  43.22	CurrentTime = 44 	Route = *18*,*45*,*83*,*99*,* 6 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 13 	TimeWindow = [ 69 , 73 ]	BeginService =  69.13	CurrentTime = 70 	Route = *18*,*45*,*83*,*99*,* 6*,*13 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 2  	TimeWindow = [  0 , 88 ]	BeginService =   7.83	CurrentTime = 9  	Route = * 2 , 57 , 15 , 41 , 75 , 56 ,  4 , 80 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 57 	TimeWindow = [  0 , 85 ]	BeginService =  14.71	CurrentTime = 16 	Route = * 2*,*57 , 15 , 41 , 75 , 56 ,  4 , 80 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 15 	TimeWindow = [ 27 , 31 ]	BeginService =  26.52	CurrentTime = 28 	Route = * 2*,*57*,*15 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 41 	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = * 2*,*57*,*15*,*41 , 74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 75 	TimeWindow = [  0 , 83 ]	BeginService =  50.03	CurrentTime = 51 	Route = * 2*,*57*,*15*,*41*,*75 , 56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 56 	TimeWindow = [ 57 , 61 ]	BeginService =  56.52	CurrentTime = 58 	Route = * 2*,*57*,*15*,*41*,*75*,*56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 4  	TimeWindow = [ 65 , 69 ]	BeginService =  64.78	CurrentTime = 66 	Route = * 2*,*57*,*15*,*41*,*75*,*56*,* 4 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 73 	TimeWindow = [  0 , 87 ]	BeginService =   8.75	CurrentTime = 10 	Route = *73 , 22 , 74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 22 	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = *73*,*22 , 75 , 56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 74 	TimeWindow = [ 65 , 69 ]	BeginService =  64.78	CurrentTime = 66 	Route = *73*,*22*,*74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 72 	TimeWindow = [  0 , 86 ]	BeginService =  70.51	CurrentTime = 72 	Route = *73*,*22*,*74*,*72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 21 	TimeWindow = [  0 , 87 ]	BeginService =  76.80	CurrentTime = 78 	Route = *73*,*22*,*74*,*72*,*21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 58 	TimeWindow = [ 87 , 91 ]	BeginService =  86.96	CurrentTime = 88 	Route = *73*,*22*,*74*,*72*,*21*,*58 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 92 	TimeWindow = [  8 , 12 ]	BeginService =   7.99	CurrentTime = 9  	Route = *92 , 91 , 14 , 44 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 91 	TimeWindow = [  0 , 84 ]	BeginService =  15.65	CurrentTime = 17 	Route = *92*,*91 , 14 , 44 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 14 	TimeWindow = [  0 , 81 ]	BeginService =  23.91	CurrentTime = 25 	Route = *92*,*91*,*14 , 44 , 38 , 86 , 16 , 61 , 85 , 98 , 37 , 97 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 44 	TimeWindow = [ 30 , 34 ]	BeginService =  30.72	CurrentTime = 32 	Route = *92*,*91*,*14*,*44 , 38 , 86 , 16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 38 	TimeWindow = [ 36 , 40 ]	BeginService =  39.77	CurrentTime = 41 	Route = *92*,*91*,*14*,*44*,*38 , 86 , 16 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 86 	TimeWindow = [  0 , 80 ]	BeginService =  49.79	CurrentTime = 51 	Route = *92*,*91*,*14*,*44*,*38*,*86 , 16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 16 	TimeWindow = [  0 , 83 ]	BeginService =  56.89	CurrentTime = 58 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 61 	TimeWindow = [  0 , 84 ]	BeginService =  63.18	CurrentTime = 64 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 85 	TimeWindow = [  0 , 85 ]	BeginService =  69.47	CurrentTime = 70 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61*,*85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 93 	TimeWindow = [ 82 , 86 ]	BeginService =  81.74	CurrentTime = 83 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61*,*85*,*93 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 36 	TimeWindow = [ 18 , 22 ]	BeginService =  18.00	CurrentTime = 19 	Route = *36 , 64 , 49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 64 	TimeWindow = [ 32 , 36 ]	BeginService =  31.74	CurrentTime = 33 	Route = *36*,*64 , 49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 49 	TimeWindow = [ 47 , 51 ]	BeginService =  46.96	CurrentTime = 48 	Route = *36*,*64*,*49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 19 	TimeWindow = [  0 , 81 ]	BeginService =  56.54	CurrentTime = 58 	Route = *36*,*64*,*49*,*19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 7  	TimeWindow = [  0 , 86 ]	BeginService =  65.75	CurrentTime = 67 	Route = *36*,*64*,*49*,*19*,* 7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 52 	TimeWindow = [  0 , 90 ]	BeginService =  74.40	CurrentTime = 75 	Route = *36*,*64*,*49*,*19*,* 7*,*52 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 26 	TimeWindow = [  0 , 90 ]	BeginService =   4.86	CurrentTime = 6  	Route = *26 , 39 , 23 , 67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 39 	TimeWindow = [ 19 , 23 ]	BeginService =  19.40	CurrentTime = 20 	Route = *26*,*39 , 23 , 67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 23 	TimeWindow = [ 30 , 34 ]	BeginService =  29.57	CurrentTime = 31 	Route = *26*,*39*,*23 , 67 , 55 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 67 	TimeWindow = [ 36 , 40 ]	BeginService =  39.13	CurrentTime = 40 	Route = *26*,*39*,*23*,*67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 55 	TimeWindow = [ 59 , 63 ]	BeginService =  59.13	CurrentTime = 60 	Route = *26*,*39*,*23*,*67*,*55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 25 	TimeWindow = [ 75 , 79 ]	BeginService =  74.78	CurrentTime = 76 	Route = *26*,*39*,*23*,*67*,*55*,*25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 54 	TimeWindow = [  0 , 86 ]	BeginService =  84.37	CurrentTime = 85 	Route = *26*,*39*,*23*,*67*,*55*,*25*,*54 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 71 	TimeWindow = [  0 , 78 ]	BeginService =  17.24	CurrentTime = 18 	Route = *71 , 65 , 78 , 34 , 35 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 65 	TimeWindow = [ 22 , 27 ]	BeginService =  26.07	CurrentTime = 27 	Route = *71*,*65 , 78 , 34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 78 	TimeWindow = [ 42 , 46 ]	BeginService =  41.74	CurrentTime = 43 	Route = *71*,*65*,*78 , 34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 34 	TimeWindow = [  0 , 80 ]	BeginService =  48.26	CurrentTime = 49 	Route = *71*,*65*,*78*,*34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 35 	TimeWindow = [ 62 , 67 ]	BeginService =  62.17	CurrentTime = 63 	Route = *71*,*65*,*78*,*34*,*35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 81 	TimeWindow = [  0 , 83 ]	BeginService =  72.44	CurrentTime = 73 	Route = *71*,*65*,*78*,*34*,*35*,*81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 77 	TimeWindow = [ 78 , 82 ]	BeginService =  81.64	CurrentTime = 83 	Route = *71*,*65*,*78*,*34*,*35*,*81*,*77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 28 	TimeWindow = [  0 , 93 ]	BeginService =  91.83	CurrentTime = 93 	Route = *71*,*65*,*78*,*34*,*35*,*81*,*77*,*28 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257718);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(45); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(97);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(14);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r201_0_1_test() throws Exception {
        File file = Paths.get(rootDirectory, "r201-0.1.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r201-0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 94 are a-priori known (available nodes excluding the depot) and 6 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 132.12819654724314 (scalled value = 1321.2819654724312); Number of vehicles used: 5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=131.8556495960999 (scalled value = 1318.556495960999)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=131.632643080467 (scalled value = 1316.32643080467)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=129.55342086048543 (scalled value = 1295.5342086048543)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 29 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=5 total tours length=134.72214987854565 (scalled value = 1347.2214987854563)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=128.7182997846963 (scalled value = 1287.182997846963)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.71836764991667 (scalled value = 1357.1836764991667)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.37088241459034 (scalled value = 1353.7088241459032)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.80579756815317 (scalled value = 1338.0579756815316)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.74221352490244 (scalled value = 1327.4221352490242)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=130.97627878133352 (scalled value = 1309.762787813335)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 38 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=134.57875653209692 (scalled value = 1345.7875653209692)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.38227836859792 (scalled value = 1343.8227836859792)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.2578989565438 (scalled value = 1342.578989565438)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.69144696966833 (scalled value = 1336.9144696966832)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.65663668614567 (scalled value = 1326.5663668614566)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 77 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=133.84772314385194 (scalled value = 1338.4772314385193)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.7390258894206 (scalled value = 1327.3902588942058)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 93 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=134.19862198859246 (scalled value = 1341.9862198859246)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.7648513484002 (scalled value = 1337.648513484002)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.6702221373018 (scalled value = 1336.702221373018)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.08927801001914 (scalled value = 1330.8927801001914)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.6465870285105 (scalled value = 1326.465870285105)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.59609089948947 (scalled value = 1325.9609089948947)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 48 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=139.5360958541237 (scalled value = 1395.3609585412369)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.78973197551053 (scalled value = 1377.8973197551052)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.4129346923993 (scalled value = 1374.129346923993)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.76032376926656 (scalled value = 1367.6032376926655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.00236075025796 (scalled value = 1360.0236075025796)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.6973353582681 (scalled value = 1356.973353582681)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.68712720790882 (scalled value = 1356.8712720790882)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.4776138201191 (scalled value = 1354.7761382011909)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 32 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=141.80185816500762 (scalled value = 1418.0185816500762)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.11029302754332 (scalled value = 1401.1029302754332)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.75229549148477 (scalled value = 1397.5229549148476)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.32549659916293 (scalled value = 1383.2549659916292)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.98251841694014 (scalled value = 1379.8251841694014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.4044743269346 (scalled value = 1374.0447432693459)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.32189055295797 (scalled value = 1373.2189055295796)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=4 total tours length=137.32189055295797 (scalled value = 1373.2189055295796)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 95 92 42 2 72 39 23 75 21 67 73 40 53 87 57 22 41 56 74 4 55 25 24 80 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 27 65 33 29 12 76 30 71 51 9 78 81 79 3 34 50 26 54 68 77 1 70 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 28 69 31 52 82 62 11 64 19 88 7 18 99 85 84 6 94 96 97 37 43 13 58 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 63 47 36 45 83 5 59 98 14 15 44 16 61 38 86 8 90 49 46 10 20 66 35 32 48 60 17 91 100 93 89 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 920");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9200");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 95 	TimeWindow = [  9 , 23 ]	BeginService =   9.20	CurrentTime = 10 	Route = *95*, 92 , 42 ,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 92 	TimeWindow = [  2 , 18 ]	BeginService =  10.56	CurrentTime = 12 	Route = *95*,*92*, 42 ,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 42 	TimeWindow = [  3 , 17 ]	BeginService =  12.58	CurrentTime = 14 	Route = *95*,*92*,*42*,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 2  	TimeWindow = [ 14 , 28 ]	BeginService =  14.79	CurrentTime = 16 	Route = *95*,*92*,*42*,* 2*, 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [  3 , 21 ]	BeginService =  16.99	CurrentTime = 18 	Route = *95*,*92*,*42*,* 2*,*72*, 39 , 23 , 15 , 73 , 21 , 75 , 67 , 40 , 87 , 94 ,  6 , 97 , 37 , 96 , 89 , 60 , 17 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 39 	TimeWindow = [  3 , 22 ]	BeginService =  19.35	CurrentTime = 20 	Route = *95*,*92*,*42*,* 2*,*72*,*39*, 23 , 15 , 73 , 21 , 75 , 67 , 40 , 87 , 94 ,  6 , 97 , 37 , 96 , 89 , 60 , 17 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 23 	TimeWindow = [ 21 , 33 ]	BeginService =  21.21	CurrentTime = 22 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*, 75 , 21 , 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 75 	TimeWindow = [ 24 , 35 ]	BeginService =  23.60	CurrentTime = 25 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*, 21 , 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 21 	TimeWindow = [ 21 , 33 ]	BeginService =  25.58	CurrentTime = 27 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*, 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 67 	TimeWindow = [ 29 , 40 ]	BeginService =  29.40	CurrentTime = 30 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*, 73 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 73 	TimeWindow = [ 31 , 40 ]	BeginService =  32.99	CurrentTime = 34 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*, 40 , 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 40 	TimeWindow = [ 36 , 44 ]	BeginService =  36.00	CurrentTime = 37 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*, 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 53 	TimeWindow = [ 41 , 49 ]	BeginService =  41.40	CurrentTime = 42 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*, 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 87 	TimeWindow = [ 42 , 45 ]	BeginService =  43.98	CurrentTime = 45 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*, 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 57 	TimeWindow = [ 42 , 53 ]	BeginService =  45.70	CurrentTime = 47 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*, 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 22 	TimeWindow = [ 41 , 49 ]	BeginService =  48.02	CurrentTime = 49 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*, 41 , 43 , 97 , 37 , 96 , 60 , 48 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 41 	TimeWindow = [ 40 , 51 ]	BeginService =  49.44	CurrentTime = 50 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*, 43 , 37 , 97 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 59 , 69 ]	BeginService =  58.50	CurrentTime = 60 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*, 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 68 , 80 ]	BeginService =  68.10	CurrentTime = 69 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 4  	TimeWindow = [ 68 , 80 ]	BeginService =  70.24	CurrentTime = 71 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*, 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 55 	TimeWindow = [ 62 , 74 ]	BeginService =  72.09	CurrentTime = 73 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*, 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 25 	TimeWindow = [ 82 , 96 ]	BeginService =  81.70	CurrentTime = 83 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*, 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [ 70 , 85 ]	BeginService =  84.20	CurrentTime = 85 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*,*24*, 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 84 , 97 ]	BeginService =  86.12	CurrentTime = 87 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*,*24*,*80*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 27 	TimeWindow = [ 10 , 26 ]	BeginService =  10.40	CurrentTime = 11 	Route = *27*, 65 , 33 , 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 24 , 55 , 25 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 65 	TimeWindow = [  5 , 19 ]	BeginService =  15.98	CurrentTime = 17 	Route = *27*,*65*, 33 , 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 24 , 55 , 25 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 33 	TimeWindow = [  5 , 20 ]	BeginService =  19.64	CurrentTime = 21 	Route = *27*,*65*,*33*, 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 29 	TimeWindow = [ 19 , 31 ]	BeginService =  22.12	CurrentTime = 23 	Route = *27*,*65*,*33*,*29*, 12 , 76 , 30 , 71 , 51 , 79 , 78 , 81 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 12 	TimeWindow = [ 23 , 35 ]	BeginService =  24.69	CurrentTime = 26 	Route = *27*,*65*,*33*,*29*,*12*, 76 , 30 , 71 , 51 , 79 , 78 , 81 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 76 	TimeWindow = [ 29 , 37 ]	BeginService =  29.00	CurrentTime = 30 	Route = *27*,*65*,*33*,*29*,*12*,*76*, 30 , 71 , 51 , 79 , 81 , 78 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 30 	TimeWindow = [ 26 , 35 ]	BeginService =  32.01	CurrentTime = 33 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*, 71 , 51 , 79 , 81 , 78 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 71 	TimeWindow = [ 27 , 37 ]	BeginService =  34.89	CurrentTime = 36 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,  9 , 51 , 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 51 	TimeWindow = [ 35 , 45 ]	BeginService =  37.17	CurrentTime = 41 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,  9 , 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 9  	TimeWindow = [ 40 , 50 ]	BeginService =  40.00	CurrentTime = 42 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*, 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 78 	TimeWindow = [ 38 , 50 ]	BeginService =  42.00	CurrentTime = 43 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*, 81 , 79 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 81 	TimeWindow = [ 41 , 46 ]	BeginService =  43.63	CurrentTime = 45 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*, 79 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 79 	TimeWindow = [ 39 , 47 ]	BeginService =  45.26	CurrentTime = 46 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*, 34 ,  3 , 50 , 68 , 26 , 54 ,  4 , 55 , 25 , 24 , 80 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 3  	TimeWindow = [ 53 , 58 ]	BeginService =  52.70	CurrentTime = 54 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*, 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 34 	TimeWindow = [ 53 , 61 ]	BeginService =  55.11	CurrentTime = 56 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*, 50 , 26 , 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 50 	TimeWindow = [ 55 , 64 ]	BeginService =  58.08	CurrentTime = 59 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*, 26 , 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 26 	TimeWindow = [ 59 , 67 ]	BeginService =  60.80	CurrentTime = 62 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*, 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 54 	TimeWindow = [ 64 , 73 ]	BeginService =  64.10	CurrentTime = 65 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*, 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 68 	TimeWindow = [ 64 , 75 ]	BeginService =  66.10	CurrentTime = 67 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*, 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 77 	TimeWindow = [ 82 , 95 ]	BeginService =  81.70	CurrentTime = 83 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 1  	TimeWindow = [ 71 , 85 ]	BeginService =  84.04	CurrentTime = 85 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,* 1*, 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 70 	TimeWindow = [ 79 , 97 ]	BeginService =  85.85	CurrentTime = 87 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,* 1*,*70*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 28 	TimeWindow = [ 11 , 26 ]	BeginService =  11.40	CurrentTime = 12 	Route = *28*, 69 , 31 , 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 69 	TimeWindow = [ 16 , 29 ]	BeginService =  16.20	CurrentTime = 17 	Route = *28*,*69*, 31 , 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 31 	TimeWindow = [ 15 , 28 ]	BeginService =  17.98	CurrentTime = 19 	Route = *28*,*69*,*31*, 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 52 	TimeWindow = [ 17 , 30 ]	BeginService =  19.97	CurrentTime = 21 	Route = *28*,*69*,*31*,*52*, 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 99 , 94 ,  6 , 97 , 43 , 37 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 82 	TimeWindow = [ 16 , 29 ]	BeginService =  22.23	CurrentTime = 23 	Route = *28*,*69*,*31*,*52*,*82*, 62 , 11 , 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 62 	TimeWindow = [ 16 , 30 ]	BeginService =  24.65	CurrentTime = 26 	Route = *28*,*69*,*31*,*52*,*82*,*62*, 11 , 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 11 	TimeWindow = [ 21 , 33 ]	BeginService =  26.46	CurrentTime = 27 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*, 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 64 	TimeWindow = [ 21 , 33 ]	BeginService =  28.76	CurrentTime = 30 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*, 19 , 88 ,  7 , 90 , 18 , 94 ,  6 , 97 , 37 , 96 , 43 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 19 	TimeWindow = [ 27 , 38 ]	BeginService =  31.46	CurrentTime = 32 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*, 88 ,  7 , 90 , 18 , 94 ,  6 , 97 , 37 , 96 , 43 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 88 	TimeWindow = [ 28 , 39 ]	BeginService =  33.82	CurrentTime = 35 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,  7 , 18 , 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [ 33 , 41 ]	BeginService =  35.45	CurrentTime = 36 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*, 18 , 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 18 	TimeWindow = [ 38 , 43 ]	BeginService =  37.70	CurrentTime = 39 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*, 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 99 	TimeWindow = [ 33 , 43 ]	BeginService =  40.10	CurrentTime = 41 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*, 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 85 	TimeWindow = [ 38 , 46 ]	BeginService =  41.67	CurrentTime = 43 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*, 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 84 	TimeWindow = [ 44 , 51 ]	BeginService =  43.70	CurrentTime = 45 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 6  	TimeWindow = [ 42 , 51 ]	BeginService =  46.10	CurrentTime = 47 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*, 94 , 10 , 20 , 66 , 35 , 68 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 94 	TimeWindow = [ 44 , 50 ]	BeginService =  47.42	CurrentTime = 48 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*, 10 , 20 , 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [ 61 , 69 ]	BeginService =  60.70	CurrentTime = 62 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*, 97 , 37 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [ 61 , 67 ]	BeginService =  62.37	CurrentTime = 63 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*, 37 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [ 61 , 69 ]	BeginService =  63.88	CurrentTime = 65 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*, 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [ 62 , 71 ]	BeginService =  66.61	CurrentTime = 68 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*, 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 13 	TimeWindow = [ 69 , 83 ]	BeginService =  69.92	CurrentTime = 71 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*,*13*, 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 58 	TimeWindow = [ 85 , 98 ]	BeginService =  84.90	CurrentTime = 86 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*,*13*,*58*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 63 	TimeWindow = [  3 , 19 ]	BeginService =   3.49	CurrentTime = 4  	Route = *63*, 47 , 36 , 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 99 , 86 , 84 ,  8 , 49 , 46 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 47 	TimeWindow = [  9 , 25 ]	BeginService =   8.50	CurrentTime = 10 	Route = *63*,*47*, 36 , 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 36 	TimeWindow = [  4 , 21 ]	BeginService =  10.22	CurrentTime = 11 	Route = *63*,*47*,*36*, 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 45 	TimeWindow = [  3 , 19 ]	BeginService =  13.46	CurrentTime = 14 	Route = *63*,*47*,*36*,*45*, 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 83 	TimeWindow = [ 10 , 25 ]	BeginService =  15.26	CurrentTime = 16 	Route = *63*,*47*,*36*,*45*,*83*,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 5  	TimeWindow = [  3 , 21 ]	BeginService =  16.97	CurrentTime = 18 	Route = *63*,*47*,*36*,*45*,*83*,* 5*, 59 , 98 , 14 , 44 , 16 , 61 , 86 , 85 , 99 , 53 , 22 , 41 , 57 , 43 , 56 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 59 	TimeWindow = [  2 , 23 ]	BeginService =  18.82	CurrentTime = 20 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*, 98 , 14 , 44 , 16 , 61 , 86 , 85 , 99 , 53 , 22 , 41 , 57 , 43 , 56 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 98 	TimeWindow = [ 18 , 31 ]	BeginService =  20.18	CurrentTime = 21 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*, 14 , 15 , 16 , 44 , 61 , 85 , 86 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 14 	TimeWindow = [  3 , 24 ]	BeginService =  22.35	CurrentTime = 23 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*, 15 , 44 , 16 , 61 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 15 	TimeWindow = [ 18 , 30 ]	BeginService =  24.93	CurrentTime = 26 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*, 44 , 16 , 61 , 38 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 44 	TimeWindow = [ 23 , 34 ]	BeginService =  28.03	CurrentTime = 29 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*, 16 , 61 , 38 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 16 	TimeWindow = [ 27 , 37 ]	BeginService =  29.64	CurrentTime = 31 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*, 61 , 38 , 86 , 85 , 99 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 61 	TimeWindow = [ 29 , 38 ]	BeginService =  31.09	CurrentTime = 32 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*, 38 , 86 , 85 , 99 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 38 	TimeWindow = [ 30 , 41 ]	BeginService =  34.11	CurrentTime = 35 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*, 86 ,  8 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 86 	TimeWindow = [ 39 , 47 ]	BeginService =  38.80	CurrentTime = 40 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,  8 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 40 , 48 ]	BeginService =  42.37	CurrentTime = 43 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*, 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 90 	TimeWindow = [ 39 , 49 ]	BeginService =  46.56	CurrentTime = 48 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*, 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 49 	TimeWindow = [ 50 , 54 ]	BeginService =  50.10	CurrentTime = 51 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*, 46 , 10 , 20 , 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [ 52 , 63 ]	BeginService =  53.14	CurrentTime = 54 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*, 10 , 20 , 66 , 35 , 32 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 10 	TimeWindow = [ 58 , 63 ]	BeginService =  57.70	CurrentTime = 59 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*, 20 , 66 , 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 20 	TimeWindow = [ 58 , 67 ]	BeginService =  60.28	CurrentTime = 61 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*, 66 , 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 66 	TimeWindow = [ 59 , 69 ]	BeginService =  62.18	CurrentTime = 63 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*, 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 35 	TimeWindow = [ 69 , 81 ]	BeginService =  68.60	CurrentTime = 70 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*, 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 32 	TimeWindow = [ 66 , 78 ]	BeginService =  72.43	CurrentTime = 73 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*, 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [ 77 , 91 ]	BeginService =  77.30	CurrentTime = 78 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*, 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 60 	TimeWindow = [ 72 , 86 ]	BeginService =  80.14	CurrentTime = 81 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*, 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 17 	TimeWindow = [ 73 , 87 ]	BeginService =  82.41	CurrentTime = 83 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*, 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 91 	TimeWindow = [ 74 , 87 ]	BeginService =  84.90	CurrentTime = 86 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*, 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 100	TimeWindow = [ 80 , 97 ]	BeginService =  86.21	CurrentTime = 87 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*, 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 93 	TimeWindow = [ 81 , 97 ]	BeginService =  87.81	CurrentTime = 89 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*,*93*, 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 89 	TimeWindow = [ 76 , 92 ]	BeginService =  90.17	CurrentTime = 91 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*,*93*,*89*");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257717);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(1); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(92);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(4);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r201_0_5_test() throws Exception {
        File file = Paths.get(rootDirectory, "r201-0.5.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r201-0.5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 50 are a-priori known (available nodes excluding the depot) and 50 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 83.0060681211039 (scalled value = 830.0606812110389); Number of vehicles used: 3");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=82.7693674923068 (scalled value = 827.693674923068)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=81.10107889630214 (scalled value = 811.0107889630214)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=80.67941856682674 (scalled value = 806.7941856682673)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("12 new nodes became available (known): 2 14 33 35 36 39 44 50 65 83 98 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 62");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=5 total tours length=130.88697116818562 (scalled value = 1308.8697116818562)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=96.14539565771314 (scalled value = 961.4539565771313)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=87.65332765764863 (scalled value = 876.5332765764863)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 22 52 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 65");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=98.31608401059862 (scalled value = 983.1608401059862)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=94.655863097665 (scalled value = 946.55863097665)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=91.89307469809162 (scalled value = 918.9307469809162)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 95 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 66");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=93.10231778075516 (scalled value = 931.0231778075515)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 64 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=95.92919125201024 (scalled value = 959.2919125201024)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 12 21 81 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 70");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=112.0928767080881 (scalled value = 1120.928767080881)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=110.17667284181502 (scalled value = 1101.76672841815)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=108.69122379671349 (scalled value = 1086.9122379671348)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=101.81054812690957 (scalled value = 1018.1054812690957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 10 29 53 79 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 74");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=111.58502580868559 (scalled value = 1115.8502580868558)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 55 82 94 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 77");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=118.52580226383233 (scalled value = 1185.2580226383232)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.75210622475011 (scalled value = 1137.521062247501)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 76 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 78");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=115.4724003264972 (scalled value = 1154.7240032649718)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=114.00499973481513 (scalled value = 1140.0499973481512)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 78 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=114.42695418054444 (scalled value = 1144.2695418054443)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 19 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=114.49908212574515 (scalled value = 1144.9908212574514)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.98799018499813 (scalled value = 1139.8799018499813)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.42966515104055 (scalled value = 1134.2966515104054)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 74 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 81");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=116.46151084469648 (scalled value = 1164.6151084469648)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.08233840820968 (scalled value = 1160.8233840820967)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=114.92199150036305 (scalled value = 1149.2199150036304)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 20 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 82");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=118.35202791280997 (scalled value = 1183.5202791280997)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=117.54376477949961 (scalled value = 1175.437647794996)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 83");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=122.14747861039163 (scalled value = 1221.4747861039161)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=121.06284688685773 (scalled value = 1210.628468868577)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 23 91 97 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=135.68096992607903 (scalled value = 1356.8096992607902)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.57614468047656 (scalled value = 1245.7614468047655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.92069183811557 (scalled value = 1229.2069183811557)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.51568529413784 (scalled value = 1225.1568529413782)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.01820955592655 (scalled value = 1220.1820955592655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 51 84 88 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=126.6112610073299 (scalled value = 1266.112610073299)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.62761555531975 (scalled value = 1256.2761555531974)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.61413124891746 (scalled value = 1256.1413124891744)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.73714382083367 (scalled value = 1247.3714382083365)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 49 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=129.06185836842124 (scalled value = 1290.6185836842124)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=127.73224023875649 (scalled value = 1277.3224023875648)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 17 38 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=133.3500399194815 (scalled value = 1333.500399194815)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.3062646818421 (scalled value = 1333.062646818421)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 8 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.52510700525752 (scalled value = 1365.2510700525752)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.04353726188984 (scalled value = 1360.4353726188983)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 25 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=139.3896795673279 (scalled value = 1393.896795673279)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.60198254857528 (scalled value = 1356.0198254857528)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 66 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.3088612892349 (scalled value = 1363.088612892349)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 56 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=138.70760905537279 (scalled value = 1387.0760905537277)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 26 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=140.6364409147111 (scalled value = 1406.364409147111)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.3213370949507 (scalled value = 1393.213370949507)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.75815256909493 (scalled value = 1387.5815256909493)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.53105087305988 (scalled value = 1365.3105087305987)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.983974379481 (scalled value = 1359.83974379481)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.71830546343287 (scalled value = 1357.1830546343285)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.5447779137225 (scalled value = 1345.4477791372249)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 32 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=140.06611712066368 (scalled value = 1400.6611712066367)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.01657004557435 (scalled value = 1380.1657004557435)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.356933211716 (scalled value = 1373.56933211716)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 70 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=141.46799578132124 (scalled value = 1414.6799578132122)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.55821677513856 (scalled value = 1395.5821677513854)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 1 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=142.20263319937038 (scalled value = 1422.0263319937037)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.3238786373558 (scalled value = 1413.2387863735578)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.12151899312315 (scalled value = 1411.2151899312314)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.05255707699953 (scalled value = 1410.5255707699953)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.4651807828949 (scalled value = 1404.651807828949)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.32174603383297 (scalled value = 1403.2174603383296)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=4 total tours length=140.32174603383297 (scalled value = 1403.2174603383296)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 72 39 28 27 31 69 52 83 82 88 30 71 76 79 81 51 9 78 34 3 50 26 54 55 56 74 4 25 24 80 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 45 36 47 63 62 11 64 19 7 18 6 94 90 10 20 32 66 35 68 77 1 70 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 33 65 29 12 21 75 23 67 73 40 53 87 57 22 41 97 43 37 96 13 58 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 5 59 92 42 14 2 15 95 98 44 16 61 38 86 85 99 84 8 49 46 48 60 17 91 100 93 89 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 920");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9200");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [  3 , 21 ]	BeginService =   3.10	CurrentTime = 11 	Route = *72*, 39 , 28 , 27 , 52 , 69 , 31 , 62 , 11 , 64 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 39 	TimeWindow = [  3 , 22 ]	BeginService =   5.46	CurrentTime = 12 	Route = *72*,*39*, 28 , 27 , 52 , 69 , 31 , 62 , 11 , 64 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 28 	TimeWindow = [ 11 , 26 ]	BeginService =  11.40	CurrentTime = 13 	Route = *72*,*39*,*28*, 27 , 52 , 69 , 31 , 62 , 11 , 64 , 19 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 27 	TimeWindow = [ 10 , 26 ]	BeginService =  13.07	CurrentTime = 14 	Route = *72*,*39*,*28*,*27*, 69 , 31 , 52 , 82 , 83 , 61 , 16 , 44 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 31 	TimeWindow = [ 15 , 28 ]	BeginService =  15.34	CurrentTime = 17 	Route = *72*,*39*,*28*,*27*,*31*, 69 , 52 , 83 , 82 , 99 , 61 , 16 , 86 , 85 , 87 , 22 , 41 , 57 , 46 , 48 , 60 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 69 	TimeWindow = [ 16 , 29 ]	BeginService =  17.12	CurrentTime = 18 	Route = *72*,*39*,*28*,*27*,*31*,*69*, 52 , 83 , 82 , 99 , 61 , 16 , 86 , 85 , 87 , 22 , 41 , 57 , 46 , 48 , 60 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 52 	TimeWindow = [ 17 , 30 ]	BeginService =  19.19	CurrentTime = 20 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*, 83 , 82 , 62 , 11 , 64 , 19 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 83 	TimeWindow = [ 10 , 25 ]	BeginService =  21.63	CurrentTime = 23 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*, 82 , 88 , 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 82 	TimeWindow = [ 16 , 29 ]	BeginService =  23.63	CurrentTime = 25 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*, 88 , 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 88 	TimeWindow = [ 28 , 39 ]	BeginService =  27.90	CurrentTime = 29 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*, 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 30 	TimeWindow = [ 26 , 35 ]	BeginService =  30.51	CurrentTime = 32 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*, 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 71 	TimeWindow = [ 27 , 37 ]	BeginService =  33.39	CurrentTime = 34 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*, 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 76 	TimeWindow = [ 29 , 37 ]	BeginService =  37.11	CurrentTime = 38 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*, 51 , 79 , 81 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 25 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 79 	TimeWindow = [ 39 , 47 ]	BeginService =  39.11	CurrentTime = 40 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*, 81 , 51 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 81 	TimeWindow = [ 41 , 46 ]	BeginService =  41.10	CurrentTime = 42 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*, 51 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 51 	TimeWindow = [ 35 , 45 ]	BeginService =  42.82	CurrentTime = 44 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,  9 , 78 ,  3 , 34 , 50 , 26 , 54 , 55 , 56 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 9  	TimeWindow = [ 40 , 50 ]	BeginService =  44.45	CurrentTime = 45 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*, 78 , 34 ,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 78 	TimeWindow = [ 38 , 50 ]	BeginService =  46.45	CurrentTime = 47 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*, 34 ,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 34 	TimeWindow = [ 53 , 61 ]	BeginService =  52.90	CurrentTime = 54 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 3  	TimeWindow = [ 53 , 58 ]	BeginService =  55.31	CurrentTime = 56 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*, 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 50 	TimeWindow = [ 55 , 64 ]	BeginService =  57.14	CurrentTime = 58 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*, 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 26 	TimeWindow = [ 59 , 67 ]	BeginService =  59.85	CurrentTime = 61 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*, 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 54 	TimeWindow = [ 64 , 73 ]	BeginService =  64.10	CurrentTime = 65 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*, 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 55 	TimeWindow = [ 62 , 74 ]	BeginService =  65.95	CurrentTime = 67 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*, 56 , 74 ,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 59 , 69 ]	BeginService =  68.44	CurrentTime = 69 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*, 74 ,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 68 , 80 ]	BeginService =  70.14	CurrentTime = 71 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 4  	TimeWindow = [ 68 , 80 ]	BeginService =  72.28	CurrentTime = 73 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*, 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 25 	TimeWindow = [ 82 , 96 ]	BeginService =  81.70	CurrentTime = 83 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*, 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [ 70 , 85 ]	BeginService =  84.20	CurrentTime = 85 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*,*24*, 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 84 , 97 ]	BeginService =  86.12	CurrentTime = 87 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*,*24*,*80*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 45 	TimeWindow = [  3 , 19 ]	BeginService =   2.92	CurrentTime = 8  	Route = *45*, 83 , 95 ,  2 , 72 , 39 , 21 , 75 , 73 , 67 , 40 , 87 , 57 , 22 , 41 , 43 , 37 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 36 	TimeWindow = [  4 , 21 ]	BeginService =   6.15	CurrentTime = 10 	Route = *45*,*36*, 47 , 63 , 11 , 64 , 62 ,  7 , 18 , 94 ,  6 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 47 	TimeWindow = [  9 , 25 ]	BeginService =   8.50	CurrentTime = 11 	Route = *45*,*36*,*47*, 63 , 82 , 83 , 61 , 44 , 16 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 63 	TimeWindow = [  3 , 19 ]	BeginService =  11.80	CurrentTime = 13 	Route = *45*,*36*,*47*,*63*, 82 , 83 , 61 , 44 , 16 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 62 	TimeWindow = [ 16 , 30 ]	BeginService =  16.30	CurrentTime = 21 	Route = *45*,*36*,*47*,*63*,*62*, 11 , 64 , 19 , 30 , 71 , 76 , 79 , 81 ,  9 , 78 ,  3 , 34 , 20 , 50 , 68 , 54 , 55 ,  4 , 74 , 24 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 11 	TimeWindow = [ 21 , 33 ]	BeginService =  20.60	CurrentTime = 23 	Route = *45*,*36*,*47*,*63*,*62*,*11*, 64 , 19 ,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 64 	TimeWindow = [ 21 , 33 ]	BeginService =  22.90	CurrentTime = 24 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*, 19 ,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 19 	TimeWindow = [ 27 , 38 ]	BeginService =  26.90	CurrentTime = 28 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 7  	TimeWindow = [ 33 , 41 ]	BeginService =  33.10	CurrentTime = 34 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*, 18 , 90 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 18 	TimeWindow = [ 38 , 43 ]	BeginService =  37.70	CurrentTime = 39 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,  6 , 94 , 90 , 10 , 20 , 35 , 77 , 80 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 6  	TimeWindow = [ 42 , 51 ]	BeginService =  41.50	CurrentTime = 43 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*, 94 , 90 , 10 , 20 , 66 , 35 , 77 , 80 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 94 	TimeWindow = [ 44 , 50 ]	BeginService =  43.60	CurrentTime = 45 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*, 90 , 10 , 20 , 66 , 35 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 90 	TimeWindow = [ 39 , 49 ]	BeginService =  48.63	CurrentTime = 50 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*, 10 , 20 , 66 , 35 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 10 	TimeWindow = [ 58 , 63 ]	BeginService =  57.70	CurrentTime = 59 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*, 20 , 32 , 66 , 35 , 68 , 77 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 20 	TimeWindow = [ 58 , 67 ]	BeginService =  60.28	CurrentTime = 61 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*, 32 , 66 , 35 , 68 , 77 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 32 	TimeWindow = [ 66 , 78 ]	BeginService =  66.00	CurrentTime = 67 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*, 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 66 	TimeWindow = [ 59 , 69 ]	BeginService =  68.46	CurrentTime = 69 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*, 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 35 	TimeWindow = [ 69 , 81 ]	BeginService =  71.07	CurrentTime = 72 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*, 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 68 	TimeWindow = [ 64 , 75 ]	BeginService =  74.76	CurrentTime = 76 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*, 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 77 	TimeWindow = [ 82 , 95 ]	BeginService =  81.70	CurrentTime = 83 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 1  	TimeWindow = [ 71 , 85 ]	BeginService =  84.04	CurrentTime = 85 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,* 1*, 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 70 	TimeWindow = [ 79 , 97 ]	BeginService =  85.85	CurrentTime = 87 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,* 1*,*70*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 33 	TimeWindow = [  5 , 20 ]	BeginService =   4.50	CurrentTime = 6  	Route = *33*, 65 , 63 , 11 , 62 , 31 , 52 , 69 , 71 ,  9 , 90 , 50 ,  3 , 34 , 35 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 65 	TimeWindow = [  5 , 19 ]	BeginService =   8.16	CurrentTime = 9  	Route = *33*,*65*, 63 , 31 , 62 , 36 , 47 , 11 , 64 , 71 ,  9 , 81 , 79 , 34 ,  3 , 50 , 68 , 54 ,  4 , 24 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 29 	TimeWindow = [ 19 , 31 ]	BeginService =  19.00	CurrentTime = 20 	Route = *33*,*65*,*29*, 12 , 21 , 75 , 23 , 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 74 , 54 , 55 ,  4 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 12 	TimeWindow = [ 23 , 35 ]	BeginService =  22.80	CurrentTime = 24 	Route = *33*,*65*,*29*,*12*, 21 , 75 , 23 , 67 , 73 , 40 , 53 , 94 , 90 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 21 	TimeWindow = [ 21 , 33 ]	BeginService =  25.38	CurrentTime = 26 	Route = *33*,*65*,*29*,*12*,*21*, 75 , 23 , 67 , 73 , 40 , 53 , 94 , 90 , 49 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 75 	TimeWindow = [ 24 , 35 ]	BeginService =  27.37	CurrentTime = 28 	Route = *33*,*65*,*29*,*12*,*21*,*75*, 23 , 67 , 73 , 40 , 53 , 94 , 90 , 49 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 23 	TimeWindow = [ 21 , 33 ]	BeginService =  29.21	CurrentTime = 30 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*, 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 17 , 100 , 91 , 93 , 60 , 48 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 67 	TimeWindow = [ 29 , 40 ]	BeginService =  31.41	CurrentTime = 32 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*, 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 17 , 100 , 91 , 93 , 60 , 48 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 73 	TimeWindow = [ 31 , 40 ]	BeginService =  35.01	CurrentTime = 36 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*, 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 40 	TimeWindow = [ 36 , 44 ]	BeginService =  36.90	CurrentTime = 38 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*, 53 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 53 	TimeWindow = [ 41 , 49 ]	BeginService =  41.40	CurrentTime = 42 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*, 87 , 57 , 22 , 41 , 56 , 43 , 37 , 97 , 96 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 87 	TimeWindow = [ 42 , 45 ]	BeginService =  43.98	CurrentTime = 45 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*, 57 , 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 57 	TimeWindow = [ 42 , 53 ]	BeginService =  45.70	CurrentTime = 47 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*, 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 22 	TimeWindow = [ 41 , 49 ]	BeginService =  48.02	CurrentTime = 49 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*, 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 41 	TimeWindow = [ 40 , 51 ]	BeginService =  49.44	CurrentTime = 50 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*, 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [ 61 , 67 ]	BeginService =  61.20	CurrentTime = 62 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*, 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [ 62 , 71 ]	BeginService =  64.01	CurrentTime = 65 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*, 37 , 96 , 13 , 93 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [ 61 , 69 ]	BeginService =  66.74	CurrentTime = 68 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*, 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [ 61 , 69 ]	BeginService =  68.47	CurrentTime = 69 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*, 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 13 	TimeWindow = [ 69 , 83 ]	BeginService =  70.29	CurrentTime = 71 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*,*13*, 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 58 	TimeWindow = [ 85 , 98 ]	BeginService =  84.90	CurrentTime = 86 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*,*13*,*58*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 5  	TimeWindow = [  3 , 21 ]	BeginService =   3.40	CurrentTime = 4  	Route = * 5*, 59 , 92 , 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 59 	TimeWindow = [  2 , 23 ]	BeginService =   5.25	CurrentTime = 6  	Route = * 5*,*59*, 92 , 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 92 	TimeWindow = [  2 , 18 ]	BeginService =   6.47	CurrentTime = 7  	Route = * 5*,*59*,*92*, 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 42 	TimeWindow = [  3 , 17 ]	BeginService =   8.49	CurrentTime = 9  	Route = * 5*,*59*,*92*,*42*, 15 , 14 , 44 , 98 , 16 , 61 , 86 , 85 , 99 ,  6 , 53 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 14 	TimeWindow = [  3 , 24 ]	BeginService =  10.41	CurrentTime = 11 	Route = * 5*,*59*,*92*,*42*,*14*, 98 , 95 , 15 ,  2 , 21 , 75 , 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 2  	TimeWindow = [ 14 , 28 ]	BeginService =  14.30	CurrentTime = 19 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*, 15 , 95 , 98 , 44 , 16 , 61 , 86 , 85 , 87 , 57 , 22 , 41 , 43 , 37 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 15 	TimeWindow = [ 18 , 30 ]	BeginService =  17.50	CurrentTime = 20 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*, 95 , 98 , 44 , 16 , 61 , 86 , 85 , 99 , 94 ,  6 , 97 , 43 , 37 , 96 , 13 , 93 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 95 	TimeWindow = [  9 , 23 ]	BeginService =  20.46	CurrentTime = 21 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*, 98 , 44 , 16 , 61 , 86 , 85 , 99 , 94 ,  6 , 96 , 93 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 98 	TimeWindow = [ 18 , 31 ]	BeginService =  22.14	CurrentTime = 23 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*, 44 , 16 , 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 44 	TimeWindow = [ 23 , 34 ]	BeginService =  24.20	CurrentTime = 25 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*, 16 , 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 16 	TimeWindow = [ 27 , 37 ]	BeginService =  27.20	CurrentTime = 28 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*, 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 61 	TimeWindow = [ 29 , 38 ]	BeginService =  29.00	CurrentTime = 30 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*, 38 , 86 , 99 , 84 , 85 , 94 ,  6 , 96 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 38 	TimeWindow = [ 30 , 41 ]	BeginService =  32.02	CurrentTime = 33 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*, 86 , 99 , 84 , 85 , 94 ,  6 , 96 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 86 	TimeWindow = [ 39 , 47 ]	BeginService =  38.80	CurrentTime = 40 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*, 85 , 99 , 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 85 	TimeWindow = [ 38 , 46 ]	BeginService =  41.06	CurrentTime = 42 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*, 99 , 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 99 	TimeWindow = [ 33 , 43 ]	BeginService =  42.63	CurrentTime = 44 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*, 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 84 	TimeWindow = [ 44 , 51 ]	BeginService =  44.66	CurrentTime = 46 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,  8 , 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 40 , 48 ]	BeginService =  46.86	CurrentTime = 48 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*, 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 49 	TimeWindow = [ 50 , 54 ]	BeginService =  50.40	CurrentTime = 51 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*, 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [ 52 , 63 ]	BeginService =  53.44	CurrentTime = 54 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*, 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [ 77 , 91 ]	BeginService =  77.30	CurrentTime = 78 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*, 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 60 	TimeWindow = [ 72 , 86 ]	BeginService =  80.14	CurrentTime = 81 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*, 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 17 	TimeWindow = [ 73 , 87 ]	BeginService =  82.41	CurrentTime = 83 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*, 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 91 	TimeWindow = [ 74 , 87 ]	BeginService =  84.90	CurrentTime = 86 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*, 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 100	TimeWindow = [ 80 , 97 ]	BeginService =  86.21	CurrentTime = 87 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*, 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 93 	TimeWindow = [ 81 , 97 ]	BeginService =  87.81	CurrentTime = 89 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*,*93*, 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 89 	TimeWindow = [ 76 , 92 ]	BeginService =  90.17	CurrentTime = 91 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*,*93*,*89*");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257718);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(4); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(92);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(4);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_c101_0_5_test() throws Exception {
        File file = Paths.get(rootDirectory, "c101-0.5.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: c101-0.5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 52 are a-priori known (available nodes excluding the depot) and 48 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.08090614886731391");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 73.23590361106349 (scalled value = 905.1957686327448); Number of vehicles used: 10");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=64.20493640460731 (scalled value = 793.5730139609464)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=61.97467358163835 (scalled value = 766.00696546905)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=59.48918313692532 (scalled value = 735.286303572397)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 96 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 53");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=59.55963901699469 (scalled value = 736.1571382500543)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 24 38 55 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 56");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=71.20008184390637 (scalled value = 880.0330115906828)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=63.58871859550919 (scalled value = 785.9565618404937)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=60.77037374689296 (scalled value = 751.121819511597)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("5 new nodes became available (known): 17 33 39 74 87 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 61");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=61.37580619838355 (scalled value = 758.6049646120207)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 19 63 78 83 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 65");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.83886734969599 (scalled value = 813.7684004422424)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=61.74342491852919 (scalled value = 763.1487319930209)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 25 41 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=62.06704951399845 (scalled value = 767.1487319930209)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 7 28 53 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 70");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.66544385366002 (scalled value = 823.9848860312379)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=62.811320817410646 (scalled value = 776.3479253031957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 40 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 72");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=63.669114123805684 (scalled value = 786.9502505702383)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 86 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 73");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=63.669114123805684 (scalled value = 786.9502505702383)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 44 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 74");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.394996162393 (scalled value = 833.0021525671775)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=63.704976770861656 (scalled value = 787.3935128878501)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 29 70 95 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 78");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.77942187228636 (scalled value = 800.6736543414595)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 27 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.79725249270136 (scalled value = 800.8940408097889)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 47 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.94406098313208 (scalled value = 802.7085937515125)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 23 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 81");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.28684251818449 (scalled value = 806.9453735247603)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.00673083593293 (scalled value = 803.483193132131)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 37 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 82");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.0682101306724 (scalled value = 804.2430772151109)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 83");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.24369945956842 (scalled value = 806.4121253202657)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 12 73 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 85");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.38298167809678 (scalled value = 808.1336535412763)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 91 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.22537768494531 (scalled value = 830.9056681859241)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.43383461340107 (scalled value = 808.7621958216373)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 93 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 87");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.43383461340106 (scalled value = 808.7621958216372)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 2 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 88");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.97708280447559 (scalled value = 815.4767434633183)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.95606779459817 (scalled value = 815.2169979412334)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 34 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=69.1026803373547 (scalled value = 854.1091289697041)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.95873206822891 (scalled value = 815.2499283633094)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 49 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.95873206822891 (scalled value = 815.2499283633094)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 88 99 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.9961231793274 (scalled value = 815.7120824964867)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 45 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.09091062878159 (scalled value = 816.8836553717405)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 4 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.15099151384396 (scalled value = 817.6262551111114)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 22 89 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=68.21323894669533 (scalled value = 843.1156333811542)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=66.37982865985902 (scalled value = 820.4546822358575)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 51 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.55531798875504 (scalled value = 822.6237303410123)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 75 80 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.77271614266013 (scalled value = 837.6707715232792)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=67.03386094701989 (scalled value = 828.5385213051659)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 50 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.0660895584817 (scalled value = 828.936866942834)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=10 total tours length=67.0660895584817 (scalled value = 828.936866942834)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 67 65 63 62 74 72 61 64 68 66 69 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 43 42 41 40 44 46 45 48 51 50 52 49 47 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 5 3 7 8 10 11 9 6 4 2 1 75 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 20 24 25 27 29 30 28 26 23 22 21 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 57 55 54 53 56 58 60 59 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 32 33 31 35 37 38 39 36 34 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 13 17 18 19 15 16 14 12 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 81 78 76 71 70 73 77 79 80 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 90 87 86 83 82 84 85 88 89 91 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 98 96 95 94 92 93 97 100 99 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 990");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9900");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 67 	TimeWindow = [  1 ,  6 ]	BeginService =   0.99	CurrentTime = 2  	Route = *67 , 65 , 62 , 72 , 61 , 64 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 65 	TimeWindow = [  6 , 10 ]	BeginService =   8.35	CurrentTime = 9  	Route = *67*,*65 , 63 , 62 , 74 , 72 , 61 , 64 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 63 	TimeWindow = [ 14 , 18 ]	BeginService =  15.79	CurrentTime = 17 	Route = *67*,*65*,*63 , 62 , 74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 62 	TimeWindow = [ 21 , 26 ]	BeginService =  23.48	CurrentTime = 24 	Route = *67*,*65*,*63*,*62 , 74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 29 , 33 ]	BeginService =  31.00	CurrentTime = 32 	Route = *67*,*65*,*63*,*62*,*74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [ 36 , 41 ]	BeginService =  38.69	CurrentTime = 40 	Route = *67*,*65*,*63*,*62*,*74*,*72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 61 	TimeWindow = [ 43 , 49 ]	BeginService =  46.21	CurrentTime = 47 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 64 	TimeWindow = [ 51 , 56 ]	BeginService =  53.66	CurrentTime = 55 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 68 	TimeWindow = [ 59 , 63 ]	BeginService =  61.18	CurrentTime = 62 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 66 	TimeWindow = [ 67 , 71 ]	BeginService =  68.90	CurrentTime = 70 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68*,*66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 69 	TimeWindow = [ 74 , 78 ]	BeginService =  76.34	CurrentTime = 77 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68*,*66*,*69 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 43 	TimeWindow = [  1 ,  6 ]	BeginService =   1.34	CurrentTime = 2  	Route = *43 , 42 , 46 , 48 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 42 	TimeWindow = [  6 , 12 ]	BeginService =   8.86	CurrentTime = 10 	Route = *43*,*42 , 41 , 46 , 48 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 41 	TimeWindow = [ 13 , 19 ]	BeginService =  16.31	CurrentTime = 17 	Route = *43*,*42*,*41 , 40 , 44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 40 	TimeWindow = [ 21 , 26 ]	BeginService =  23.75	CurrentTime = 25 	Route = *43*,*42*,*41*,*40 , 44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 44 	TimeWindow = [ 29 , 33 ]	BeginService =  31.27	CurrentTime = 32 	Route = *43*,*42*,*41*,*40*,*44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 46 	TimeWindow = [ 36 , 41 ]	BeginService =  38.78	CurrentTime = 40 	Route = *43*,*42*,*41*,*40*,*44*,*46 , 45 , 48 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 45 	TimeWindow = [ 44 , 49 ]	BeginService =  46.23	CurrentTime = 47 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45 , 48 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 48 	TimeWindow = [ 51 , 56 ]	BeginService =  53.67	CurrentTime = 55 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48 , 51 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 51 	TimeWindow = [ 59 , 64 ]	BeginService =  61.20	CurrentTime = 62 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51 , 50 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 50 	TimeWindow = [ 66 , 71 ]	BeginService =  68.66	CurrentTime = 70 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 52 	TimeWindow = [ 74 , 78 ]	BeginService =  76.20	CurrentTime = 77 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 49 	TimeWindow = [ 81 , 86 ]	BeginService =  83.72	CurrentTime = 85 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52*,*49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 47 	TimeWindow = [ 85 , 91 ]	BeginService =  91.16	CurrentTime = 92 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52*,*49*,*47 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 5  	TimeWindow = [  1 ,  5 ]	BeginService =   1.22	CurrentTime = 2  	Route = * 5 ,  3 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 3  	TimeWindow = [  5 , 12 ]	BeginService =   8.59	CurrentTime = 10 	Route = * 5*,* 3 ,  7 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [ 14 , 18 ]	BeginService =  16.03	CurrentTime = 17 	Route = * 5*,* 3*,* 7 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 8  	TimeWindow = [ 21 , 26 ]	BeginService =  23.54	CurrentTime = 25 	Route = * 5*,* 3*,* 7*,* 8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 10 	TimeWindow = [ 29 , 33 ]	BeginService =  31.11	CurrentTime = 32 	Route = * 5*,* 3*,* 7*,* 8*,*10 , 11 ,  9 ,  6 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 11 	TimeWindow = [ 36 , 41 ]	BeginService =  38.64	CurrentTime = 40 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11 ,  9 ,  6 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 9  	TimeWindow = [ 43 , 49 ]	BeginService =  46.18	CurrentTime = 47 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9 ,  6 ,  4 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 6  	TimeWindow = [ 50 , 57 ]	BeginService =  53.64	CurrentTime = 55 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6 ,  4 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 4  	TimeWindow = [ 59 , 63 ]	BeginService =  61.10	CurrentTime = 62 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4 ,  2 ,  1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 2  	TimeWindow = [ 67 , 70 ]	BeginService =  68.67	CurrentTime = 70 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2 ,  1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 1  	TimeWindow = [ 74 , 78 ]	BeginService =  76.12	CurrentTime = 77 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2*,* 1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 75 	TimeWindow = [ 81 , 86 ]	BeginService =  83.64	CurrentTime = 85 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2*,* 1*,*75 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 20 	TimeWindow = [  1 ,  6 ]	BeginService =   0.81	CurrentTime = 2  	Route = *20 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 24 	TimeWindow = [  5 , 12 ]	BeginService =   8.50	CurrentTime = 9  	Route = *20*,*24 , 25 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 25 	TimeWindow = [ 14 , 18 ]	BeginService =  15.94	CurrentTime = 17 	Route = *20*,*24*,*25 , 27 , 29 , 28 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 27 	TimeWindow = [ 21 , 26 ]	BeginService =  23.38	CurrentTime = 24 	Route = *20*,*24*,*25*,*27 , 29 , 30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 29 	TimeWindow = [ 29 , 33 ]	BeginService =  30.96	CurrentTime = 32 	Route = *20*,*24*,*25*,*27*,*29 , 30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 30 	TimeWindow = [ 36 , 41 ]	BeginService =  38.64	CurrentTime = 40 	Route = *20*,*24*,*25*,*27*,*29*,*30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 28 	TimeWindow = [ 44 , 48 ]	BeginService =  46.17	CurrentTime = 47 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 26 	TimeWindow = [ 50 , 57 ]	BeginService =  53.61	CurrentTime = 55 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26 , 23 , 22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 23 	TimeWindow = [ 59 , 63 ]	BeginService =  61.13	CurrentTime = 62 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23 , 22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 22 	TimeWindow = [ 66 , 71 ]	BeginService =  68.66	CurrentTime = 70 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23*,*22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 21 	TimeWindow = [ 74 , 78 ]	BeginService =  76.10	CurrentTime = 77 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23*,*22*,*21 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 57 	TimeWindow = [  3 ,  7 ]	BeginService =   2.83	CurrentTime = 4  	Route = *57 , 55 , 54 , 56 , 58 , 60 , 59 , 68 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 55 	TimeWindow = [  8 , 13 ]	BeginService =  10.28	CurrentTime = 11 	Route = *57*,*55 , 54 , 53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 54 	TimeWindow = [ 15 , 21 ]	BeginService =  17.96	CurrentTime = 19 	Route = *57*,*55*,*54 , 53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 53 	TimeWindow = [ 23 , 28 ]	BeginService =  25.68	CurrentTime = 27 	Route = *57*,*55*,*54*,*53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 56 	TimeWindow = [ 31 , 35 ]	BeginService =  33.28	CurrentTime = 34 	Route = *57*,*55*,*54*,*53*,*56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 58 	TimeWindow = [ 38 , 43 ]	BeginService =  40.73	CurrentTime = 42 	Route = *57*,*55*,*54*,*53*,*56*,*58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 60 	TimeWindow = [ 45 , 51 ]	BeginService =  48.25	CurrentTime = 49 	Route = *57*,*55*,*54*,*53*,*56*,*58*,*60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 59 	TimeWindow = [ 53 , 60 ]	BeginService =  56.38	CurrentTime = 57 	Route = *57*,*55*,*54*,*53*,*56*,*58*,*60*,*59 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 32 	TimeWindow = [  3 ,  8 ]	BeginService =   2.56	CurrentTime = 4  	Route = *32 , 31 , 35 , 38 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 33 	TimeWindow = [  7 , 13 ]	BeginService =  10.00	CurrentTime = 11 	Route = *32*,*33 , 31 , 35 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 31 	TimeWindow = [ 16 , 19 ]	BeginService =  17.72	CurrentTime = 19 	Route = *32*,*33*,*31 , 35 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 35 	TimeWindow = [ 23 , 28 ]	BeginService =  25.41	CurrentTime = 26 	Route = *32*,*33*,*31*,*35 , 37 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 37 	TimeWindow = [ 31 , 35 ]	BeginService =  33.16	CurrentTime = 34 	Route = *32*,*33*,*31*,*35*,*37 , 38 , 39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 38 	TimeWindow = [ 39 , 42 ]	BeginService =  40.60	CurrentTime = 42 	Route = *32*,*33*,*31*,*35*,*37*,*38 , 39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 39 	TimeWindow = [ 46 , 50 ]	BeginService =  48.29	CurrentTime = 49 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 36 	TimeWindow = [ 54 , 58 ]	BeginService =  55.97	CurrentTime = 57 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39*,*36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 34 	TimeWindow = [ 61 , 66 ]	BeginService =  63.50	CurrentTime = 64 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 13 	TimeWindow = [  2 ,  7 ]	BeginService =   2.49	CurrentTime = 3  	Route = *13 , 18 , 15 , 16 , 14 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 17 	TimeWindow = [  8 , 12 ]	BeginService =  10.10	CurrentTime = 11 	Route = *13*,*17 , 18 , 19 , 15 , 16 , 14 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 18 	TimeWindow = [ 14 , 21 ]	BeginService =  17.62	CurrentTime = 19 	Route = *13*,*17*,*18 , 19 , 15 , 16 , 14 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 19 	TimeWindow = [ 22 , 28 ]	BeginService =  25.31	CurrentTime = 26 	Route = *13*,*17*,*18*,*19 , 15 , 16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 15 	TimeWindow = [ 31 , 35 ]	BeginService =  32.99	CurrentTime = 34 	Route = *13*,*17*,*18*,*19*,*15 , 16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 16 	TimeWindow = [ 38 , 43 ]	BeginService =  40.68	CurrentTime = 42 	Route = *13*,*17*,*18*,*19*,*15*,*16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 14 	TimeWindow = [ 46 , 50 ]	BeginService =  48.12	CurrentTime = 49 	Route = *13*,*17*,*18*,*19*,*15*,*16*,*14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 12 	TimeWindow = [ 53 , 58 ]	BeginService =  55.65	CurrentTime = 57 	Route = *13*,*17*,*18*,*19*,*15*,*16*,*14*,*12 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 81 	TimeWindow = [  4 , 10 ]	BeginService =   3.84	CurrentTime = 5  	Route = *81 , 76 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 78 	TimeWindow = [  9 , 14 ]	BeginService =  11.36	CurrentTime = 12 	Route = *81*,*78 , 76 , 71 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 76 	TimeWindow = [ 16 , 21 ]	BeginService =  18.81	CurrentTime = 20 	Route = *81*,*78*,*76 , 71 , 70 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 71 	TimeWindow = [ 24 , 29 ]	BeginService =  26.49	CurrentTime = 27 	Route = *81*,*78*,*76*,*71 , 70 , 73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 70 	TimeWindow = [ 31 , 37 ]	BeginService =  34.18	CurrentTime = 35 	Route = *81*,*78*,*76*,*71*,*70 , 73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 73 	TimeWindow = [ 39 , 45 ]	BeginService =  41.70	CurrentTime = 43 	Route = *81*,*78*,*76*,*71*,*70*,*73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 77 	TimeWindow = [ 46 , 52 ]	BeginService =  49.31	CurrentTime = 50 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 79 	TimeWindow = [ 54 , 59 ]	BeginService =  56.67	CurrentTime = 58 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77*,*79 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 80 	TimeWindow = [ 62 , 66 ]	BeginService =  64.39	CurrentTime = 65 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77*,*79*,*80 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 90 	TimeWindow = [  2 ,  7 ]	BeginService =   1.67	CurrentTime = 3  	Route = *90 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 87 	TimeWindow = [  7 , 12 ]	BeginService =   9.35	CurrentTime = 10 	Route = *90*,*87 , 83 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 86 	TimeWindow = [ 14 , 19 ]	BeginService =  16.72	CurrentTime = 18 	Route = *90*,*87*,*86 , 83 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 83 	TimeWindow = [ 21 , 27 ]	BeginService =  24.48	CurrentTime = 25 	Route = *90*,*87*,*86*,*83 , 82 , 84 , 85 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 82 	TimeWindow = [ 30 , 34 ]	BeginService =  32.01	CurrentTime = 33 	Route = *90*,*87*,*86*,*83*,*82 , 84 , 85 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 84 	TimeWindow = [ 37 , 42 ]	BeginService =  39.76	CurrentTime = 41 	Route = *90*,*87*,*86*,*83*,*82*,*84 , 85 , 88 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 85 	TimeWindow = [ 45 , 50 ]	BeginService =  47.27	CurrentTime = 48 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85 , 88 , 89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 88 	TimeWindow = [ 52 , 57 ]	BeginService =  54.80	CurrentTime = 56 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88 , 89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 89 	TimeWindow = [ 60 , 65 ]	BeginService =  62.31	CurrentTime = 63 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88*,*89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 91 	TimeWindow = [ 68 , 72 ]	BeginService =  69.88	CurrentTime = 71 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88*,*89*,*91 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 98 	TimeWindow = [  2 ,  7 ]	BeginService =   2.49	CurrentTime = 3  	Route = *98 , 96 , 94 , 92 , 97 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 96 	TimeWindow = [  8 , 13 ]	BeginService =  10.21	CurrentTime = 11 	Route = *98*,*96 , 94 , 92 , 97 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 95 	TimeWindow = [ 16 , 19 ]	BeginService =  17.65	CurrentTime = 19 	Route = *98*,*96*,*95 , 94 , 92 , 97 , 100 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 94 	TimeWindow = [ 23 , 27 ]	BeginService =  25.23	CurrentTime = 26 	Route = *98*,*96*,*95*,*94 , 92 , 93 , 97 , 100 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 92 	TimeWindow = [ 30 , 36 ]	BeginService =  32.80	CurrentTime = 34 	Route = *98*,*96*,*95*,*94*,*92 , 93 , 97 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 93 	TimeWindow = [ 38 , 42 ]	BeginService =  40.24	CurrentTime = 41 	Route = *98*,*96*,*95*,*94*,*92*,*93 , 97 , 100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 97 	TimeWindow = [ 45 , 50 ]	BeginService =  47.93	CurrentTime = 49 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97 , 100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 100	TimeWindow = [ 52 , 59 ]	BeginService =  55.62	CurrentTime = 57 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97*,*100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 99 	TimeWindow = [ 60 , 66 ]	BeginService =  63.30	CurrentTime = 64 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97*,*100*,*99 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(5770.962375615753);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(441); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(99);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(10);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_c202_0_5_test() throws Exception {
        File file = Paths.get(rootDirectory, "c202-0.5.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: c202-0.5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 59 are a-priori known (available nodes excluding the depot) and 41 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.029498525073746312");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 22.419076268623538 (scalled value = 760.0066855063379); Number of vehicles used: 3");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=19.58997272007116 (scalled value = 664.1000752104123)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=18.299689222377765 (scalled value = 620.3594646386063)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=18.184516879685674 (scalled value = 616.4551222213444)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.13159262156016 (scalled value = 580.7609898708894)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=15.179802550219705 (scalled value = 514.595306452448)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 49 76 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 61");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=15.232353079236205 (scalled value = 516.3767693861074)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=14.933562102932006 (scalled value = 506.247755289395)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 30 35 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 63");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.20760864283416 (scalled value = 583.337932992078)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=16.049314501758385 (scalled value = 544.0717616096092)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=16.042274700725546 (scalled value = 543.833112354596)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 64 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 64");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=16.22428317640279 (scalled value = 550.0031996800545)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=16.22071019575223 (scalled value = 549.8820756360005)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=16.153830955439872 (scalled value = 547.6148693894116)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 61 68 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 66");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=16.218603732541872 (scalled value = 549.8106665331695)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=16.214327440974994 (scalled value = 549.6657002490523)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=15.333330705177495 (scalled value = 519.7999109055171)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 36 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=15.400573950217375 (scalled value = 522.079456912369)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=15.262311703499183 (scalled value = 517.3923667486223)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 60 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 68");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=15.594797202135048 (scalled value = 528.6636251523781)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 55 65 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 70");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=15.632399890662857 (scalled value = 529.9383562934709)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 39 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 71");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=15.718799070253848 (scalled value = 532.8672884816054)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 84 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 72");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=16.862598521508616 (scalled value = 571.6420898791421)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 43 89 90 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 75");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=18.63491631476864 (scalled value = 631.7236630706568)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=18.029952201428426 (scalled value = 611.2153796284236)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.65288929999363 (scalled value = 598.4329472697841)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 51 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 76");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.882759637688203 (scalled value = 606.2255517176301)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.000988722743216 (scalled value = 576.333517700995)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 41 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 77");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=18.651798938498565 (scalled value = 632.2959840151013)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.122963708542805 (scalled value = 580.4684697196011)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 18 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 78");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.811715662509307 (scalled value = 603.8171609590655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 4 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.819604675918068 (scalled value = 604.0845985136225)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.163626072548386 (scalled value = 581.8469238593902)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 56 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.163626072548382 (scalled value = 581.8469238593901)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.12515671561768 (scalled value = 580.5428126594394)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 15 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 81");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.13252181895887 (scalled value = 580.7924896627057)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.042473598693412 (scalled value = 577.7398549957067)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 58 70 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 84");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.267100005562607 (scalled value = 585.3546901885724)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=17.15969152130944 (scalled value = 581.71354257239)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 47 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 85");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.159691521309444 (scalled value = 581.7135425723901)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 88 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.159764571374424 (scalled value = 581.7160189695929)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 16 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 87");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.18848977113151 (scalled value = 582.6898032413583)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 13 44 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.352980245083607 (scalled value = 588.2660303083343)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 23 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.397277136789565 (scalled value = 589.7676949371663)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 10 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 91");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.398084729478672 (scalled value = 589.795072329327)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 40 86 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.62409907399469 (scalled value = 597.45695860842)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 19 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.6503742340055 (scalled value = 598.3476865327865)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 79 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.70296537088137 (scalled value = 600.1305260728784)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 45 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=17.735634813254403 (scalled value = 601.2380201693243)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 80 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=18.00075251455756 (scalled value = 610.2255102435014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 9 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=18.028496063190808 (scalled value = 611.1660165421683)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 87 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=19.27322652435531 (scalled value = 653.362379175645)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=18.886851686852957 (scalled value = 640.2642721843152)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 78 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=18.998196254059106 (scalled value = 644.0388530126037)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=3 total tours length=18.998196254059106 (scalled value = 644.0388530126037)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 67 63 62 74 72 61 64 66 69 68 65 49 55 54 53 56 58 60 59 57 40 44 46 45 51 50 52 47 43 42 41 48 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 20 22 24 27 30 29 6 32 33 31 35 37 38 39 36 34 28 26 23 18 19 16 14 12 15 17 13 25 9 11 10 8 21 91 90 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 93 5 75 2 1 99 100 97 92 95 94 98 7 3 4 89 88 84 86 83 82 76 71 70 73 80 79 81 85 78 77 87 96 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 1060");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 10600");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 67 	TimeWindow = [  0 ,  5 ]	BeginService =   0.36	CurrentTime = 1  	Route = *67 , 63 , 62 , 74 , 72 , 66 , 69 , 54 , 53 , 59 , 57 , 46 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 63 	TimeWindow = [  1 ,  5 ]	BeginService =   3.10	CurrentTime = 4  	Route = *67*,*63 , 62 , 74 , 66 , 69 , 72 , 49 , 54 , 53 , 57 , 46 , 59 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 62 	TimeWindow = [  4 ,  8 ]	BeginService =   5.91	CurrentTime = 7  	Route = *67*,*63*,*62 , 74 , 72 , 61 , 64 , 66 , 69 , 68 , 49 , 54 , 53 , 59 , 57 , 46 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [  6 , 11 ]	BeginService =   8.65	CurrentTime = 10 	Route = *67*,*63*,*62*,*74 , 72 , 61 , 64 , 66 , 69 , 68 , 49 , 54 , 53 , 59 , 57 , 46 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [  0 , 97 ]	BeginService =  11.45	CurrentTime = 13 	Route = *67*,*63*,*62*,*74*,*72 , 61 , 64 , 66 , 69 , 68 , 49 , 54 , 53 , 59 , 57 , 46 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 61 	TimeWindow = [ 12 , 17 ]	BeginService =  14.19	CurrentTime = 16 	Route = *67*,*63*,*62*,*74*,*72*,*61 , 64 , 66 , 69 , 68 , 65 , 49 , 55 , 54 , 53 , 59 , 60 , 57 , 46 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 64 	TimeWindow = [ 15 , 19 ]	BeginService =  16.91	CurrentTime = 19 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64 , 66 , 69 , 68 , 65 , 49 , 55 , 54 , 53 , 60 , 57 , 46 , 59 , 43 , 42 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 66 	TimeWindow = [ 17 , 22 ]	BeginService =  19.71	CurrentTime = 22 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66 , 69 , 68 , 65 , 49 , 55 , 54 , 53 , 60 , 59 , 57 , 46 , 51 , 50 , 43 , 42 , 41 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 69 	TimeWindow = [ 20 , 25 ]	BeginService =  22.43	CurrentTime = 25 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69 , 68 , 65 , 49 , 55 , 54 , 53 , 56 , 60 , 59 , 57 , 46 , 51 , 43 , 42 , 41 , 50 , 52 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 68 	TimeWindow = [ 23 , 28 ]	BeginService =  25.25	CurrentTime = 28 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68 , 65 , 49 , 55 , 54 , 53 , 56 , 60 , 59 , 57 , 46 , 51 , 50 , 52 , 48 , 43 , 42 , 41 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 65 	TimeWindow = [ 26 , 30 ]	BeginService =  28.07	CurrentTime = 31 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65 , 49 , 55 , 54 , 53 , 56 , 58 , 60 , 59 , 57 , 46 , 51 , 50 , 52 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 49 	TimeWindow = [ 29 , 33 ]	BeginService =  30.91	CurrentTime = 34 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49 , 55 , 54 , 53 , 56 , 58 , 60 , 59 , 57 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 55 	TimeWindow = [ 31 , 36 ]	BeginService =  33.80	CurrentTime = 37 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55 , 54 , 53 , 56 , 58 , 60 , 59 , 57 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 54 	TimeWindow = [ 34 , 39 ]	BeginService =  36.60	CurrentTime = 40 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54 , 53 , 56 , 58 , 60 , 59 , 57 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 53 	TimeWindow = [ 37 , 42 ]	BeginService =  39.41	CurrentTime = 43 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53 , 56 , 58 , 60 , 59 , 57 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 40 , 45 ]	BeginService =  42.19	CurrentTime = 46 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56 , 58 , 60 , 59 , 57 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 58 	TimeWindow = [ 43 , 47 ]	BeginService =  44.90	CurrentTime = 49 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58 , 60 , 59 , 57 , 40 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 60 	TimeWindow = [ 45 , 50 ]	BeginService =  47.64	CurrentTime = 52 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60 , 59 , 57 , 40 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 59 	TimeWindow = [  0 , 96 ]	BeginService =  50.47	CurrentTime = 55 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59 , 57 , 40 , 44 , 46 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 57 	TimeWindow = [ 51 , 56 ]	BeginService =  53.27	CurrentTime = 58 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57 , 40 , 44 , 46 , 45 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 40 	TimeWindow = [ 54 , 58 ]	BeginService =  56.03	CurrentTime = 61 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40 , 44 , 46 , 45 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 44 	TimeWindow = [ 56 , 61 ]	BeginService =  58.82	CurrentTime = 64 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44 , 46 , 45 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 46 	TimeWindow = [ 59 , 64 ]	BeginService =  61.63	CurrentTime = 67 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46 , 45 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 45 	TimeWindow = [ 62 , 67 ]	BeginService =  64.48	CurrentTime = 70 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45 , 51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 51 	TimeWindow = [ 65 , 70 ]	BeginService =  67.28	CurrentTime = 73 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51 , 50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 50 	TimeWindow = [  0 , 97 ]	BeginService =  70.00	CurrentTime = 76 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50 , 52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 52 	TimeWindow = [  0 , 97 ]	BeginService =  72.75	CurrentTime = 79 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52 , 47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 47 	TimeWindow = [ 73 , 78 ]	BeginService =  75.55	CurrentTime = 82 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52*,*47 , 43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 43 	TimeWindow = [ 76 , 81 ]	BeginService =  78.30	CurrentTime = 85 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52*,*47*,*43 , 42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 42 	TimeWindow = [ 79 , 83 ]	BeginService =  81.04	CurrentTime = 88 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52*,*47*,*43*,*42 , 41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 41 	TimeWindow = [ 81 , 86 ]	BeginService =  83.75	CurrentTime = 91 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52*,*47*,*43*,*42*,*41 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 48 	TimeWindow = [  0 , 97 ]	BeginService =  86.65	CurrentTime = 94 	Route = *67*,*63*,*62*,*74*,*72*,*61*,*64*,*66*,*69*,*68*,*65*,*49*,*55*,*54*,*53*,*56*,*58*,*60*,*59*,*57*,*40*,*44*,*46*,*45*,*51*,*50*,*52*,*47*,*43*,*42*,*41*,*48 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 20 	TimeWindow = [  0 ,  5 ]	BeginService =   0.29	CurrentTime = 1  	Route = *20 , 22 , 24 , 27 , 29 ,  6 , 31 , 32 , 33 , 37 , 38 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 22 	TimeWindow = [  1 ,  5 ]	BeginService =   3.03	CurrentTime = 4  	Route = *20*,*22 , 24 , 27 , 30 , 29 ,  6 , 32 , 33 , 31 , 35 , 37 , 38 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 24 	TimeWindow = [  3 ,  8 ]	BeginService =   5.79	CurrentTime = 7  	Route = *20*,*22*,*24 , 27 , 30 , 29 ,  6 , 32 , 33 , 31 , 35 , 38 , 37 , 34 , 28 , 26 , 12 , 14 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 27 	TimeWindow = [  6 , 11 ]	BeginService =   8.53	CurrentTime = 10 	Route = *20*,*22*,*24*,*27 , 30 , 29 ,  6 , 32 , 33 , 31 , 35 , 37 , 38 , 36 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 30 	TimeWindow = [  9 , 14 ]	BeginService =  11.31	CurrentTime = 13 	Route = *20*,*22*,*24*,*27*,*30 , 29 ,  6 , 32 , 33 , 31 , 35 , 37 , 38 , 36 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 29 	TimeWindow = [ 12 , 16 ]	BeginService =  14.12	CurrentTime = 16 	Route = *20*,*22*,*24*,*27*,*30*,*29 ,  6 , 32 , 33 , 31 , 35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 6  	TimeWindow = [ 15 , 19 ]	BeginService =  17.03	CurrentTime = 19 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6 , 32 , 33 , 31 , 35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 32 	TimeWindow = [ 17 , 22 ]	BeginService =  19.88	CurrentTime = 22 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32 , 33 , 31 , 35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 12 , 18 , 14 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 33 	TimeWindow = [ 20 , 25 ]	BeginService =  22.59	CurrentTime = 25 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33 , 31 , 35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 18 , 14 , 12 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 31 	TimeWindow = [  0 , 96 ]	BeginService =  25.40	CurrentTime = 28 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31 , 35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 18 , 14 , 12 , 15 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 35 	TimeWindow = [ 26 , 31 ]	BeginService =  28.21	CurrentTime = 31 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35 , 37 , 38 , 39 , 36 , 34 , 28 , 26 , 18 , 14 , 12 , 15 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 37 	TimeWindow = [  0 , 96 ]	BeginService =  31.03	CurrentTime = 34 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37 , 38 , 39 , 36 , 34 , 28 , 26 , 18 , 14 , 12 , 15 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 38 	TimeWindow = [ 31 , 36 ]	BeginService =  33.75	CurrentTime = 37 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38 , 39 , 36 , 34 , 28 , 26 , 18 , 16 , 14 , 12 , 15 , 17 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 39 	TimeWindow = [ 34 , 39 ]	BeginService =  36.55	CurrentTime = 40 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39 , 36 , 34 , 28 , 26 , 18 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 36 	TimeWindow = [ 37 , 42 ]	BeginService =  39.35	CurrentTime = 43 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36 , 34 , 28 , 26 , 23 , 18 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 34 	TimeWindow = [  0 , 96 ]	BeginService =  42.09	CurrentTime = 46 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34 , 28 , 26 , 23 , 18 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 28 	TimeWindow = [ 43 , 47 ]	BeginService =  45.07	CurrentTime = 49 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28 , 26 , 23 , 18 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 26 	TimeWindow = [  0 , 96 ]	BeginService =  47.96	CurrentTime = 52 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26 , 23 , 18 , 19 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 23 	TimeWindow = [ 48 , 53 ]	BeginService =  50.83	CurrentTime = 55 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23 , 18 , 19 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 18 	TimeWindow = [ 51 , 56 ]	BeginService =  53.75	CurrentTime = 58 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18 , 19 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 19 	TimeWindow = [ 54 , 59 ]	BeginService =  56.55	CurrentTime = 61 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19 , 16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 16 	TimeWindow = [ 57 , 62 ]	BeginService =  59.41	CurrentTime = 64 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16 , 14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 14 	TimeWindow = [ 60 , 64 ]	BeginService =  62.13	CurrentTime = 67 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14 , 12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 12 	TimeWindow = [  0 , 96 ]	BeginService =  64.87	CurrentTime = 70 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12 , 15 , 17 , 13 , 25 , 11 , 10 ,  8 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 15 	TimeWindow = [ 65 , 70 ]	BeginService =  67.74	CurrentTime = 73 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15 , 17 , 13 , 25 ,  9 , 11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 17 	TimeWindow = [ 68 , 73 ]	BeginService =  70.55	CurrentTime = 76 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17 , 13 , 25 ,  9 , 11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 13 	TimeWindow = [ 71 , 76 ]	BeginService =  73.32	CurrentTime = 79 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13 , 25 ,  9 , 11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 25 	TimeWindow = [ 74 , 79 ]	BeginService =  76.24	CurrentTime = 82 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25 ,  9 , 11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 9  	TimeWindow = [ 77 , 81 ]	BeginService =  79.11	CurrentTime = 85 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9 , 11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 11 	TimeWindow = [ 80 , 84 ]	BeginService =  81.97	CurrentTime = 88 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11 , 10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 10 	TimeWindow = [ 82 , 87 ]	BeginService =  84.72	CurrentTime = 91 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11*,*10 ,  8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 8  	TimeWindow = [ 85 , 90 ]	BeginService =  87.55	CurrentTime = 94 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11*,*10*,* 8 , 21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 21 	TimeWindow = [  0 , 97 ]	BeginService =  90.37	CurrentTime = 97 	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11*,*10*,* 8*,*21 , 91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 91 	TimeWindow = [  0 , 97 ]	BeginService =  93.92	CurrentTime = 100	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11*,*10*,* 8*,*21*,*91 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 90 	TimeWindow = [ 92 , 97 ]	BeginService =  96.72	CurrentTime = 103	Route = *20*,*22*,*24*,*27*,*30*,*29*,* 6*,*32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34*,*28*,*26*,*23*,*18*,*19*,*16*,*14*,*12*,*15*,*17*,*13*,*25*,* 9*,*11*,*10*,* 8*,*21*,*91*,*90 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 93 	TimeWindow = [  0 ,  5 ]	BeginService =   0.24	CurrentTime = 1  	Route = *93 ,  5 , 75 ,  2 ,  1 , 99 , 100 , 97 , 92 , 94 , 98 , 95 ,  7 ,  3 , 91 , 83 , 82 , 85 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 5  	TimeWindow = [  0 , 97 ]	BeginService =   3.10	CurrentTime = 4  	Route = *93*,* 5 , 75 ,  2 ,  1 , 99 , 100 , 97 , 92 , 94 , 95 , 98 ,  3 ,  7 , 91 , 83 , 82 , 85 , 76 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 75 	TimeWindow = [  0 , 97 ]	BeginService =   5.85	CurrentTime = 7  	Route = *93*,* 5*,*75 ,  2 ,  1 , 99 , 100 , 97 , 92 , 94 , 95 , 98 ,  3 ,  7 , 91 , 83 , 82 , 85 , 76 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 2  	TimeWindow = [  0 , 97 ]	BeginService =   8.65	CurrentTime = 10 	Route = *93*,* 5*,*75*,* 2 ,  1 , 99 , 100 , 97 , 92 , 94 , 95 , 98 ,  7 ,  3 , 91 , 83 , 82 , 85 , 76 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 1  	TimeWindow = [  0 , 97 ]	BeginService =  11.56	CurrentTime = 13 	Route = *93*,* 5*,*75*,* 2*,* 1 , 99 , 100 , 97 , 92 , 94 , 95 , 98 ,  7 ,  3 , 91 , 83 , 82 , 85 , 76 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 99 	TimeWindow = [ 12 , 17 ]	BeginService =  14.39	CurrentTime = 16 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99 , 100 , 97 , 92 , 94 , 95 , 98 ,  7 ,  3 , 91 , 83 , 82 , 85 , 76 , 73 , 81 , 77 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 100	TimeWindow = [ 15 , 20 ]	BeginService =  17.19	CurrentTime = 19 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100 , 97 , 92 , 94 , 95 , 98 ,  7 ,  3 , 89 , 91 , 84 , 85 , 76 , 73 , 81 , 96 , 77 , 82 , 83 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [ 18 , 22 ]	BeginService =  19.99	CurrentTime = 22 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97 , 92 , 94 , 95 , 98 ,  7 ,  3 , 89 , 91 , 84 , 85 , 76 , 73 , 81 , 96 , 77 , 82 , 83 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 92 	TimeWindow = [ 20 , 25 ]	BeginService =  22.85	CurrentTime = 25 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92 , 94 , 95 , 98 ,  7 ,  3 ,  4 , 89 , 91 , 84 , 85 , 76 , 73 , 81 , 96 , 77 , 82 , 83 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 95 	TimeWindow = [  0 , 96 ]	BeginService =  25.72	CurrentTime = 28 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95 , 94 , 98 ,  7 ,  3 ,  4 , 89 , 91 , 84 , 83 , 82 , 76 , 73 , 81 , 85 , 77 , 96 , 90 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 94 	TimeWindow = [  0 , 96 ]	BeginService =  28.48	CurrentTime = 31 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94 , 98 ,  7 ,  3 ,  4 , 89 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 98 	TimeWindow = [  0 , 96 ]	BeginService =  31.42	CurrentTime = 34 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98 ,  7 ,  3 ,  4 , 89 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [  0 , 97 ]	BeginService =  34.23	CurrentTime = 37 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7 ,  3 ,  4 , 89 , 88 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 3  	TimeWindow = [  0 , 96 ]	BeginService =  37.00	CurrentTime = 40 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3 ,  4 , 89 , 88 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 4  	TimeWindow = [ 37 , 42 ]	BeginService =  39.76	CurrentTime = 43 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4 , 89 , 88 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 89 	TimeWindow = [ 40 , 45 ]	BeginService =  42.55	CurrentTime = 46 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89 , 88 , 84 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 88 	TimeWindow = [ 46 , 50 ]	BeginService =  45.60	CurrentTime = 49 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88 , 84 , 86 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 84 	TimeWindow = [ 48 , 53 ]	BeginService =  48.42	CurrentTime = 52 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84 , 86 , 83 , 82 , 76 , 71 , 70 , 73 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 86 	TimeWindow = [ 51 , 56 ]	BeginService =  51.22	CurrentTime = 55 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86 , 83 , 82 , 76 , 71 , 70 , 73 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 83 	TimeWindow = [  0 , 96 ]	BeginService =  54.05	CurrentTime = 58 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83 , 82 , 76 , 71 , 70 , 73 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 82 	TimeWindow = [  0 , 96 ]	BeginService =  56.80	CurrentTime = 61 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82 , 76 , 71 , 70 , 73 , 80 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 76 	TimeWindow = [ 63 , 68 ]	BeginService =  62.86	CurrentTime = 64 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76 , 71 , 70 , 73 , 80 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 71 	TimeWindow = [ 66 , 70 ]	BeginService =  65.66	CurrentTime = 67 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71 , 70 , 73 , 80 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 70 	TimeWindow = [ 68 , 73 ]	BeginService =  68.47	CurrentTime = 70 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70 , 73 , 80 , 79 , 81 , 85 , 77 , 96 , 90 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 73 	TimeWindow = [ 71 , 76 ]	BeginService =  71.21	CurrentTime = 73 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73 , 80 , 79 , 81 , 85 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 80 	TimeWindow = [ 74 , 79 ]	BeginService =  74.13	CurrentTime = 76 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80 , 79 , 81 , 85 , 78 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 79 	TimeWindow = [ 77 , 82 ]	BeginService =  76.94	CurrentTime = 79 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79 , 81 , 85 , 78 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 81 	TimeWindow = [ 80 , 84 ]	BeginService =  79.76	CurrentTime = 82 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81 , 85 , 78 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 85 	TimeWindow = [  0 , 96 ]	BeginService =  82.74	CurrentTime = 85 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81*,*85 , 78 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 78 	TimeWindow = [ 83 , 87 ]	BeginService =  85.69	CurrentTime = 88 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81*,*85*,*78 , 77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 77 	TimeWindow = [ 86 , 90 ]	BeginService =  88.57	CurrentTime = 91 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81*,*85*,*78*,*77 , 87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 87 	TimeWindow = [ 91 , 96 ]	BeginService =  91.47	CurrentTime = 94 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81*,*85*,*78*,*77*,*87 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [  0 , 97 ]	BeginService =  94.31	CurrentTime = 97 	Route = *93*,* 5*,*75*,* 2*,* 1*,*99*,*100*,*97*,*92*,*95*,*94*,*98*,* 7*,* 3*,* 4*,*89*,*88*,*84*,*86*,*83*,*82*,*76*,*71*,*70*,*73*,*80*,*79*,*81*,*85*,*78*,*77*,*87*,*96 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(5942.811573417773);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(2);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(223); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(106);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(3);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_rc101_0_1_test() throws Exception {
        File file = Paths.get(rootDirectory, "rc101-0.1.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: rc101-0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 90 are a-priori known (available nodes excluding the depot) and 10 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.4166666666666667");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 701.8773993864899 (scalled value = 1684.5057585275756); Number of vehicles used: 16");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=713.942611488743 (scalled value = 1713.462267572983)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=682.5858781811706 (scalled value = 1638.2061076348095)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 16 62 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=16 total tours length=721.202556089937 (scalled value = 1730.8861346158487)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=677.7873993497284 (scalled value = 1626.689758439348)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 47 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=17 total tours length=709.7270125109563 (scalled value = 1703.344830026295)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=17 total tours length=706.1223775630843 (scalled value = 1694.6937061514022)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=714.3606069476829 (scalled value = 1714.4654566744389)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=705.06095843263 (scalled value = 1692.1463002383118)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=701.033980203672 (scalled value = 1682.4815524888127)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=693.3803075806346 (scalled value = 1664.112738193523)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 57 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=16 total tours length=695.908624105386 (scalled value = 1670.1806978529264)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=686.9344417722258 (scalled value = 1648.6426602533418)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=697.6077463660896 (scalled value = 1674.2585912786149)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=688.1346678486855 (scalled value = 1651.523202836845)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=685.4340021750867 (scalled value = 1645.0416052202079)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=684.6362135918353 (scalled value = 1643.1269126204045)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 15 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=16 total tours length=717.3810180991488 (scalled value = 1721.714443437957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=708.1399795140006 (scalled value = 1699.5359508336014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=716.8417917976456 (scalled value = 1720.4203003143493)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=698.0425392121747 (scalled value = 1675.302094109219)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=694.3601785483397 (scalled value = 1666.4644285160152)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=690.5076556429962 (scalled value = 1657.2183735431906)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 4 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=693.342730970284 (scalled value = 1664.0225543286815)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 6 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=16 total tours length=721.0941073125285 (scalled value = 1730.6258575500683)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=736.6996051127682 (scalled value = 1768.0790522706434)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=726.267358785778 (scalled value = 1743.0416610858672)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 86 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=16 total tours length=753.1027624326191 (scalled value = 1807.4466298382858)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=748.9410158981756 (scalled value = 1797.4584381556213)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=746.4403065083043 (scalled value = 1791.4567356199302)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=16 total tours length=740.3882984266373 (scalled value = 1776.9319162239294)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=760.2238469265533 (scalled value = 1824.5372326237277)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=752.6732185932428 (scalled value = 1806.4157246237828)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 80 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=752.6754803680109 (scalled value = 1806.4211528832261)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=746.806411913987 (scalled value = 1792.3353885935685)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=736.9131827555875 (scalled value = 1768.59163861341)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=734.6377367913693 (scalled value = 1763.1305682992863)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=733.5264902229753 (scalled value = 1760.4635765351406)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=732.4181735817805 (scalled value = 1757.803616596273)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 91 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=741.0844043699775 (scalled value = 1778.602570487946)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=735.7555467031121 (scalled value = 1765.813312087469)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=735.7310920968372 (scalled value = 1765.7546210324092)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=734.7263737008011 (scalled value = 1763.3432968819225)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=15 total tours length=734.7263737008011 (scalled value = 1763.3432968819225)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 82 52 99 86 57 66 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 65 69 98 88 53 78 60 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 14 47 15 16 9 10 13 17 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 33 28 30 50 56 91 80 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 72 44 61 81 43 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 92 64 84 85 89 48 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 42 39 36 38 40 41 37 35 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 83 23 21 19 18 25 77 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 59 75 87 97 74 58 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 11 12 90 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 45 5 2 7 8 46 3 1 4 100 70 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 95 62 67 71 94 96 54 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 63 76 51 22 49 20 24 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 31 29 27 34 26 32 93 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 73 79 6 55 68 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 900");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9000");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 82 	TimeWindow = [ 18 , 30 ]	BeginService =  17.50	CurrentTime = 19 	Route = *82 , 12 , 73 , 79 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 52 	TimeWindow = [ 22 , 34 ]	BeginService =  27.15	CurrentTime = 28 	Route = *82*,*52 , 99 , 86 , 57 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 99 	TimeWindow = [ 32 , 45 ]	BeginService =  33.44	CurrentTime = 34 	Route = *82*,*52*,*99 , 86 , 57 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 86 	TimeWindow = [ 36 , 49 ]	BeginService =  42.64	CurrentTime = 44 	Route = *82*,*52*,*99*,*86 , 57 , 74 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 57 	TimeWindow = [ 40 , 53 ]	BeginService =  50.58	CurrentTime = 52 	Route = *82*,*52*,*99*,*86*,*57 , 74 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 66 	TimeWindow = [ 55 , 68 ]	BeginService =  61.53	CurrentTime = 63 	Route = *82*,*52*,*99*,*86*,*57*,*66 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 65 	TimeWindow = [  5 , 17 ]	BeginService =   4.66	CurrentTime = 7  	Route = *65 , 99 ,  9 , 97 , 58 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 65 	TimeWindow = [  5 , 17 ]	BeginService =   4.66	CurrentTime = 8  	Route = *65 , 82 , 52 , 99 , 57 , 20 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 69 	TimeWindow = [ 17 , 30 ]	BeginService =  17.08	CurrentTime = 18 	Route = *65*,*69 , 98 , 88 , 53 , 78 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 98 	TimeWindow = [ 19 , 32 ]	BeginService =  23.33	CurrentTime = 24 	Route = *65*,*69*,*98 , 88 , 53 , 78 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 88 	TimeWindow = [ 28 , 40 ]	BeginService =  30.14	CurrentTime = 31 	Route = *65*,*69*,*98*,*88 , 53 , 78 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 53 	TimeWindow = [ 38 , 50 ]	BeginService =  38.03	CurrentTime = 39 	Route = *65*,*69*,*98*,*88*,*53 , 78 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 78 	TimeWindow = [ 38 , 50 ]	BeginService =  47.79	CurrentTime = 49 	Route = *65*,*69*,*98*,*88*,*53*,*78 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 60 	TimeWindow = [ 65 , 77 ]	BeginService =  64.58	CurrentTime = 66 	Route = *65*,*69*,*98*,*88*,*53*,*78*,*60 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 14 	TimeWindow = [ 15 , 27 ]	BeginService =  14.73	CurrentTime = 16 	Route = *14 , 47 , 15 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 14 	TimeWindow = [ 15 , 27 ]	BeginService =  14.73	CurrentTime = 17 	Route = *14 , 47 , 15 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 14 	TimeWindow = [ 15 , 27 ]	BeginService =  14.73	CurrentTime = 18 	Route = *14 , 47 , 15 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 47 	TimeWindow = [ 19 , 31 ]	BeginService =  20.15	CurrentTime = 21 	Route = *14*,*47 , 15 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 15 	TimeWindow = [ 24 , 37 ]	BeginService =  26.40	CurrentTime = 27 	Route = *14*,*47*,*15 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 16 	TimeWindow = [ 30 , 43 ]	BeginService =  31.40	CurrentTime = 32 	Route = *14*,*47*,*15*,*16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 9  	TimeWindow = [ 38 , 50 ]	BeginService =  40.22	CurrentTime = 41 	Route = *14*,*47*,*15*,*16*,* 9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 10 	TimeWindow = [ 50 , 62 ]	BeginService =  49.58	CurrentTime = 51 	Route = *14*,*47*,*15*,*16*,* 9*,*10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 13 	TimeWindow = [ 59 , 72 ]	BeginService =  59.17	CurrentTime = 60 	Route = *14*,*47*,*15*,*16*,* 9*,*10*,*13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 17 	TimeWindow = [ 62 , 75 ]	BeginService =  67.99	CurrentTime = 69 	Route = *14*,*47*,*15*,*16*,* 9*,*10*,*13*,*17 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 33 	TimeWindow = [ 21 , 34 ]	BeginService =  21.45	CurrentTime = 22 	Route = *33 , 28 , 27 , 26 , 32 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 28 	TimeWindow = [ 26 , 38 ]	BeginService =  29.20	CurrentTime = 30 	Route = *33*,*28 , 27 , 26 , 32 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 30 	TimeWindow = [ 31 , 43 ]	BeginService =  35.03	CurrentTime = 36 	Route = *33*,*28*,*30 , 34 , 50 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 50 	TimeWindow = [ 48 , 61 ]	BeginService =  48.33	CurrentTime = 49 	Route = *33*,*28*,*30*,*50 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 56 	TimeWindow = [ 54 , 67 ]	BeginService =  61.67	CurrentTime = 63 	Route = *33*,*28*,*30*,*50*,*56 , 91 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 91 	TimeWindow = [ 70 , 82 ]	BeginService =  69.58	CurrentTime = 71 	Route = *33*,*28*,*30*,*50*,*56*,*91 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 80 	TimeWindow = [ 80 , 93 ]	BeginService =  80.00	CurrentTime = 81 	Route = *33*,*28*,*30*,*50*,*56*,*91*,*80 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 14 	TimeWindow = [ 15 , 27 ]	BeginService =  14.73	CurrentTime = 16 	Route = *14 , 47 , 12 , 11 , 16 ,  9 , 10 , 13 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 44 	TimeWindow = [ 27 , 39 ]	BeginService =  26.67	CurrentTime = 28 	Route = *72*,*44 , 61 , 81 , 43 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 61 	TimeWindow = [ 28 , 40 ]	BeginService =  39.05	CurrentTime = 40 	Route = *72*,*44*,*61 , 81 , 43 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 81 	TimeWindow = [ 36 , 48 ]	BeginService =  46.58	CurrentTime = 48 	Route = *72*,*44*,*61*,*81 , 43 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 43 	TimeWindow = [ 53 , 66 ]	BeginService =  62.27	CurrentTime = 63 	Route = *72*,*44*,*61*,*81*,*43 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 64 	TimeWindow = [ 22 , 35 ]	BeginService =  22.08	CurrentTime = 23 	Route = *92*,*64 , 19 , 18 , 22 , 49 , 24 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 84 	TimeWindow = [ 40 , 53 ]	BeginService =  40.00	CurrentTime = 41 	Route = *92*,*64*,*84 , 85 , 89 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 85 	TimeWindow = [ 36 , 49 ]	BeginService =  47.70	CurrentTime = 49 	Route = *92*,*64*,*84*,*85 , 89 , 91 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 89 	TimeWindow = [ 60 , 73 ]	BeginService =  60.00	CurrentTime = 61 	Route = *92*,*64*,*84*,*85*,*89 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 48 	TimeWindow = [ 63 , 75 ]	BeginService =  74.58	CurrentTime = 76 	Route = *92*,*64*,*84*,*85*,*89*,*48 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 42 	TimeWindow = [ 14 , 26 ]	BeginService =  13.98	CurrentTime = 16 	Route = *42 , 44 , 38 , 41 , 54 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 42 	TimeWindow = [ 14 , 26 ]	BeginService =  13.98	CurrentTime = 17 	Route = *42 , 44 , 38 , 41 , 54 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 39 	TimeWindow = [ 15 , 28 ]	BeginService =  20.23	CurrentTime = 21 	Route = *42*,*39 , 36 , 38 , 40 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 36 	TimeWindow = [ 18 , 30 ]	BeginService =  27.34	CurrentTime = 28 	Route = *42*,*39*,*36 , 38 , 40 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 38 	TimeWindow = [ 31 , 44 ]	BeginService =  33.93	CurrentTime = 35 	Route = *42*,*39*,*36*,*38 , 40 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 40 	TimeWindow = [ 35 , 48 ]	BeginService =  40.35	CurrentTime = 41 	Route = *42*,*39*,*36*,*38*,*40 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 41 	TimeWindow = [ 38 , 51 ]	BeginService =  48.76	CurrentTime = 50 	Route = *42*,*39*,*36*,*38*,*40*,*41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 37 	TimeWindow = [ 52 , 64 ]	BeginService =  57.05	CurrentTime = 58 	Route = *42*,*39*,*36*,*38*,*40*,*41*,*37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 35 	TimeWindow = [ 58 , 70 ]	BeginService =  62.72	CurrentTime = 64 	Route = *42*,*39*,*36*,*38*,*40*,*41*,*37*,*35 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 23 	TimeWindow = [ 27 , 40 ]	BeginService =  29.59	CurrentTime = 31 	Route = *83*,*23 , 21 , 84 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 21 	TimeWindow = [ 28 , 40 ]	BeginService =  34.59	CurrentTime = 36 	Route = *83*,*23*,*21 , 19 , 18 , 49 , 20 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 19 	TimeWindow = [ 30 , 43 ]	BeginService =  41.00	CurrentTime = 42 	Route = *83*,*23*,*21*,*19 , 18 , 49 , 20 , 24 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 18 	TimeWindow = [ 36 , 49 ]	BeginService =  47.41	CurrentTime = 48 	Route = *83*,*23*,*21*,*19*,*18 , 48 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 25 	TimeWindow = [ 64 , 77 ]	BeginService =  64.17	CurrentTime = 65 	Route = *83*,*23*,*21*,*19*,*18*,*25 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 77 	TimeWindow = [ 63 , 75 ]	BeginService =  73.40	CurrentTime = 74 	Route = *83*,*23*,*21*,*19*,*18*,*25*,*77 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 72 	TimeWindow = [ 13 , 25 ]	BeginService =  12.50	CurrentTime = 14 	Route = *72 , 39 , 36 , 40 , 38 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 72 	TimeWindow = [ 13 , 25 ]	BeginService =  12.50	CurrentTime = 15 	Route = *72 , 39 , 36 , 40 , 38 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 75 	TimeWindow = [ 31 , 43 ]	BeginService =  30.83	CurrentTime = 32 	Route = *59*,*75 , 87 , 97 , 77 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 87 	TimeWindow = [ 38 , 50 ]	BeginService =  43.44	CurrentTime = 44 	Route = *59*,*75*,*87 , 97 , 58 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 97 	TimeWindow = [ 50 , 63 ]	BeginService =  51.77	CurrentTime = 53 	Route = *59*,*75*,*87*,*97 , 58 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 74 	TimeWindow = [ 59 , 71 ]	BeginService =  62.66	CurrentTime = 64 	Route = *59*,*75*,*87*,*97*,*74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 58 	TimeWindow = [ 63 , 76 ]	BeginService =  71.48	CurrentTime = 72 	Route = *59*,*75*,*87*,*97*,*74*,*58 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 72 	TimeWindow = [ 13 , 25 ]	BeginService =  12.50	CurrentTime = 14 	Route = *72 , 39 , 36 , 40 , 43 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 83 	TimeWindow = [ 15 , 27 ]	BeginService =  14.58	CurrentTime = 17 	Route = *83 , 64 , 19 , 18 , 22 , 49 , 20 , 24 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 83 	TimeWindow = [ 15 , 27 ]	BeginService =  14.58	CurrentTime = 18 	Route = *83 , 64 , 19 , 18 , 22 , 49 , 20 , 24 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 59 	TimeWindow = [ 18 , 30 ]	BeginService =  17.68	CurrentTime = 21 	Route = *59 , 75 , 87 , 97 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 11 	TimeWindow = [ 25 , 37 ]	BeginService =  24.58	CurrentTime = 28 	Route = *11 , 12 , 90 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 12 	TimeWindow = [ 27 , 39 ]	BeginService =  30.83	CurrentTime = 32 	Route = *11*,*12 , 90 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 90 	TimeWindow = [ 36 , 48 ]	BeginService =  47.11	CurrentTime = 48 	Route = *11*,*12*,*90 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 92 	TimeWindow = [  6 , 18 ]	BeginService =   6.15	CurrentTime = 8  	Route = *92 , 62 , 67 , 71 , 94 , 96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 92 	TimeWindow = [  6 , 18 ]	BeginService =   6.15	CurrentTime = 9  	Route = *92 , 62 , 67 , 71 , 94 , 96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 42 	TimeWindow = [ 14 , 26 ]	BeginService =  13.98	CurrentTime = 15 	Route = *42 , 44 , 43 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 5  	TimeWindow = [ 17 , 30 ]	BeginService =  21.14	CurrentTime = 23 	Route = *45*,* 5 ,  2 ,  7 ,  8 ,  3 , 46 ,  4 ,  1 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 2  	TimeWindow = [ 21 , 33 ]	BeginService =  29.56	CurrentTime = 31 	Route = *45*,* 5*,* 2 ,  7 ,  6 ,  8 , 46 ,  4 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 7  	TimeWindow = [ 33 , 45 ]	BeginService =  36.64	CurrentTime = 38 	Route = *45*,* 5*,* 2*,* 7 ,  8 , 46 ,  3 ,  1 ,  4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 8  	TimeWindow = [ 38 , 50 ]	BeginService =  42.89	CurrentTime = 44 	Route = *45*,* 5*,* 2*,* 7*,* 8 , 46 ,  3 ,  1 ,  4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 46 	TimeWindow = [ 47 , 60 ]	BeginService =  48.31	CurrentTime = 49 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46 ,  3 ,  1 ,  4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 3  	TimeWindow = [ 45 , 58 ]	BeginService =  55.14	CurrentTime = 56 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46*,* 3 ,  1 ,  4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 1  	TimeWindow = [ 60 , 73 ]	BeginService =  60.56	CurrentTime = 62 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46*,* 3*,* 1 ,  4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 4  	TimeWindow = [ 59 , 71 ]	BeginService =  67.67	CurrentTime = 69 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46*,* 3*,* 1*,* 4 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 100	TimeWindow = [ 75 , 88 ]	BeginService =  78.93	CurrentTime = 80 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46*,* 3*,* 1*,* 4*,*100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 70 	TimeWindow = [ 75 , 88 ]	BeginService =  84.96	CurrentTime = 86 	Route = *45*,* 5*,* 2*,* 7*,* 8*,*46*,* 3*,* 1*,* 4*,*100*,*70 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 65 	TimeWindow = [  5 , 17 ]	BeginService =   4.66	CurrentTime = 6  	Route = *65 , 59 , 75 , 87 , 74 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 59 	TimeWindow = [ 18 , 30 ]	BeginService =  17.68	CurrentTime = 19 	Route = *59 , 75 , 87 , 97 , 58 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 95 	TimeWindow = [ 14 , 27 ]	BeginService =  14.17	CurrentTime = 22 	Route = *95 , 62 , 67 , 71 , 94 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 62 	TimeWindow = [ 22 , 34 ]	BeginService =  22.17	CurrentTime = 24 	Route = *95*,*62 , 67 , 71 , 94 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 67 	TimeWindow = [ 29 , 42 ]	BeginService =  29.29	CurrentTime = 30 	Route = *95*,*62*,*67 , 71 , 94 , 96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 71 	TimeWindow = [ 27 , 40 ]	BeginService =  38.89	CurrentTime = 40 	Route = *95*,*62*,*67*,*71 , 94 , 96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 94 	TimeWindow = [ 40 , 52 ]	BeginService =  47.48	CurrentTime = 48 	Route = *95*,*62*,*67*,*71*,*94 , 96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 96 	TimeWindow = [ 55 , 68 ]	BeginService =  55.00	CurrentTime = 56 	Route = *95*,*62*,*67*,*71*,*94*,*96 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 54 	TimeWindow = [ 58 , 70 ]	BeginService =  61.67	CurrentTime = 63 	Route = *95*,*62*,*67*,*71*,*94*,*96*,*54 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 92 	TimeWindow = [  6 , 18 ]	BeginService =   6.15	CurrentTime = 7  	Route = *92 , 95 , 62 , 67 , 71 , 94 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 95 	TimeWindow = [ 14 , 27 ]	BeginService =  14.17	CurrentTime = 21 	Route = *95 , 63 , 76 , 85 , 84 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 63 	TimeWindow = [ 16 , 29 ]	BeginService =  16.27	CurrentTime = 24 	Route = *63 , 76 , 51 , 85 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 63 	TimeWindow = [ 16 , 29 ]	BeginService =  16.27	CurrentTime = 25 	Route = *63 , 76 , 51 , 85 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 76 	TimeWindow = [ 31 , 44 ]	BeginService =  31.25	CurrentTime = 32 	Route = *63*,*76 , 51 , 85 , 89 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 51 	TimeWindow = [ 35 , 47 ]	BeginService =  39.35	CurrentTime = 40 	Route = *63*,*76*,*51 , 22 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 22 	TimeWindow = [ 38 , 51 ]	BeginService =  50.10	CurrentTime = 51 	Route = *63*,*76*,*51*,*22 , 49 , 20 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 49 	TimeWindow = [ 43 , 56 ]	BeginService =  55.77	CurrentTime = 57 	Route = *63*,*76*,*51*,*22*,*49 , 20 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 20 	TimeWindow = [ 51 , 63 ]	BeginService =  61.19	CurrentTime = 62 	Route = *63*,*76*,*51*,*22*,*49*,*20 , 24 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 24 	TimeWindow = [ 62 , 74 ]	BeginService =  67.02	CurrentTime = 68 	Route = *63*,*76*,*51*,*22*,*49*,*20*,*24 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 92 	TimeWindow = [  6 , 18 ]	BeginService =   6.15	CurrentTime = 7  	Route = *92 , 31 , 29 , 27 , 34 , 50 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 45 	TimeWindow = [ 15 , 28 ]	BeginService =  15.72	CurrentTime = 17 	Route = *45 ,  5 ,  2 ,  7 ,  8 , 46 ,  3 ,  1 , 70 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 63 	TimeWindow = [ 16 , 29 ]	BeginService =  16.27	CurrentTime = 23 	Route = *63 , 76 , 51 , 85 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 31 	TimeWindow = [ 25 , 38 ]	BeginService =  25.42	CurrentTime = 27 	Route = *31 , 29 , 30 , 34 , 50 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 29 	TimeWindow = [ 28 , 40 ]	BeginService =  30.42	CurrentTime = 31 	Route = *31*,*29 , 30 , 34 , 50 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 27 	TimeWindow = [ 26 , 38 ]	BeginService =  36.67	CurrentTime = 38 	Route = *31*,*29*,*27 , 34 , 26 , 32 , 93 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 34 	TimeWindow = [ 46 , 59 ]	BeginService =  46.25	CurrentTime = 47 	Route = *31*,*29*,*27*,*34 , 26 , 32 , 93 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 26 	TimeWindow = [ 48 , 60 ]	BeginService =  55.08	CurrentTime = 56 	Route = *31*,*29*,*27*,*34*,*26 , 32 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 32 	TimeWindow = [ 55 , 67 ]	BeginService =  62.58	CurrentTime = 64 	Route = *31*,*29*,*27*,*34*,*26*,*32 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 93 	TimeWindow = [ 74 , 87 ]	BeginService =  80.93	CurrentTime = 82 	Route = *31*,*29*,*27*,*34*,*26*,*32*,*93 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 83 	TimeWindow = [ 15 , 27 ]	BeginService =  14.58	CurrentTime = 16 	Route = *83 , 23 , 21 , 84 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 95 	TimeWindow = [ 14 , 27 ]	BeginService =  14.17	CurrentTime = 20 	Route = *95 , 63 , 76 , 85 , 84 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 73 	TimeWindow = [ 32 , 45 ]	BeginService =  32.08	CurrentTime = 33 	Route = *73 , 79 ,  3 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 79 	TimeWindow = [ 37 , 50 ]	BeginService =  39.98	CurrentTime = 41 	Route = *73*,*79 ,  6 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 6  	TimeWindow = [ 40 , 52 ]	BeginService =  49.93	CurrentTime = 51 	Route = *73*,*79*,* 6 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 55 	TimeWindow = [ 58 , 71 ]	BeginService =  62.10	CurrentTime = 63 	Route = *73*,*79*,* 6*,*55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-14").get(lineCount++)).isEqualTo("Salesman = 14	Parcel = 68 	TimeWindow = [ 60 , 73 ]	BeginService =  70.44	CurrentTime = 71 	Route = *73*,*79*,* 6*,*55*,*68 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(6617.543024672585);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(51); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(90);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(15);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_rc202_1_0_test() throws Exception {
        File file = Paths.get(rootDirectory, "rc202-1.0.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: rc202-1.0");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 27 are a-priori known (available nodes excluding the depot) and 73 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.10416666666666667");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 48.58551988465745 (scalled value = 466.42099089271153); Number of vehicles used: 1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=1 total tours length=45.903866026410526 (scalled value = 440.677113853541)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=1 total tours length=45.29476222531833 (scalled value = 434.8297173630559)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=1 total tours length=44.75396180283734 (scalled value = 429.6380333072384)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("7 new nodes became available (known): 14 27 36 42 45 63 69 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 34");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=91.06181210410864 (scalled value = 874.1933961994429)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=65.65936404470463 (scalled value = 630.3298948291645)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=62.858554155070436 (scalled value = 603.4421198886762)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=60.89150133936664 (scalled value = 584.5584128579197)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=59.237905553850624 (scalled value = 568.683893316966)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 23 49 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 36");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=73.83234785054415 (scalled value = 708.7905393652238)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=57.356764663850385 (scalled value = 550.6249407729637)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=2 total tours length=78.26996652659577 (scalled value = 751.3916786553193)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 16 38 39 56 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 40");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=103.21174543921244 (scalled value = 990.8327562164393)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=69.9074576143884 (scalled value = 671.1115930981287)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=68.76378599516696 (scalled value = 660.1323455536027)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=64.50717876591347 (scalled value = 619.2689161527693)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=2 total tours length=81.93163233414109 (scalled value = 786.5436704077543)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 33 47 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 42");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=100.17968723543011 (scalled value = 961.724997460129)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=77.48670277906972 (scalled value = 743.8723466790692)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=66.53856948608373 (scalled value = 638.7702670664038)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 28 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 43");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=66.62198604549937 (scalled value = 639.5710660367939)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 67 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 44");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=68.43454052154273 (scalled value = 656.9715890068102)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 84 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 45");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=70.07181397891766 (scalled value = 672.6894141976095)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 22 97 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 47");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=82.22694968784178 (scalled value = 789.378717003281)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=76.91383802698005 (scalled value = 738.3728450590085)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=75.44841144773639 (scalled value = 724.3047498982693)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 29 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 48");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=75.86507811440303 (scalled value = 728.304749898269)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 11 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 50");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=89.00226158746072 (scalled value = 854.4217112396229)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=83.54582482824365 (scalled value = 802.039918351139)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=83.27471130469053 (scalled value = 799.437228525029)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=78.23438275009988 (scalled value = 751.0500744009588)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 41 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 51");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=78.50002522369977 (scalled value = 753.6002421475177)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=77.89646987761265 (scalled value = 747.8061108250814)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 19 76 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 53");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=81.4943452841417 (scalled value = 782.3457147277603)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 15 87 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 55");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=82.34305160025241 (scalled value = 790.493295362423)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=80.45876004819488 (scalled value = 772.4040964626707)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=79.38819645941223 (scalled value = 762.1266860103574)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 30 62 79 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 58");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=99.3765415254817 (scalled value = 954.0147986446243)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=98.29566650134515 (scalled value = 943.6383984129134)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=98.05636841649027 (scalled value = 941.3411367983066)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=97.97762754086541 (scalled value = 940.585224392308)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=90.85703593412998 (scalled value = 872.2275449676478)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 18 44 88 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 61");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=99.07456192976332 (scalled value = 951.1157945257278)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 9 35 64 68 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 65");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=118.77059742024404 (scalled value = 1140.1977352343429)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=117.57199894758662 (scalled value = 1128.6911898968315)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=115.7651925034161 (scalled value = 1111.3458480327945)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=111.90735392327028 (scalled value = 1074.3105976633947)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=108.7520883968343 (scalled value = 1044.0200486096091)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=107.84661527265375 (scalled value = 1035.327506617476)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 10 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 66");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=111.64650622907524 (scalled value = 1071.8064597991222)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=110.9100730732799 (scalled value = 1064.736701503487)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=107.97844205650594 (scalled value = 1036.593043742457)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=106.48463076738511 (scalled value = 1022.252455366897)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=104.80868973356527 (scalled value = 1006.1634214422265)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 93 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=114.1531156891051 (scalled value = 1095.869910615409)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=108.77003813414217 (scalled value = 1044.1923660877649)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=105.70051603239341 (scalled value = 1014.7249539109766)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 40 61 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 69");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=114.15079489096998 (scalled value = 1095.8476309533116)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=111.61749190551473 (scalled value = 1071.5279222929414)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=111.29599083798695 (scalled value = 1068.4415120446747)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=110.22252624794024 (scalled value = 1058.1362519802262)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 57 73 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 71");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=3 total tours length=116.27986906441258 (scalled value = 1116.2867430183608)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=115.63423555018822 (scalled value = 1110.088661281807)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 51 78 81 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 74");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=125.0922468807201 (scalled value = 1200.885570054913)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=110.09442892808096 (scalled value = 1056.9065177095772)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=121.32482408916758 (scalled value = 1164.7183112560087)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 99 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 75");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=125.59946669930989 (scalled value = 1205.7548803133748)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=117.43312623746567 (scalled value = 1127.3580118796704)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.48142770362156 (scalled value = 1118.221705954767)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.46199919738602 (scalled value = 1118.0351922949058)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.09823662837368 (scalled value = 1085.7430716323872)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=109.78125502351777 (scalled value = 1053.9000482257707)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 53 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 76");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=111.64464500476754 (scalled value = 1071.7885920457684)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=110.51420082311725 (scalled value = 1060.9363279019256)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 86 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 77");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=113.62137126724886 (scalled value = 1090.765164165589)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 8 90 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=5 total tours length=123.82670868213087 (scalled value = 1188.7364033484564)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.58696105821474 (scalled value = 1196.0348261588615)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=123.59646953781504 (scalled value = 1186.5261075630244)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=120.14418384900338 (scalled value = 1153.3841649504325)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=118.82572749703976 (scalled value = 1140.7269839715816)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.24218908286983 (scalled value = 1115.9250151955503)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 80 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=117.73755013636134 (scalled value = 1130.2804813090688)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.83638366694153 (scalled value = 1121.6292832026386)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=115.39206465851134 (scalled value = 1107.763820721709)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=114.84598851530924 (scalled value = 1102.5214897469687)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 43 55 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 82");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=125.08357850206866 (scalled value = 1200.802353619859)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=121.76761736196502 (scalled value = 1168.9691266748641)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=117.39153537755932 (scalled value = 1126.9587396245695)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 4 6 20 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 85");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.42941440283994 (scalled value = 1309.7223782672634)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=131.71824975982486 (scalled value = 1264.4951976943187)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.07208772833417 (scalled value = 1171.892042192008)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=120.13503054587648 (scalled value = 1153.2962932404141)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=119.81008768990489 (scalled value = 1150.176841823087)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=119.08514004707925 (scalled value = 1143.2173444519608)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 66 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=128.8864335518134 (scalled value = 1237.3097620974088)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.96807178830869 (scalled value = 1209.2934891677635)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=123.87199991216676 (scalled value = 1189.1711991568009)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.96650834753706 (scalled value = 1180.4784801363558)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=120.66814876574352 (scalled value = 1158.4142281511379)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=118.21920629470193 (scalled value = 1134.9043804291384)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=117.78569091439645 (scalled value = 1130.742632778206)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 17 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 87");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=129.69671078655395 (scalled value = 1245.088423550918)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=120.97097263579428 (scalled value = 1161.3213373036251)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=119.62625819096647 (scalled value = 1148.412078633278)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 46 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 88");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=119.87471285837631 (scalled value = 1150.7972434404126)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 77 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=132.64956541426494 (scalled value = 1273.4358279769433)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=131.3894989360318 (scalled value = 1261.3391897859053)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=130.20060340930118 (scalled value = 1249.9257927292913)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.87245317172003 (scalled value = 1208.3755504485123)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.16428035718322 (scalled value = 1191.9770914289588)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 74 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=128.66385963579398 (scalled value = 1235.173052503622)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=128.28363738714623 (scalled value = 1231.5229189166037)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=127.87382442247593 (scalled value = 1227.588714455769)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=127.69091092263793 (scalled value = 1225.832744857324)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 13 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 91");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=132.75386396691883 (scalled value = 1274.4370940824208)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=128.80567177927935 (scalled value = 1236.5344490810817)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=128.60230354622047 (scalled value = 1234.5821140437165)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=128.21294531477108 (scalled value = 1230.8442750218023)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=133.67654034688496 (scalled value = 1283.2947873300957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=130.36264722234012 (scalled value = 1251.481413334465)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 54 58 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=142.85287851372652 (scalled value = 1371.3876337317745)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.23076994256377 (scalled value = 1279.015391448612)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.90383670918567 (scalled value = 1275.8768324081823)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 60 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.13951326601713 (scalled value = 1306.9393273537644)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.73144698513693 (scalled value = 1293.4218910573145)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 32 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=148.407278766318 (scalled value = 1424.7098761566529)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=144.99111084375465 (scalled value = 1391.9146641000445)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=144.5955917185362 (scalled value = 1388.1176804979475)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=143.59556392043527 (scalled value = 1378.5174136361786)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=143.18688161718418 (scalled value = 1374.594063524968)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=142.7576795285738 (scalled value = 1370.4737234743084)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 24 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=147.63671536227315 (scalled value = 1417.312467477822)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=145.29182289491862 (scalled value = 1394.8014997912187)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=144.69358000289606 (scalled value = 1389.058368027802)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 89 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=153.85344050443936 (scalled value = 1476.9930288426178)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=151.5748571572504 (scalled value = 1455.1186287096036)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=151.24645714489225 (scalled value = 1451.9659885909655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=151.14565506864 (scalled value = 1450.998288658944)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 25 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=153.45304125363484 (scalled value = 1473.1491960348944)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=151.9229941053988 (scalled value = 1458.4607434118284)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=151.59459409304066 (scalled value = 1455.3081032931902)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 70 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=152.52580231782065 (scalled value = 1464.2477022510782)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=152.10330603030283 (scalled value = 1460.1917378909072)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Final best solution >> No. of used vehicles=4 total tours length=152.10330603030283 (scalled value = 1460.1917378909072)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 91 92 95 85 63 33 26 27 28 34 31 29 62 64 19 23 21 48 18 76 51 84 22 49 20 56 66 83 24 74 13 17 60 100 70 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 65 82 45 1 42 36 39 44 71 67 50 30 38 40 41 37 43 54 72 35 32 89 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 14 12 47 15 11 69 61 96 81 90 53 78 79 8 7 6 46 5 3 4 2 55 68 93 94 80 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("0 98 88 73 16 99 52 57 86 9 87 10 59 97 75 58 77 25 0 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of evaluations: 900");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Total number of feasible solutions: 9000");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Added nodes=100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("The final solution is valid (feasible)..");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 91 	TimeWindow = [  0 , 98 ]	BeginService =   1.25	CurrentTime = 2  	Route = *91*, 95 , 92 , 65 , 83 , 52 , 59 , 75 , 21 , 48 , 85 , 34 , 31 , 26 , 50 , 94 , 96 , 72 , 37 ,  1 ,  3 ,  5 ,  7 ,  2 , 98 , 82 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 92 	TimeWindow = [  1 , 14 ]	BeginService =   2.73	CurrentTime = 4  	Route = *91*,*92*, 63 , 42 , 36 , 37 , 27 , 85 , 23 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 95 	TimeWindow = [  0 , 97 ]	BeginService =   4.47	CurrentTime = 6  	Route = *91*,*92*,*95*, 85 , 63 , 33 , 27 , 26 , 31 , 34 , 50 , 48 , 21 , 23 , 49 , 83 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 85 	TimeWindow = [  0 , 95 ]	BeginService =   7.14	CurrentTime = 8  	Route = *91*,*92*,*95*,*85*, 63 , 33 , 27 , 26 , 28 , 31 , 34 , 50 , 48 , 21 , 23 , 49 , 83 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 63 	TimeWindow = [  4 , 17 ]	BeginService =   8.56	CurrentTime = 10 	Route = *91*,*92*,*95*,*85*,*63*, 33 , 26 , 27 , 28 , 31 , 34 , 50 , 67 , 94 , 96 , 72 , 38 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 33 	TimeWindow = [  8 , 21 ]	BeginService =  11.74	CurrentTime = 13 	Route = *91*,*92*,*95*,*85*,*63*,*33*, 28 , 26 , 27 , 29 , 31 , 34 , 50 , 71 , 67 , 94 , 96 , 72 , 41 , 38 , 37 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 26 	TimeWindow = [  0 , 93 ]	BeginService =  13.95	CurrentTime = 17 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*, 27 , 31 , 34 , 62 , 29 , 28 , 30 , 50 , 67 , 71 , 38 , 37 , 41 , 72 , 96 , 94 , 84 , 49 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 27 	TimeWindow = [ 15 , 28 ]	BeginService =  15.51	CurrentTime = 18 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*, 31 , 34 , 62 , 29 , 28 , 30 , 50 , 67 , 71 , 38 , 37 , 41 , 72 , 96 , 94 , 84 , 49 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 28 	TimeWindow = [ 16 , 28 ]	BeginService =  17.16	CurrentTime = 19 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*, 34 , 29 , 31 , 62 , 64 , 19 , 23 , 76 , 18 , 22 , 84 , 49 , 48 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 34 	TimeWindow = [  0 , 94 ]	BeginService =  19.10	CurrentTime = 20 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*, 31 , 29 , 62 , 64 , 19 , 23 , 21 , 76 , 18 , 22 , 48 , 49 , 84 , 56 , 94 , 96 , 72 , 35 , 37 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 31 	TimeWindow = [  0 , 94 ]	BeginService =  20.45	CurrentTime = 21 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*, 29 , 62 , 64 , 19 , 23 , 21 , 48 , 18 , 22 , 52 , 87 ,  9 , 10 , 59 , 97 , 75 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 29 	TimeWindow = [ 20 , 33 ]	BeginService =  21.70	CurrentTime = 23 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*, 62 , 76 , 48 , 23 , 21 , 18 , 19 , 49 , 22 , 84 , 56 , 94 , 96 , 72 , 35 , 37 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 62 	TimeWindow = [ 17 , 30 ]	BeginService =  25.35	CurrentTime = 26 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*, 64 , 19 , 23 , 21 , 48 , 76 , 18 , 22 , 57 , 49 , 84 , 56 , 96 , 94 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 64 	TimeWindow = [ 20 , 32 ]	BeginService =  28.54	CurrentTime = 30 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*, 19 , 23 , 21 , 48 , 18 , 76 , 84 , 51 , 49 , 22 , 57 , 52 , 83 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 19 	TimeWindow = [ 26 , 39 ]	BeginService =  31.69	CurrentTime = 33 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*, 23 , 21 , 48 , 76 , 51 , 18 , 22 , 49 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 23 	TimeWindow = [ 21 , 33 ]	BeginService =  33.40	CurrentTime = 34 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*, 21 , 48 , 76 , 51 , 18 , 22 , 49 , 84 , 56 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 21 	TimeWindow = [  0 , 94 ]	BeginService =  34.65	CurrentTime = 36 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*, 48 , 76 , 51 , 18 , 22 , 49 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 48 	TimeWindow = [  0 , 94 ]	BeginService =  35.90	CurrentTime = 37 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*, 76 , 51 , 18 , 22 , 49 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 18 	TimeWindow = [ 35 , 47 ]	BeginService =  37.15	CurrentTime = 38 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*, 76 , 51 , 84 , 22 , 49 , 20 , 56 , 83 , 52 , 59 , 97 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 76 	TimeWindow = [ 28 , 40 ]	BeginService =  40.01	CurrentTime = 41 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*, 51 , 22 , 49 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 51 	TimeWindow = [ 34 , 46 ]	BeginService =  42.03	CurrentTime = 43 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*, 84 , 22 , 49 , 20 , 83 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 84 	TimeWindow = [ 41 , 54 ]	BeginService =  44.03	CurrentTime = 45 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*, 49 , 22 , 20 , 83 , 66 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 22 	TimeWindow = [ 39 , 52 ]	BeginService =  47.37	CurrentTime = 48 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*, 49 , 20 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 49 	TimeWindow = [ 46 , 58 ]	BeginService =  48.79	CurrentTime = 50 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*, 20 , 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 20 	TimeWindow = [ 56 , 68 ]	BeginService =  55.94	CurrentTime = 57 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*, 56 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 58 , 71 ]	BeginService =  59.22	CurrentTime = 60 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*, 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 66 	TimeWindow = [ 59 , 71 ]	BeginService =  61.23	CurrentTime = 62 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*, 83 , 74 , 58 , 77 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 83 	TimeWindow = [  0 , 97 ]	BeginService =  63.02	CurrentTime = 64 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*, 74 , 13 , 17 , 60 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [ 71 , 83 ]	BeginService =  70.94	CurrentTime = 72 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*, 74 , 13 , 17 , 60 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 67 , 80 ]	BeginService =  73.93	CurrentTime = 75 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*, 13 , 17 , 60 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 13 	TimeWindow = [ 68 , 81 ]	BeginService =  77.18	CurrentTime = 78 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*,*13*, 17 , 60 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 17 	TimeWindow = [ 73 , 86 ]	BeginService =  79.38	CurrentTime = 80 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*,*13*,*17*, 60 , 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 60 	TimeWindow = [ 72 , 85 ]	BeginService =  82.63	CurrentTime = 84 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*,*13*,*17*,*60*, 100 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 100	TimeWindow = [ 84 , 97 ]	BeginService =  85.50	CurrentTime = 86 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*,*13*,*17*,*60*,*100*, 70 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 70 	TimeWindow = [ 84 , 97 ]	BeginService =  87.00	CurrentTime = 88 	Route = *91*,*92*,*95*,*85*,*63*,*33*,*26*,*27*,*28*,*34*,*31*,*29*,*62*,*64*,*19*,*23*,*21*,*48*,*18*,*76*,*51*,*84*,*22*,*49*,*20*,*56*,*66*,*83*,*24*,*74*,*13*,*17*,*60*,*100*,*70*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 65 	TimeWindow = [  1 , 14 ]	BeginService =   1.16	CurrentTime = 3  	Route = *65*, 12 , 14 ,  7 , 45 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 82 	TimeWindow = [  0 , 97 ]	BeginService =   3.10	CurrentTime = 5  	Route = *65*,*82*, 52 , 14 , 45 ,  2 , 69 , 98 , 12 , 16 , 23 , 59 , 75 , 21 , 48 , 49 , 83 , 56 , 85 , 95 , 94 , 96 ,  5 ,  3 ,  1 ,  7 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 45 	TimeWindow = [  4 , 16 ]	BeginService =   8.27	CurrentTime = 10 	Route = *65*,*82*,*45*, 42 , 39 , 36 , 37 , 69 , 83 , 23 , 22 , 49 , 48 , 21 , 84 , 56 , 98 ,  2 ,  7 ,  3 ,  5 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 1  	TimeWindow = [  0 , 95 ]	BeginService =   9.91	CurrentTime = 12 	Route = *65*,*82*,*45*,* 1*, 42 , 36 , 39 , 69 , 83 , 23 , 22 , 49 , 48 , 21 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 42 	TimeWindow = [  3 , 16 ]	BeginService =  14.12	CurrentTime = 15 	Route = *65*,*82*,*45*,* 1*,*42*, 36 , 39 , 69 , 83 , 23 , 19 , 76 , 22 , 49 , 48 , 21 , 84 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 36 	TimeWindow = [  4 , 17 ]	BeginService =  16.33	CurrentTime = 17 	Route = *65*,*82*,*45*,* 1*,*42*,*36*, 39 , 69 , 98 , 79 ,  7 ,  2 ,  5 ,  3 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 39 	TimeWindow = [  7 , 19 ]	BeginService =  18.11	CurrentTime = 19 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*, 44 , 72 , 71 , 67 , 30 , 38 , 41 , 37 , 35 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 44 	TimeWindow = [ 23 , 35 ]	BeginService =  22.60	CurrentTime = 24 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*, 71 , 67 , 50 , 30 , 38 , 41 , 79 ,  7 ,  2 ,  5 ,  3 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 71 	TimeWindow = [ 25 , 38 ]	BeginService =  26.65	CurrentTime = 28 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*, 67 , 50 , 30 , 38 , 40 , 41 , 81 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 67 	TimeWindow = [ 28 , 40 ]	BeginService =  29.04	CurrentTime = 30 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*, 50 , 30 , 38 , 41 , 40 , 37 , 35 , 72 , 93 , 94 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 50 	TimeWindow = [  0 , 95 ]	BeginService =  31.19	CurrentTime = 32 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*, 30 , 38 , 41 , 40 , 37 , 35 , 72 , 93 , 94 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 30 	TimeWindow = [ 26 , 38 ]	BeginService =  33.98	CurrentTime = 35 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*, 38 , 40 , 41 , 35 , 37 , 72 , 93 , 94 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 38 	TimeWindow = [ 29 , 41 ]	BeginService =  40.89	CurrentTime = 42 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*, 40 , 41 , 43 , 35 , 37 , 72 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 40 	TimeWindow = [ 34 , 47 ]	BeginService =  42.50	CurrentTime = 43 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*, 41 , 43 , 35 , 37 , 72 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 41 	TimeWindow = [ 39 , 52 ]	BeginService =  44.60	CurrentTime = 46 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*, 43 , 35 , 37 , 72 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 37 	TimeWindow = [  0 , 95 ]	BeginService =  46.67	CurrentTime = 48 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*, 43 , 35 , 72 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 43 	TimeWindow = [ 60 , 72 ]	BeginService =  59.79	CurrentTime = 64 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*, 54 , 72 , 35 , 32 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 54 	TimeWindow = [ 63 , 75 ]	BeginService =  63.44	CurrentTime = 65 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*,*54*, 72 , 35 , 32 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 72 	TimeWindow = [  0 , 96 ]	BeginService =  65.46	CurrentTime = 66 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*,*54*,*72*, 35 , 32 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 35 	TimeWindow = [ 68 , 81 ]	BeginService =  68.63	CurrentTime = 70 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*,*54*,*72*,*35*, 32 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 32 	TimeWindow = [ 65 , 77 ]	BeginService =  75.77	CurrentTime = 77 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*,*54*,*72*,*35*,*32*, 89 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 89 	TimeWindow = [ 74 , 87 ]	BeginService =  80.14	CurrentTime = 81 	Route = *65*,*82*,*45*,* 1*,*42*,*36*,*39*,*44*,*71*,*67*,*50*,*30*,*38*,*40*,*41*,*37*,*43*,*54*,*72*,*35*,*32*,*89*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 14 	TimeWindow = [  4 , 16 ]	BeginService =   3.68	CurrentTime = 6  	Route = *14*, 45 , 42 , 36 , 37 , 39 , 38 , 72 , 96 , 94 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 12 	TimeWindow = [  0 , 96 ]	BeginService =   5.04	CurrentTime = 10 	Route = *14*,*12*, 47 , 16 , 97 , 75 , 59 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 47 	TimeWindow = [ 11 , 23 ]	BeginService =  10.94	CurrentTime = 12 	Route = *14*,*12*,*47*, 11 , 16 , 59 , 97 , 75 , 52 , 98 ,  2 ,  7 ,  5 ,  3 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 15 	TimeWindow = [ 18 , 31 ]	BeginService =  18.13	CurrentTime = 19 	Route = *14*,*12*,*47*,*15*, 11 , 69 , 98 , 16 , 88 , 79 ,  9 , 87 , 59 , 75 , 97 , 52 , 83 , 56 , 50 , 94 , 96 , 68 ,  7 ,  2 ,  5 ,  3 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 11 	TimeWindow = [ 20 , 33 ]	BeginService =  20.31	CurrentTime = 21 	Route = *14*,*12*,*47*,*15*,*11*, 69 , 16 , 88 , 98 , 38 , 41 , 79 ,  7 ,  2 ,  5 ,  3 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 69 	TimeWindow = [ 16 , 29 ]	BeginService =  24.06	CurrentTime = 25 	Route = *14*,*12*,*47*,*15*,*11*,*69*, 61 , 88 , 16 , 87 ,  9 , 79 , 10 , 59 , 97 , 75 , 52 , 83 , 98 ,  2 ,  3 ,  5 ,  7 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 61 	TimeWindow = [ 27 , 39 ]	BeginService =  27.09	CurrentTime = 28 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*, 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [  0 , 97 ]	BeginService =  29.68	CurrentTime = 36 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*, 94 , 90 , 53 , 78 , 79 ,  8 ,  5 ,  3 ,  2 ,  7 , 55 , 68 , 43 , 35 , 37 , 72 , 93 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 81 	TimeWindow = [ 37 , 49 ]	BeginService =  36.98	CurrentTime = 38 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*, 90 , 53 , 78 , 79 ,  8 ,  7 ,  6 ,  5 ,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 90 	TimeWindow = [ 37 , 50 ]	BeginService =  39.72	CurrentTime = 41 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*, 53 , 78 , 79 ,  8 ,  6 ,  7 ,  2 ,  3 ,  5 ,  4 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 53 	TimeWindow = [ 39 , 52 ]	BeginService =  42.56	CurrentTime = 44 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*, 78 , 79 ,  8 ,  7 ,  6 ,  2 ,  3 ,  5 ,  4 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 78 	TimeWindow = [ 38 , 51 ]	BeginService =  45.00	CurrentTime = 46 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*, 79 ,  8 ,  7 ,  6 ,  2 ,  3 ,  5 , 46 ,  4 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 79 	TimeWindow = [ 37 , 49 ]	BeginService =  47.30	CurrentTime = 48 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,  8 ,  6 , 46 ,  2 ,  7 ,  4 ,  5 ,  3 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 8  	TimeWindow = [ 38 , 51 ]	BeginService =  49.91	CurrentTime = 51 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,  7 ,  6 , 46 ,  5 ,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [  0 , 95 ]	BeginService =  51.47	CurrentTime = 52 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,  6 , 46 ,  5 ,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 6  	TimeWindow = [ 40 , 53 ]	BeginService =  52.83	CurrentTime = 54 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*, 46 ,  5 ,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 46 	TimeWindow = [ 51 , 63 ]	BeginService =  54.39	CurrentTime = 55 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,  5 ,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 5  	TimeWindow = [  0 , 95 ]	BeginService =  55.99	CurrentTime = 57 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,  3 ,  4 ,  2 , 55 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 3  	TimeWindow = [  0 , 95 ]	BeginService =  57.24	CurrentTime = 58 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,  4 ,  2 , 55 , 68 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 4  	TimeWindow = [ 67 , 80 ]	BeginService =  67.08	CurrentTime = 68 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,  2 , 55 , 68 , 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 2  	TimeWindow = [  0 , 96 ]	BeginService =  68.69	CurrentTime = 70 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*, 55 , 68 , 94 , 93 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 55 	TimeWindow = [ 62 , 75 ]	BeginService =  71.50	CurrentTime = 72 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*,*55*, 68 , 94 , 93 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 68 	TimeWindow = [ 64 , 76 ]	BeginService =  73.58	CurrentTime = 75 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*,*55*,*68*, 93 , 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 93 	TimeWindow = [ 84 , 97 ]	BeginService =  84.17	CurrentTime = 85 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*,*55*,*68*,*93*, 94 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 94 	TimeWindow = [  0 , 97 ]	BeginService =  85.80	CurrentTime = 87 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*,*55*,*68*,*93*,*94*, 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 80 	TimeWindow = [ 86 , 98 ]	BeginService =  87.89	CurrentTime = 89 	Route = *14*,*12*,*47*,*15*,*11*,*69*,*61*,*96*,*81*,*90*,*53*,*78*,*79*,* 8*,* 7*,* 6*,*46*,* 5*,* 3*,* 4*,* 2*,*55*,*68*,*93*,*94*,*80*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 98 	TimeWindow = [  0 , 97 ]	BeginService =   1.47	CurrentTime = 28 	Route = *98*, 88 , 16 , 73 , 79 , 78 , 99 , 57 , 87 ,  9 , 52 , 83 , 56 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 88 	TimeWindow = [ 27 , 40 ]	BeginService =  27.08	CurrentTime = 29 	Route = *98*,*88*, 73 , 16 , 78 , 79 ,  7 ,  2 ,  5 ,  3 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 73 	TimeWindow = [ 30 , 42 ]	BeginService =  30.43	CurrentTime = 31 	Route = *98*,*88*,*73*, 16 ,  9 , 87 , 59 , 75 , 97 , 10 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 16 	TimeWindow = [ 27 , 39 ]	BeginService =  33.56	CurrentTime = 35 	Route = *98*,*88*,*73*,*16*, 99 , 57 , 86 , 87 ,  9 , 10 , 59 , 97 , 75 , 52 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 99 	TimeWindow = [ 32 , 45 ]	BeginService =  37.36	CurrentTime = 38 	Route = *98*,*88*,*73*,*16*,*99*, 57 , 86 , 87 ,  9 , 10 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 52 	TimeWindow = [  0 , 96 ]	BeginService =  38.93	CurrentTime = 41 	Route = *98*,*88*,*73*,*16*,*99*,*52*, 57 , 86 , 87 ,  9 , 10 , 59 , 97 , 75 , 20 , 83 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 57 	TimeWindow = [ 41 , 54 ]	BeginService =  41.35	CurrentTime = 42 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*, 86 , 87 ,  9 , 10 , 59 , 97 , 75 , 83 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 86 	TimeWindow = [ 36 , 49 ]	BeginService =  43.34	CurrentTime = 44 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,  9 , 87 , 75 , 97 , 59 , 10 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 9  	TimeWindow = [ 39 , 51 ]	BeginService =  46.00	CurrentTime = 47 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*, 87 , 75 , 97 , 59 , 10 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 87 	TimeWindow = [ 37 , 50 ]	BeginService =  48.21	CurrentTime = 49 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*, 97 , 10 , 17 , 59 , 75 , 77 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 10 	TimeWindow = [ 54 , 67 ]	BeginService =  54.06	CurrentTime = 55 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*, 59 , 97 , 74 , 75 , 77 , 17 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 59 	TimeWindow = [  0 , 94 ]	BeginService =  57.19	CurrentTime = 58 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*, 97 , 74 , 13 , 17 , 75 , 77 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 97 	TimeWindow = [ 57 , 69 ]	BeginService =  58.89	CurrentTime = 60 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*,*97*, 17 , 13 , 74 , 75 , 77 , 58 , 83 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 75 	TimeWindow = [  0 , 93 ]	BeginService =  61.29	CurrentTime = 65 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*,*97*,*75*, 58 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 58 	TimeWindow = [ 81 , 94 ]	BeginService =  81.46	CurrentTime = 82 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*,*97*,*75*,*58*, 77 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 77 	TimeWindow = [ 80 , 92 ]	BeginService =  83.61	CurrentTime = 85 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*,*97*,*75*,*58*,*77*, 25 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 25 	TimeWindow = [ 82 , 94 ]	BeginService =  85.92	CurrentTime = 87 	Route = *98*,*88*,*73*,*16*,*99*,*52*,*57*,*86*,* 9*,*87*,*10*,*59*,*97*,*75*,*58*,*77*,*25*");

        assertThat(statisticsDTO.totalDistance).isEqualTo(6617.543024672581);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(4); // The simulator is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(90);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(4);
    }
}
