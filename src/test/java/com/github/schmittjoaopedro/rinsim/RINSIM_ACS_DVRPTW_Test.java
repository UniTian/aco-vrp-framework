package com.github.schmittjoaopedro.rinsim;

import com.github.rinde.rinsim.pdptw.common.StatisticsDTO;
import com.github.schmittjoaopedro.rinsim.dvrptwacs.DebuggerUtils;
import com.github.schmittjoaopedro.rinsim.dvrptwacs.RINSIM_ACS_DVRPTW;
import com.github.schmittjoaopedro.vrp.DVRPTW_ACS_Test;
import com.github.schmittjoaopedro.vrp.dvrptwacs.LoggerOutput;
import org.junit.Test;

import java.io.File;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class RINSIM_ACS_DVRPTW_Test {

    private static final String rootDirectory;

    static {
        rootDirectory = Paths.get(DVRPTW_ACS_Test.class.getClassLoader().getResource("dvrptw").getFile().substring(1)).toString();
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r103_0_1_test() throws Exception {
        File file = Paths.get(rootDirectory, "r103-0.1.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r103-0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 97 are a-priori known (available nodes excluding the depot) and 3 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.43478260869565216");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 576.5586588877334 (scalled value = 1326.0849154417867); Number of vehicles used: 14");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=562.5376010977425 (scalled value = 1293.8364825248077)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=560.1327697937832 (scalled value = 1288.3053705257014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=541.0653625954865 (scalled value = 1244.450333969619)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 11 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=570.2314666498314 (scalled value = 1311.5323732946124)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=569.1183542719467 (scalled value = 1308.9722148254775)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=15 total tours length=560.6605711416032 (scalled value = 1289.5193136256873)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=566.3952447434705 (scalled value = 1302.709062909982)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=544.9207194427544 (scalled value = 1253.317654718335)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=539.8254035768805 (scalled value = 1241.5984282268253)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=15 total tours length=561.9950536359795 (scalled value = 1292.588623362753)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=552.03983112901 (scalled value = 1269.691611596723)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.0637974965097 (scalled value = 1265.1467342419724)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=14 total tours length=561.6958560453328 (scalled value = 1291.9004689042654)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=560.6126550340819 (scalled value = 1289.4091065783882)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=556.1009040362512 (scalled value = 1279.032079283378)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=555.0428414576861 (scalled value = 1276.598535352678)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.9951576454781 (scalled value = 1276.4888625845997)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.4593046282453 (scalled value = 1275.256400644964)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=554.0709380594851 (scalled value = 1274.3631575368158)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.1378687174846 (scalled value = 1265.3170980502146)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=14 total tours length=550.0901849052761 (scalled value = 1265.207425282135)");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 76 	TimeWindow = [ 32 , 36 ]	BeginService =  31.74	CurrentTime = 33 	Route = *76 , 79 , 29 , 24 , 68 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 79 	TimeWindow = [ 40 , 44 ]	BeginService =  40.43	CurrentTime = 41 	Route = *76*,*79 ,  3 , 29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 3  	TimeWindow = [  0 , 86 ]	BeginService =  46.35	CurrentTime = 47 	Route = *76*,*79*,* 3 , 29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 29 	TimeWindow = [  0 , 83 ]	BeginService =  54.82	CurrentTime = 56 	Route = *76*,*79*,* 3*,*29 , 68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 68 	TimeWindow = [ 62 , 66 ]	BeginService =  62.89	CurrentTime = 64 	Route = *76*,*79*,* 3*,*29*,*68 , 24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [  0 , 83 ]	BeginService =  71.52	CurrentTime = 73 	Route = *76*,*79*,* 3*,*29*,*68*,*24 , 80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 79 , 83 ]	BeginService =  79.87	CurrentTime = 81 	Route = *76*,*79*,* 3*,*29*,*68*,*24*,*80 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 12 	TimeWindow = [  0 , 89 ]	BeginService =  86.97	CurrentTime = 88 	Route = *76*,*79*,* 3*,*29*,*68*,*24*,*80*,*12 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 40 	TimeWindow = [ 37 , 41 ]	BeginService =  36.96	CurrentTime = 38 	Route = *40 , 53 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 53 	TimeWindow = [ 41 , 46 ]	BeginService =  44.22	CurrentTime = 45 	Route = *40*,*53 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 95 	TimeWindow = [  0 , 89 ]	BeginService =   6.46	CurrentTime = 7  	Route = *95 , 42 , 43 , 38 , 86 , 16 , 61 ,  5 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 42 	TimeWindow = [ 13 , 18 ]	BeginService =  16.05	CurrentTime = 17 	Route = *95*,*42 , 43 , 38 , 86 , 16 , 61 ,  5 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [  0 , 80 ]	BeginService =  24.33	CurrentTime = 25 	Route = *95*,*42*,*43 , 87 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 87 	TimeWindow = [ 40 , 45 ]	BeginService =  40.43	CurrentTime = 41 	Route = *95*,*42*,*43*,*87 , 97 , 59 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [  0 , 88 ]	BeginService =  46.63	CurrentTime = 48 	Route = *95*,*42*,*43*,*87*,*97 , 37 , 98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [  0 , 86 ]	BeginService =  53.19	CurrentTime = 54 	Route = *95*,*42*,*43*,*87*,*97*,*37 , 98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 98 	TimeWindow = [  0 , 86 ]	BeginService =  58.15	CurrentTime = 59 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98 , 100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 100	TimeWindow = [ 80 , 85 ]	BeginService =  80.43	CurrentTime = 81 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98*,*100 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 59 	TimeWindow = [  0 , 88 ]	BeginService =  87.70	CurrentTime = 89 	Route = *95*,*42*,*43*,*87*,*97*,*37*,*98*,*100*,*59 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 27 	TimeWindow = [ 16 , 20 ]	BeginService =  16.09	CurrentTime = 17 	Route = *27 , 69 , 88 ,  8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 69 	TimeWindow = [ 22 , 26 ]	BeginService =  23.60	CurrentTime = 25 	Route = *27*,*69 , 88 ,  8 , 46 , 47 , 48 , 82 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 88 	TimeWindow = [ 32 , 37 ]	BeginService =  33.20	CurrentTime = 34 	Route = *27*,*69*,*88 ,  8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 41 , 46 ]	BeginService =  45.53	CurrentTime = 47 	Route = *27*,*69*,*88*,* 8 , 46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [  0 , 80 ]	BeginService =  53.98	CurrentTime = 55 	Route = *27*,*69*,*88*,* 8*,*46 , 47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 47 	TimeWindow = [  0 , 80 ]	BeginService =  62.68	CurrentTime = 64 	Route = *27*,*69*,*88*,* 8*,*46*,*47 , 48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [  0 , 83 ]	BeginService =  69.81	CurrentTime = 71 	Route = *27*,*69*,*88*,* 8*,*46*,*47*,*48 , 82 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 82 	TimeWindow = [  0 , 85 ]	BeginService =  76.50	CurrentTime = 77 	Route = *27*,*69*,*88*,* 8*,*46*,*47*,*48*,*82 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 31 	TimeWindow = [  0 , 88 ]	BeginService =   7.59	CurrentTime = 9  	Route = *31 , 62 , 11 , 63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 62 	TimeWindow = [ 25 , 30 ]	BeginService =  25.22	CurrentTime = 26 	Route = *31*,*62 , 11 , 63 , 10 , 32 , 90 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 11 	TimeWindow = [ 29 , 33 ]	BeginService =  33.07	CurrentTime = 34 	Route = *31*,*62*,*11 , 63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 63 	TimeWindow = [  0 , 80 ]	BeginService =  40.92	CurrentTime = 42 	Route = *31*,*62*,*11*,*63 , 10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 10 	TimeWindow = [ 54 , 58 ]	BeginService =  53.91	CurrentTime = 55 	Route = *31*,*62*,*11*,*63*,*10 , 90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 90 	TimeWindow = [  0 , 81 ]	BeginService =  61.34	CurrentTime = 62 	Route = *31*,*62*,*11*,*63*,*10*,*90 , 32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 32 	TimeWindow = [  0 , 81 ]	BeginService =  67.63	CurrentTime = 69 	Route = *31*,*62*,*11*,*63*,*10*,*90*,*32 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 70 	TimeWindow = [ 79 , 83 ]	BeginService =  79.13	CurrentTime = 80 	Route = *31*,*62*,*11*,*63*,*10*,*90*,*32*,*70 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 50 	TimeWindow = [  0 , 88 ]	BeginService =   7.38	CurrentTime = 8  	Route = *50 , 33 , 81 , 30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 33 	TimeWindow = [ 16 , 20 ]	BeginService =  16.09	CurrentTime = 17 	Route = *50*,*33 , 81 , 30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 30 	TimeWindow = [ 31 , 35 ]	BeginService =  30.87	CurrentTime = 32 	Route = *50*,*33*,*30 ,  9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 9  	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = *50*,*33*,*30*,* 9 , 66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 66 	TimeWindow = [ 55 , 60 ]	BeginService =  55.22	CurrentTime = 56 	Route = *50*,*33*,*30*,* 9*,*66 , 20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 20 	TimeWindow = [  0 , 82 ]	BeginService =  63.45	CurrentTime = 64 	Route = *50*,*33*,*30*,* 9*,*66*,*20 , 51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 51 	TimeWindow = [  0 , 84 ]	BeginService =  71.31	CurrentTime = 72 	Route = *50*,*33*,*30*,* 9*,*66*,*20*,*51 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 1  	TimeWindow = [  0 , 89 ]	BeginService =  80.89	CurrentTime = 82 	Route = *50*,*33*,*30*,* 9*,*66*,*20*,*51*,* 1 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 94 	TimeWindow = [  0 , 90 ]	BeginService =   5.24	CurrentTime = 6  	Route = *94 , 96 , 99 ,  6 , 59 , 37 , 98 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 96 	TimeWindow = [  0 , 89 ]	BeginService =  11.32	CurrentTime = 12 	Route = *94*,*96 , 99 ,  6 , 59 , 37 , 98 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 5  	TimeWindow = [  0 , 87 ]	BeginService =  18.98	CurrentTime = 21 	Route = *94*,*96*,* 5 , 84 , 17 , 93 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 84 	TimeWindow = [ 44 , 48 ]	BeginService =  43.91	CurrentTime = 45 	Route = *94*,*96*,* 5*,*84 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 17 	TimeWindow = [ 68 , 73 ]	BeginService =  68.26	CurrentTime = 69 	Route = *94*,*96*,* 5*,*84*,*17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 60 	TimeWindow = [  0 , 87 ]	BeginService =  78.11	CurrentTime = 79 	Route = *94*,*96*,* 5*,*84*,*17*,*60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 89 	TimeWindow = [  0 , 92 ]	BeginService =  86.39	CurrentTime = 87 	Route = *94*,*96*,* 5*,*84*,*17*,*60*,*89 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 18 	TimeWindow = [  0 , 89 ]	BeginService =   6.87	CurrentTime = 8  	Route = *18 , 45 , 84 , 17 , 83 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 45 	TimeWindow = [ 14 , 18 ]	BeginService =  17.37	CurrentTime = 18 	Route = *18*,*45 , 84 , 17 , 83 , 60 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 83 	TimeWindow = [  0 , 86 ]	BeginService =  25.22	CurrentTime = 27 	Route = *18*,*45*,*83 , 84 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 99 	TimeWindow = [ 36 , 40 ]	BeginService =  36.09	CurrentTime = 37 	Route = *18*,*45*,*83*,*99 ,  6 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 6  	TimeWindow = [ 43 , 47 ]	BeginService =  43.22	CurrentTime = 44 	Route = *18*,*45*,*83*,*99*,* 6 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 13 	TimeWindow = [ 69 , 73 ]	BeginService =  69.13	CurrentTime = 70 	Route = *18*,*45*,*83*,*99*,* 6*,*13 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 2  	TimeWindow = [  0 , 88 ]	BeginService =   7.83	CurrentTime = 9  	Route = * 2 , 57 , 15 , 41 , 75 , 56 ,  4 , 80 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 57 	TimeWindow = [  0 , 85 ]	BeginService =  14.71	CurrentTime = 16 	Route = * 2*,*57 , 15 , 41 , 75 , 56 ,  4 , 80 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 15 	TimeWindow = [ 27 , 31 ]	BeginService =  26.52	CurrentTime = 28 	Route = * 2*,*57*,*15 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 41 	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = * 2*,*57*,*15*,*41 , 74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 75 	TimeWindow = [  0 , 83 ]	BeginService =  50.03	CurrentTime = 51 	Route = * 2*,*57*,*15*,*41*,*75 , 56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 56 	TimeWindow = [ 57 , 61 ]	BeginService =  56.52	CurrentTime = 58 	Route = * 2*,*57*,*15*,*41*,*75*,*56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 4  	TimeWindow = [ 65 , 69 ]	BeginService =  64.78	CurrentTime = 66 	Route = * 2*,*57*,*15*,*41*,*75*,*56*,* 4 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 73 	TimeWindow = [  0 , 87 ]	BeginService =   8.75	CurrentTime = 10 	Route = *73 , 22 , 74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 22 	TimeWindow = [ 42 , 47 ]	BeginService =  42.17	CurrentTime = 43 	Route = *73*,*22 , 75 , 56 ,  4 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 74 	TimeWindow = [ 65 , 69 ]	BeginService =  64.78	CurrentTime = 66 	Route = *73*,*22*,*74 , 72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 72 	TimeWindow = [  0 , 86 ]	BeginService =  70.51	CurrentTime = 72 	Route = *73*,*22*,*74*,*72 , 21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 21 	TimeWindow = [  0 , 87 ]	BeginService =  76.80	CurrentTime = 78 	Route = *73*,*22*,*74*,*72*,*21 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 58 	TimeWindow = [ 87 , 91 ]	BeginService =  86.96	CurrentTime = 88 	Route = *73*,*22*,*74*,*72*,*21*,*58 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 92 	TimeWindow = [  8 , 12 ]	BeginService =   7.99	CurrentTime = 9  	Route = *92 , 91 , 14 , 44 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 91 	TimeWindow = [  0 , 84 ]	BeginService =  15.65	CurrentTime = 17 	Route = *92*,*91 , 14 , 44 , 87 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 14 	TimeWindow = [  0 , 81 ]	BeginService =  23.91	CurrentTime = 25 	Route = *92*,*91*,*14 , 44 , 38 , 86 , 16 , 61 , 85 , 98 , 37 , 97 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 44 	TimeWindow = [ 30 , 34 ]	BeginService =  30.72	CurrentTime = 32 	Route = *92*,*91*,*14*,*44 , 38 , 86 , 16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 38 	TimeWindow = [ 36 , 40 ]	BeginService =  39.77	CurrentTime = 41 	Route = *92*,*91*,*14*,*44*,*38 , 86 , 16 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 86 	TimeWindow = [  0 , 80 ]	BeginService =  49.79	CurrentTime = 51 	Route = *92*,*91*,*14*,*44*,*38*,*86 , 16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 16 	TimeWindow = [  0 , 83 ]	BeginService =  56.89	CurrentTime = 58 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16 , 61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 61 	TimeWindow = [  0 , 84 ]	BeginService =  63.18	CurrentTime = 64 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61 , 85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 85 	TimeWindow = [  0 , 85 ]	BeginService =  69.47	CurrentTime = 70 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61*,*85 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-10").get(lineCount++)).isEqualTo("Salesman = 10	Parcel = 93 	TimeWindow = [ 82 , 86 ]	BeginService =  81.74	CurrentTime = 83 	Route = *92*,*91*,*14*,*44*,*38*,*86*,*16*,*61*,*85*,*93 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 36 	TimeWindow = [ 18 , 22 ]	BeginService =  18.00	CurrentTime = 19 	Route = *36 , 64 , 49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 64 	TimeWindow = [ 32 , 36 ]	BeginService =  31.74	CurrentTime = 33 	Route = *36*,*64 , 49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 49 	TimeWindow = [ 47 , 51 ]	BeginService =  46.96	CurrentTime = 48 	Route = *36*,*64*,*49 , 19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 19 	TimeWindow = [  0 , 81 ]	BeginService =  56.54	CurrentTime = 58 	Route = *36*,*64*,*49*,*19 ,  7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 7  	TimeWindow = [  0 , 86 ]	BeginService =  65.75	CurrentTime = 67 	Route = *36*,*64*,*49*,*19*,* 7 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-11").get(lineCount++)).isEqualTo("Salesman = 11	Parcel = 52 	TimeWindow = [  0 , 90 ]	BeginService =  74.40	CurrentTime = 75 	Route = *36*,*64*,*49*,*19*,* 7*,*52 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 26 	TimeWindow = [  0 , 90 ]	BeginService =   4.86	CurrentTime = 6  	Route = *26 , 39 , 23 , 67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 39 	TimeWindow = [ 19 , 23 ]	BeginService =  19.40	CurrentTime = 20 	Route = *26*,*39 , 23 , 67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 23 	TimeWindow = [ 30 , 34 ]	BeginService =  29.57	CurrentTime = 31 	Route = *26*,*39*,*23 , 67 , 55 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 67 	TimeWindow = [ 36 , 40 ]	BeginService =  39.13	CurrentTime = 40 	Route = *26*,*39*,*23*,*67 , 55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 55 	TimeWindow = [ 59 , 63 ]	BeginService =  59.13	CurrentTime = 60 	Route = *26*,*39*,*23*,*67*,*55 , 25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 25 	TimeWindow = [ 75 , 79 ]	BeginService =  74.78	CurrentTime = 76 	Route = *26*,*39*,*23*,*67*,*55*,*25 , 54 ");
        assertThat(salesmenRoutes.get("Salesman-12").get(lineCount++)).isEqualTo("Salesman = 12	Parcel = 54 	TimeWindow = [  0 , 86 ]	BeginService =  84.37	CurrentTime = 85 	Route = *26*,*39*,*23*,*67*,*55*,*25*,*54 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 71 	TimeWindow = [  0 , 78 ]	BeginService =  17.24	CurrentTime = 18 	Route = *71 , 65 , 78 , 34 , 35 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 65 	TimeWindow = [ 22 , 27 ]	BeginService =  26.07	CurrentTime = 27 	Route = *71*,*65 , 78 , 34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 78 	TimeWindow = [ 42 , 46 ]	BeginService =  41.74	CurrentTime = 43 	Route = *71*,*65*,*78 , 34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 34 	TimeWindow = [  0 , 80 ]	BeginService =  48.26	CurrentTime = 49 	Route = *71*,*65*,*78*,*34 , 35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 35 	TimeWindow = [ 62 , 67 ]	BeginService =  62.17	CurrentTime = 63 	Route = *71*,*65*,*78*,*34*,*35 , 81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 81 	TimeWindow = [  0 , 83 ]	BeginService =  72.44	CurrentTime = 73 	Route = *71*,*65*,*78*,*34*,*35*,*81 , 77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 77 	TimeWindow = [ 78 , 82 ]	BeginService =  81.64	CurrentTime = 83 	Route = *71*,*65*,*78*,*34*,*35*,*81*,*77 , 28 ");
        assertThat(salesmenRoutes.get("Salesman-13").get(lineCount++)).isEqualTo("Salesman = 13	Parcel = 28 	TimeWindow = [  0 , 93 ]	BeginService =  91.83	CurrentTime = 93 	Route = *71*,*65*,*78*,*34*,*35*,*81*,*77*,*28 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257718);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(45); // The simulater is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(97);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(14);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r201_0_1_test() throws Exception {
        File file = Paths.get(rootDirectory, "r201-0.1.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r201-0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 94 are a-priori known (available nodes excluding the depot) and 6 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 132.12819654724314 (scalled value = 1321.2819654724312); Number of vehicles used: 5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=131.8556495960999 (scalled value = 1318.556495960999)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=131.632643080467 (scalled value = 1316.32643080467)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=129.55342086048543 (scalled value = 1295.5342086048543)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 29 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=5 total tours length=134.72214987854565 (scalled value = 1347.2214987854563)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=5 total tours length=128.7182997846963 (scalled value = 1287.182997846963)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.71836764991667 (scalled value = 1357.1836764991667)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.37088241459034 (scalled value = 1353.7088241459032)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.80579756815317 (scalled value = 1338.0579756815316)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.74221352490244 (scalled value = 1327.4221352490242)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=130.97627878133352 (scalled value = 1309.762787813335)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 38 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=134.57875653209692 (scalled value = 1345.7875653209692)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.38227836859792 (scalled value = 1343.8227836859792)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.2578989565438 (scalled value = 1342.578989565438)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.69144696966833 (scalled value = 1336.9144696966832)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.65663668614567 (scalled value = 1326.5663668614566)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 77 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=133.84772314385194 (scalled value = 1338.4772314385193)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.7390258894206 (scalled value = 1327.3902588942058)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 93 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=134.19862198859246 (scalled value = 1341.9862198859246)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.7648513484002 (scalled value = 1337.648513484002)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.6702221373018 (scalled value = 1336.702221373018)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.08927801001914 (scalled value = 1330.8927801001914)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.6465870285105 (scalled value = 1326.465870285105)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=132.59609089948947 (scalled value = 1325.9609089948947)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 48 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=139.5360958541237 (scalled value = 1395.3609585412369)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.78973197551053 (scalled value = 1377.8973197551052)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.4129346923993 (scalled value = 1374.129346923993)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.76032376926656 (scalled value = 1367.6032376926655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.00236075025796 (scalled value = 1360.0236075025796)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.6973353582681 (scalled value = 1356.973353582681)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.68712720790882 (scalled value = 1356.8712720790882)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.4776138201191 (scalled value = 1354.7761382011909)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 32 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=141.80185816500762 (scalled value = 1418.0185816500762)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.11029302754332 (scalled value = 1401.1029302754332)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.75229549148477 (scalled value = 1397.5229549148476)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.32549659916293 (scalled value = 1383.2549659916292)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.98251841694014 (scalled value = 1379.8251841694014)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.4044743269346 (scalled value = 1374.0447432693459)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.32189055295797 (scalled value = 1373.2189055295796)");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 95 	TimeWindow = [  9 , 23 ]	BeginService =   9.20	CurrentTime = 10 	Route = *95*, 92 , 42 ,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 92 	TimeWindow = [  2 , 18 ]	BeginService =  10.56	CurrentTime = 12 	Route = *95*,*92*, 42 ,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 42 	TimeWindow = [  3 , 17 ]	BeginService =  12.58	CurrentTime = 14 	Route = *95*,*92*,*42*,  2 , 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 2  	TimeWindow = [ 14 , 28 ]	BeginService =  14.79	CurrentTime = 16 	Route = *95*,*92*,*42*,* 2*, 72 , 39 , 21 , 75 , 23 , 15 , 73 , 67 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [  3 , 21 ]	BeginService =  16.99	CurrentTime = 18 	Route = *95*,*92*,*42*,* 2*,*72*, 39 , 23 , 15 , 73 , 21 , 75 , 67 , 40 , 87 , 94 ,  6 , 97 , 37 , 96 , 89 , 60 , 17 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 39 	TimeWindow = [  3 , 22 ]	BeginService =  19.35	CurrentTime = 20 	Route = *95*,*92*,*42*,* 2*,*72*,*39*, 23 , 15 , 73 , 21 , 75 , 67 , 40 , 87 , 94 ,  6 , 97 , 37 , 96 , 89 , 60 , 17 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 23 	TimeWindow = [ 21 , 33 ]	BeginService =  21.21	CurrentTime = 22 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*, 75 , 21 , 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 75 	TimeWindow = [ 24 , 35 ]	BeginService =  23.60	CurrentTime = 25 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*, 21 , 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 21 	TimeWindow = [ 21 , 33 ]	BeginService =  25.58	CurrentTime = 27 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*, 73 , 67 , 40 , 53 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 67 	TimeWindow = [ 29 , 40 ]	BeginService =  29.40	CurrentTime = 30 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*, 73 , 40 , 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 73 	TimeWindow = [ 31 , 40 ]	BeginService =  32.99	CurrentTime = 34 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*, 40 , 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 40 	TimeWindow = [ 36 , 44 ]	BeginService =  36.00	CurrentTime = 37 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*, 53 , 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 53 	TimeWindow = [ 41 , 49 ]	BeginService =  41.40	CurrentTime = 42 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*, 87 , 57 , 22 , 41 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 87 	TimeWindow = [ 42 , 45 ]	BeginService =  43.98	CurrentTime = 45 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*, 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 57 	TimeWindow = [ 42 , 53 ]	BeginService =  45.70	CurrentTime = 47 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*, 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 22 	TimeWindow = [ 41 , 49 ]	BeginService =  48.02	CurrentTime = 49 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*, 41 , 43 , 97 , 37 , 96 , 60 , 48 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 41 	TimeWindow = [ 40 , 51 ]	BeginService =  49.44	CurrentTime = 50 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*, 43 , 37 , 97 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 59 , 69 ]	BeginService =  58.50	CurrentTime = 60 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*, 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 68 , 80 ]	BeginService =  68.10	CurrentTime = 69 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 4  	TimeWindow = [ 68 , 80 ]	BeginService =  70.24	CurrentTime = 71 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*, 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 55 	TimeWindow = [ 62 , 74 ]	BeginService =  72.09	CurrentTime = 73 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*, 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 25 	TimeWindow = [ 82 , 96 ]	BeginService =  81.70	CurrentTime = 83 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*, 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [ 70 , 85 ]	BeginService =  84.20	CurrentTime = 85 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*,*24*, 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 84 , 97 ]	BeginService =  86.12	CurrentTime = 87 	Route = *95*,*92*,*42*,* 2*,*72*,*39*,*23*,*75*,*21*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*56*,*74*,* 4*,*55*,*25*,*24*,*80*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 27 	TimeWindow = [ 10 , 26 ]	BeginService =  10.40	CurrentTime = 11 	Route = *27*, 65 , 33 , 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 24 , 55 , 25 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 65 	TimeWindow = [  5 , 19 ]	BeginService =  15.98	CurrentTime = 17 	Route = *27*,*65*, 33 , 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 24 , 55 , 25 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 33 	TimeWindow = [  5 , 20 ]	BeginService =  19.64	CurrentTime = 21 	Route = *27*,*65*,*33*, 29 , 12 , 76 , 30 , 71 , 51 , 78 , 79 , 81 ,  9 , 90 ,  3 , 34 , 50 , 68 , 26 , 54 ,  4 , 74 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 29 	TimeWindow = [ 19 , 31 ]	BeginService =  22.12	CurrentTime = 23 	Route = *27*,*65*,*33*,*29*, 12 , 76 , 30 , 71 , 51 , 79 , 78 , 81 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 12 	TimeWindow = [ 23 , 35 ]	BeginService =  24.69	CurrentTime = 26 	Route = *27*,*65*,*33*,*29*,*12*, 76 , 30 , 71 , 51 , 79 , 78 , 81 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 76 	TimeWindow = [ 29 , 37 ]	BeginService =  29.00	CurrentTime = 30 	Route = *27*,*65*,*33*,*29*,*12*,*76*, 30 , 71 , 51 , 79 , 81 , 78 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 30 	TimeWindow = [ 26 , 35 ]	BeginService =  32.01	CurrentTime = 33 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*, 71 , 51 , 79 , 81 , 78 ,  9 ,  3 , 34 , 50 , 26 , 54 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 71 	TimeWindow = [ 27 , 37 ]	BeginService =  34.89	CurrentTime = 36 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,  9 , 51 , 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 51 	TimeWindow = [ 35 , 45 ]	BeginService =  37.17	CurrentTime = 41 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,  9 , 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 9  	TimeWindow = [ 40 , 50 ]	BeginService =  40.00	CurrentTime = 42 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*, 81 , 79 , 78 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 78 	TimeWindow = [ 38 , 50 ]	BeginService =  42.00	CurrentTime = 43 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*, 81 , 79 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 81 	TimeWindow = [ 41 , 46 ]	BeginService =  43.63	CurrentTime = 45 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*, 79 ,  3 , 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 79 	TimeWindow = [ 39 , 47 ]	BeginService =  45.26	CurrentTime = 46 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*, 34 ,  3 , 50 , 68 , 26 , 54 ,  4 , 55 , 25 , 24 , 80 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 3  	TimeWindow = [ 53 , 58 ]	BeginService =  52.70	CurrentTime = 54 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*, 34 , 50 , 26 , 54 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 34 	TimeWindow = [ 53 , 61 ]	BeginService =  55.11	CurrentTime = 56 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*, 50 , 26 , 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 50 	TimeWindow = [ 55 , 64 ]	BeginService =  58.08	CurrentTime = 59 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*, 26 , 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 26 	TimeWindow = [ 59 , 67 ]	BeginService =  60.80	CurrentTime = 62 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*, 54 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 54 	TimeWindow = [ 64 , 73 ]	BeginService =  64.10	CurrentTime = 65 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*, 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 68 	TimeWindow = [ 64 , 75 ]	BeginService =  66.10	CurrentTime = 67 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*, 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 77 	TimeWindow = [ 82 , 95 ]	BeginService =  81.70	CurrentTime = 83 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 1  	TimeWindow = [ 71 , 85 ]	BeginService =  84.04	CurrentTime = 85 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,* 1*, 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 70 	TimeWindow = [ 79 , 97 ]	BeginService =  85.85	CurrentTime = 87 	Route = *27*,*65*,*33*,*29*,*12*,*76*,*30*,*71*,*51*,* 9*,*78*,*81*,*79*,* 3*,*34*,*50*,*26*,*54*,*68*,*77*,* 1*,*70*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 28 	TimeWindow = [ 11 , 26 ]	BeginService =  11.40	CurrentTime = 12 	Route = *28*, 69 , 31 , 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 69 	TimeWindow = [ 16 , 29 ]	BeginService =  16.20	CurrentTime = 17 	Route = *28*,*69*, 31 , 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 31 	TimeWindow = [ 15 , 28 ]	BeginService =  17.98	CurrentTime = 19 	Route = *28*,*69*,*31*, 52 , 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 52 	TimeWindow = [ 17 , 30 ]	BeginService =  19.97	CurrentTime = 21 	Route = *28*,*69*,*31*,*52*, 82 , 62 , 11 , 64 , 19 , 88 ,  7 , 18 , 99 , 94 ,  6 , 97 , 43 , 37 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 82 	TimeWindow = [ 16 , 29 ]	BeginService =  22.23	CurrentTime = 23 	Route = *28*,*69*,*31*,*52*,*82*, 62 , 11 , 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 62 	TimeWindow = [ 16 , 30 ]	BeginService =  24.65	CurrentTime = 26 	Route = *28*,*69*,*31*,*52*,*82*,*62*, 11 , 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 11 	TimeWindow = [ 21 , 33 ]	BeginService =  26.46	CurrentTime = 27 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*, 64 , 19 , 88 ,  7 , 18 ,  8 , 86 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 64 	TimeWindow = [ 21 , 33 ]	BeginService =  28.76	CurrentTime = 30 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*, 19 , 88 ,  7 , 90 , 18 , 94 ,  6 , 97 , 37 , 96 , 43 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 19 	TimeWindow = [ 27 , 38 ]	BeginService =  31.46	CurrentTime = 32 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*, 88 ,  7 , 90 , 18 , 94 ,  6 , 97 , 37 , 96 , 43 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 88 	TimeWindow = [ 28 , 39 ]	BeginService =  33.82	CurrentTime = 35 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,  7 , 18 , 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [ 33 , 41 ]	BeginService =  35.45	CurrentTime = 36 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*, 18 , 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 18 	TimeWindow = [ 38 , 43 ]	BeginService =  37.70	CurrentTime = 39 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*, 99 , 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 99 	TimeWindow = [ 33 , 43 ]	BeginService =  40.10	CurrentTime = 41 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*, 85 , 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 100 , 91 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 85 	TimeWindow = [ 38 , 46 ]	BeginService =  41.67	CurrentTime = 43 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*, 84 ,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 84 	TimeWindow = [ 44 , 51 ]	BeginService =  43.70	CurrentTime = 45 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,  6 , 94 , 97 , 43 , 37 , 96 , 13 , 89 , 60 , 17 , 91 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 6  	TimeWindow = [ 42 , 51 ]	BeginService =  46.10	CurrentTime = 47 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*, 94 , 10 , 20 , 66 , 35 , 68 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 94 	TimeWindow = [ 44 , 50 ]	BeginService =  47.42	CurrentTime = 48 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*, 10 , 20 , 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [ 61 , 69 ]	BeginService =  60.70	CurrentTime = 62 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*, 97 , 37 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [ 61 , 67 ]	BeginService =  62.37	CurrentTime = 63 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*, 37 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [ 61 , 69 ]	BeginService =  63.88	CurrentTime = 65 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*, 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [ 62 , 71 ]	BeginService =  66.61	CurrentTime = 68 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*, 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 13 	TimeWindow = [ 69 , 83 ]	BeginService =  69.92	CurrentTime = 71 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*,*13*, 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 58 	TimeWindow = [ 85 , 98 ]	BeginService =  84.90	CurrentTime = 86 	Route = *28*,*69*,*31*,*52*,*82*,*62*,*11*,*64*,*19*,*88*,* 7*,*18*,*99*,*85*,*84*,* 6*,*94*,*96*,*97*,*37*,*43*,*13*,*58*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 63 	TimeWindow = [  3 , 19 ]	BeginService =   3.49	CurrentTime = 4  	Route = *63*, 47 , 36 , 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 99 , 86 , 84 ,  8 , 49 , 46 , 17 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 47 	TimeWindow = [  9 , 25 ]	BeginService =   8.50	CurrentTime = 10 	Route = *63*,*47*, 36 , 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 36 	TimeWindow = [  4 , 21 ]	BeginService =  10.22	CurrentTime = 11 	Route = *63*,*47*,*36*, 45 , 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 45 	TimeWindow = [  3 , 19 ]	BeginService =  13.46	CurrentTime = 14 	Route = *63*,*47*,*36*,*45*, 83 ,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 83 	TimeWindow = [ 10 , 25 ]	BeginService =  15.26	CurrentTime = 16 	Route = *63*,*47*,*36*,*45*,*83*,  5 , 59 , 98 , 14 , 44 , 16 , 61 , 85 , 86 , 99 , 94 ,  6 , 97 , 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 5  	TimeWindow = [  3 , 21 ]	BeginService =  16.97	CurrentTime = 18 	Route = *63*,*47*,*36*,*45*,*83*,* 5*, 59 , 98 , 14 , 44 , 16 , 61 , 86 , 85 , 99 , 53 , 22 , 41 , 57 , 43 , 56 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 59 	TimeWindow = [  2 , 23 ]	BeginService =  18.82	CurrentTime = 20 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*, 98 , 14 , 44 , 16 , 61 , 86 , 85 , 99 , 53 , 22 , 41 , 57 , 43 , 56 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 98 	TimeWindow = [ 18 , 31 ]	BeginService =  20.18	CurrentTime = 21 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*, 14 , 15 , 16 , 44 , 61 , 85 , 86 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 14 	TimeWindow = [  3 , 24 ]	BeginService =  22.35	CurrentTime = 23 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*, 15 , 44 , 16 , 61 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 15 	TimeWindow = [ 18 , 30 ]	BeginService =  24.93	CurrentTime = 26 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*, 44 , 16 , 61 , 38 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 44 	TimeWindow = [ 23 , 34 ]	BeginService =  28.03	CurrentTime = 29 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*, 16 , 61 , 38 , 85 , 99 , 87 , 57 , 41 , 22 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 16 	TimeWindow = [ 27 , 37 ]	BeginService =  29.64	CurrentTime = 31 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*, 61 , 38 , 86 , 85 , 99 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 61 	TimeWindow = [ 29 , 38 ]	BeginService =  31.09	CurrentTime = 32 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*, 38 , 86 , 85 , 99 , 84 ,  8 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 38 	TimeWindow = [ 30 , 41 ]	BeginService =  34.11	CurrentTime = 35 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*, 86 ,  8 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 86 	TimeWindow = [ 39 , 47 ]	BeginService =  38.80	CurrentTime = 40 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,  8 , 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 40 , 48 ]	BeginService =  42.37	CurrentTime = 43 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*, 90 , 49 , 46 , 10 , 20 , 66 , 35 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 90 	TimeWindow = [ 39 , 49 ]	BeginService =  46.56	CurrentTime = 48 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*, 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 49 	TimeWindow = [ 50 , 54 ]	BeginService =  50.10	CurrentTime = 51 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*, 46 , 10 , 20 , 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [ 52 , 63 ]	BeginService =  53.14	CurrentTime = 54 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*, 10 , 20 , 66 , 35 , 32 , 70 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 10 	TimeWindow = [ 58 , 63 ]	BeginService =  57.70	CurrentTime = 59 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*, 20 , 66 , 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 20 	TimeWindow = [ 58 , 67 ]	BeginService =  60.28	CurrentTime = 61 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*, 66 , 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 66 	TimeWindow = [ 59 , 69 ]	BeginService =  62.18	CurrentTime = 63 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*, 35 , 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 35 	TimeWindow = [ 69 , 81 ]	BeginService =  68.60	CurrentTime = 70 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*, 32 , 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 32 	TimeWindow = [ 66 , 78 ]	BeginService =  72.43	CurrentTime = 73 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*, 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [ 77 , 91 ]	BeginService =  77.30	CurrentTime = 78 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*, 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 60 	TimeWindow = [ 72 , 86 ]	BeginService =  80.14	CurrentTime = 81 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*, 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 17 	TimeWindow = [ 73 , 87 ]	BeginService =  82.41	CurrentTime = 83 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*, 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 91 	TimeWindow = [ 74 , 87 ]	BeginService =  84.90	CurrentTime = 86 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*, 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 100	TimeWindow = [ 80 , 97 ]	BeginService =  86.21	CurrentTime = 87 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*, 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 93 	TimeWindow = [ 81 , 97 ]	BeginService =  87.81	CurrentTime = 89 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*,*93*, 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 89 	TimeWindow = [ 76 , 92 ]	BeginService =  90.17	CurrentTime = 91 	Route = *63*,*47*,*36*,*45*,*83*,* 5*,*59*,*98*,*14*,*15*,*44*,*16*,*61*,*38*,*86*,* 8*,*90*,*49*,*46*,*10*,*20*,*66*,*35*,*32*,*48*,*60*,*17*,*91*,*100*,*93*,*89*");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257717);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(1); // The simulater is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(92);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(4);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_r201_0_5_test() throws Exception {
        File file = Paths.get(rootDirectory, "r201-0.5.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: r201-0.5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 50 are a-priori known (available nodes excluding the depot) and 50 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 83.0060681211039 (scalled value = 830.0606812110389); Number of vehicles used: 3");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=82.7693674923068 (scalled value = 827.693674923068)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=81.10107889630214 (scalled value = 811.0107889630214)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=3 total tours length=80.67941856682674 (scalled value = 806.7941856682673)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("12 new nodes became available (known): 2 14 33 35 36 39 44 50 65 83 98 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 62");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=5 total tours length=130.88697116818562 (scalled value = 1308.8697116818562)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=96.14539565771314 (scalled value = 961.4539565771313)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=87.65332765764863 (scalled value = 876.5332765764863)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 22 52 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 65");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=98.31608401059862 (scalled value = 983.1608401059862)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=94.655863097665 (scalled value = 946.55863097665)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=91.89307469809162 (scalled value = 918.9307469809162)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 95 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 66");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=93.10231778075516 (scalled value = 931.0231778075515)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 64 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=95.92919125201024 (scalled value = 959.2919125201024)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 12 21 81 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 70");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=112.0928767080881 (scalled value = 1120.928767080881)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=110.17667284181502 (scalled value = 1101.76672841815)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=108.69122379671349 (scalled value = 1086.9122379671348)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=101.81054812690957 (scalled value = 1018.1054812690957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 10 29 53 79 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 74");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=111.58502580868559 (scalled value = 1115.8502580868558)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 55 82 94 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 77");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=118.52580226383233 (scalled value = 1185.2580226383232)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.75210622475011 (scalled value = 1137.521062247501)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 76 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 78");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=115.4724003264972 (scalled value = 1154.7240032649718)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=114.00499973481513 (scalled value = 1140.0499973481512)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 78 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=114.42695418054444 (scalled value = 1144.2695418054443)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 19 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=114.49908212574515 (scalled value = 1144.9908212574514)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.98799018499813 (scalled value = 1139.8799018499813)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=113.42966515104055 (scalled value = 1134.2966515104054)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 74 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 81");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=116.46151084469648 (scalled value = 1164.6151084469648)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=116.08233840820968 (scalled value = 1160.8233840820967)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=114.92199150036305 (scalled value = 1149.2199150036304)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 20 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 82");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=118.35202791280997 (scalled value = 1183.5202791280997)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=117.54376477949961 (scalled value = 1175.437647794996)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 83");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=122.14747861039163 (scalled value = 1221.4747861039161)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=121.06284688685773 (scalled value = 1210.628468868577)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 23 91 97 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=135.68096992607903 (scalled value = 1356.8096992607902)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.57614468047656 (scalled value = 1245.7614468047655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.92069183811557 (scalled value = 1229.2069183811557)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.51568529413784 (scalled value = 1225.1568529413782)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=122.01820955592655 (scalled value = 1220.1820955592655)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 51 84 88 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=126.6112610073299 (scalled value = 1266.112610073299)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.62761555531975 (scalled value = 1256.2761555531974)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=125.61413124891746 (scalled value = 1256.1413124891744)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=124.73714382083367 (scalled value = 1247.3714382083365)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 49 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=129.06185836842124 (scalled value = 1290.6185836842124)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=127.73224023875649 (scalled value = 1277.3224023875648)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 17 38 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=133.3500399194815 (scalled value = 1333.500399194815)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=133.3062646818421 (scalled value = 1333.062646818421)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 8 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.52510700525752 (scalled value = 1365.2510700525752)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.04353726188984 (scalled value = 1360.4353726188983)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 25 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=139.3896795673279 (scalled value = 1393.896795673279)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.60198254857528 (scalled value = 1356.0198254857528)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 66 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 95");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=136.3088612892349 (scalled value = 1363.088612892349)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 56 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=138.70760905537279 (scalled value = 1387.0760905537277)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 26 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=140.6364409147111 (scalled value = 1406.364409147111)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.3213370949507 (scalled value = 1393.213370949507)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.75815256909493 (scalled value = 1387.5815256909493)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=136.53105087305988 (scalled value = 1365.3105087305987)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.983974379481 (scalled value = 1359.83974379481)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=135.71830546343287 (scalled value = 1357.1830546343285)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=134.5447779137225 (scalled value = 1345.4477791372249)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 32 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 98");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=140.06611712066368 (scalled value = 1400.6611712066367)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=138.01657004557435 (scalled value = 1380.1657004557435)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=137.356933211716 (scalled value = 1373.56933211716)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 70 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=141.46799578132124 (scalled value = 1414.6799578132122)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=139.55821677513856 (scalled value = 1395.5821677513854)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 1 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=4 total tours length=142.20263319937038 (scalled value = 1422.0263319937037)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.3238786373558 (scalled value = 1413.2387863735578)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.12151899312315 (scalled value = 1411.2151899312314)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=141.05255707699953 (scalled value = 1410.5255707699953)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.4651807828949 (scalled value = 1404.651807828949)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=4 total tours length=140.32174603383297 (scalled value = 1403.2174603383296)");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [  3 , 21 ]	BeginService =   3.10	CurrentTime = 11 	Route = *72*, 39 , 28 , 27 , 52 , 69 , 31 , 62 , 11 , 64 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 39 	TimeWindow = [  3 , 22 ]	BeginService =   5.46	CurrentTime = 12 	Route = *72*,*39*, 28 , 27 , 52 , 69 , 31 , 62 , 11 , 64 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 28 	TimeWindow = [ 11 , 26 ]	BeginService =  11.40	CurrentTime = 13 	Route = *72*,*39*,*28*, 27 , 52 , 69 , 31 , 62 , 11 , 64 , 19 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 27 	TimeWindow = [ 10 , 26 ]	BeginService =  13.07	CurrentTime = 14 	Route = *72*,*39*,*28*,*27*, 69 , 31 , 52 , 82 , 83 , 61 , 16 , 44 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 31 	TimeWindow = [ 15 , 28 ]	BeginService =  15.34	CurrentTime = 17 	Route = *72*,*39*,*28*,*27*,*31*, 69 , 52 , 83 , 82 , 99 , 61 , 16 , 86 , 85 , 87 , 22 , 41 , 57 , 46 , 48 , 60 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 69 	TimeWindow = [ 16 , 29 ]	BeginService =  17.12	CurrentTime = 18 	Route = *72*,*39*,*28*,*27*,*31*,*69*, 52 , 83 , 82 , 99 , 61 , 16 , 86 , 85 , 87 , 22 , 41 , 57 , 46 , 48 , 60 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 52 	TimeWindow = [ 17 , 30 ]	BeginService =  19.19	CurrentTime = 20 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*, 83 , 82 , 62 , 11 , 64 , 19 ,  7 , 18 , 90 , 10 , 46 , 48 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 83 	TimeWindow = [ 10 , 25 ]	BeginService =  21.63	CurrentTime = 23 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*, 82 , 88 , 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 82 	TimeWindow = [ 16 , 29 ]	BeginService =  23.63	CurrentTime = 25 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*, 88 , 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 88 	TimeWindow = [ 28 , 39 ]	BeginService =  27.90	CurrentTime = 29 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*, 30 , 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 30 	TimeWindow = [ 26 , 35 ]	BeginService =  30.51	CurrentTime = 32 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*, 71 , 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 71 	TimeWindow = [ 27 , 37 ]	BeginService =  33.39	CurrentTime = 34 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*, 76 , 51 , 79 , 81 ,  9 , 78 , 34 ,  3 , 50 , 68 , 54 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 76 	TimeWindow = [ 29 , 37 ]	BeginService =  37.11	CurrentTime = 38 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*, 51 , 79 , 81 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 25 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 79 	TimeWindow = [ 39 , 47 ]	BeginService =  39.11	CurrentTime = 40 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*, 81 , 51 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 81 	TimeWindow = [ 41 , 46 ]	BeginService =  41.10	CurrentTime = 42 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*, 51 ,  9 , 78 ,  3 , 34 , 50 , 68 , 54 , 24 , 55 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 51 	TimeWindow = [ 35 , 45 ]	BeginService =  42.82	CurrentTime = 44 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,  9 , 78 ,  3 , 34 , 50 , 26 , 54 , 55 , 56 ,  4 , 74 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 9  	TimeWindow = [ 40 , 50 ]	BeginService =  44.45	CurrentTime = 45 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*, 78 , 34 ,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 78 	TimeWindow = [ 38 , 50 ]	BeginService =  46.45	CurrentTime = 47 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*, 34 ,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 34 	TimeWindow = [ 53 , 61 ]	BeginService =  52.90	CurrentTime = 54 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,  3 , 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 3  	TimeWindow = [ 53 , 58 ]	BeginService =  55.31	CurrentTime = 56 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*, 50 , 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 50 	TimeWindow = [ 55 , 64 ]	BeginService =  57.14	CurrentTime = 58 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*, 26 , 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 26 	TimeWindow = [ 59 , 67 ]	BeginService =  59.85	CurrentTime = 61 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*, 54 , 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 54 	TimeWindow = [ 64 , 73 ]	BeginService =  64.10	CurrentTime = 65 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*, 56 , 74 ,  4 , 55 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 55 	TimeWindow = [ 62 , 74 ]	BeginService =  65.95	CurrentTime = 67 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*, 56 , 74 ,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 56 	TimeWindow = [ 59 , 69 ]	BeginService =  68.44	CurrentTime = 69 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*, 74 ,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 68 , 80 ]	BeginService =  70.14	CurrentTime = 71 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,  4 , 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 4  	TimeWindow = [ 68 , 80 ]	BeginService =  72.28	CurrentTime = 73 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*, 25 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 25 	TimeWindow = [ 82 , 96 ]	BeginService =  81.70	CurrentTime = 83 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*, 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 24 	TimeWindow = [ 70 , 85 ]	BeginService =  84.20	CurrentTime = 85 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*,*24*, 80 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 80 	TimeWindow = [ 84 , 97 ]	BeginService =  86.12	CurrentTime = 87 	Route = *72*,*39*,*28*,*27*,*31*,*69*,*52*,*83*,*82*,*88*,*30*,*71*,*76*,*79*,*81*,*51*,* 9*,*78*,*34*,* 3*,*50*,*26*,*54*,*55*,*56*,*74*,* 4*,*25*,*24*,*80*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 45 	TimeWindow = [  3 , 19 ]	BeginService =   2.92	CurrentTime = 8  	Route = *45*, 83 , 95 ,  2 , 72 , 39 , 21 , 75 , 73 , 67 , 40 , 87 , 57 , 22 , 41 , 43 , 37 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 36 	TimeWindow = [  4 , 21 ]	BeginService =   6.15	CurrentTime = 10 	Route = *45*,*36*, 47 , 63 , 11 , 64 , 62 ,  7 , 18 , 94 ,  6 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 47 	TimeWindow = [  9 , 25 ]	BeginService =   8.50	CurrentTime = 11 	Route = *45*,*36*,*47*, 63 , 82 , 83 , 61 , 44 , 16 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 63 	TimeWindow = [  3 , 19 ]	BeginService =  11.80	CurrentTime = 13 	Route = *45*,*36*,*47*,*63*, 82 , 83 , 61 , 44 , 16 , 86 , 85 , 99 , 94 ,  6 , 96 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 62 	TimeWindow = [ 16 , 30 ]	BeginService =  16.30	CurrentTime = 21 	Route = *45*,*36*,*47*,*63*,*62*, 11 , 64 , 19 , 30 , 71 , 76 , 79 , 81 ,  9 , 78 ,  3 , 34 , 20 , 50 , 68 , 54 , 55 ,  4 , 74 , 24 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 11 	TimeWindow = [ 21 , 33 ]	BeginService =  20.60	CurrentTime = 23 	Route = *45*,*36*,*47*,*63*,*62*,*11*, 64 , 19 ,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 64 	TimeWindow = [ 21 , 33 ]	BeginService =  22.90	CurrentTime = 24 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*, 19 ,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 19 	TimeWindow = [ 27 , 38 ]	BeginService =  26.90	CurrentTime = 28 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,  7 , 18 , 84 , 86 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 7  	TimeWindow = [ 33 , 41 ]	BeginService =  33.10	CurrentTime = 34 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*, 18 , 90 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 18 	TimeWindow = [ 38 , 43 ]	BeginService =  37.70	CurrentTime = 39 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,  6 , 94 , 90 , 10 , 20 , 35 , 77 , 80 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 6  	TimeWindow = [ 42 , 51 ]	BeginService =  41.50	CurrentTime = 43 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*, 94 , 90 , 10 , 20 , 66 , 35 , 77 , 80 , 25 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 94 	TimeWindow = [ 44 , 50 ]	BeginService =  43.60	CurrentTime = 45 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*, 90 , 10 , 20 , 66 , 35 , 68 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 90 	TimeWindow = [ 39 , 49 ]	BeginService =  48.63	CurrentTime = 50 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*, 10 , 20 , 66 , 35 , 68 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 10 	TimeWindow = [ 58 , 63 ]	BeginService =  57.70	CurrentTime = 59 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*, 20 , 32 , 66 , 35 , 68 , 77 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 20 	TimeWindow = [ 58 , 67 ]	BeginService =  60.28	CurrentTime = 61 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*, 32 , 66 , 35 , 68 , 77 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 32 	TimeWindow = [ 66 , 78 ]	BeginService =  66.00	CurrentTime = 67 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*, 66 , 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 66 	TimeWindow = [ 59 , 69 ]	BeginService =  68.46	CurrentTime = 69 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*, 35 , 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 35 	TimeWindow = [ 69 , 81 ]	BeginService =  71.07	CurrentTime = 72 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*, 68 , 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 68 	TimeWindow = [ 64 , 75 ]	BeginService =  74.76	CurrentTime = 76 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*, 77 ,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 77 	TimeWindow = [ 82 , 95 ]	BeginService =  81.70	CurrentTime = 83 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,  1 , 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 1  	TimeWindow = [ 71 , 85 ]	BeginService =  84.04	CurrentTime = 85 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,* 1*, 70 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 70 	TimeWindow = [ 79 , 97 ]	BeginService =  85.85	CurrentTime = 87 	Route = *45*,*36*,*47*,*63*,*62*,*11*,*64*,*19*,* 7*,*18*,* 6*,*94*,*90*,*10*,*20*,*32*,*66*,*35*,*68*,*77*,* 1*,*70*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 33 	TimeWindow = [  5 , 20 ]	BeginService =   4.50	CurrentTime = 6  	Route = *33*, 65 , 63 , 11 , 62 , 31 , 52 , 69 , 71 ,  9 , 90 , 50 ,  3 , 34 , 35 , 77 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 65 	TimeWindow = [  5 , 19 ]	BeginService =   8.16	CurrentTime = 9  	Route = *33*,*65*, 63 , 31 , 62 , 36 , 47 , 11 , 64 , 71 ,  9 , 81 , 79 , 34 ,  3 , 50 , 68 , 54 ,  4 , 24 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 29 	TimeWindow = [ 19 , 31 ]	BeginService =  19.00	CurrentTime = 20 	Route = *33*,*65*,*29*, 12 , 21 , 75 , 23 , 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 74 , 54 , 55 ,  4 , 24 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 12 	TimeWindow = [ 23 , 35 ]	BeginService =  22.80	CurrentTime = 24 	Route = *33*,*65*,*29*,*12*, 21 , 75 , 23 , 67 , 73 , 40 , 53 , 94 , 90 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 21 	TimeWindow = [ 21 , 33 ]	BeginService =  25.38	CurrentTime = 26 	Route = *33*,*65*,*29*,*12*,*21*, 75 , 23 , 67 , 73 , 40 , 53 , 94 , 90 , 49 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 75 	TimeWindow = [ 24 , 35 ]	BeginService =  27.37	CurrentTime = 28 	Route = *33*,*65*,*29*,*12*,*21*,*75*, 23 , 67 , 73 , 40 , 53 , 94 , 90 , 49 , 10 , 20 , 35 , 77 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 23 	TimeWindow = [ 21 , 33 ]	BeginService =  29.21	CurrentTime = 30 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*, 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 17 , 100 , 91 , 93 , 60 , 48 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 67 	TimeWindow = [ 29 , 40 ]	BeginService =  31.41	CurrentTime = 32 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*, 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 17 , 100 , 91 , 93 , 60 , 48 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 73 	TimeWindow = [ 31 , 40 ]	BeginService =  35.01	CurrentTime = 36 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*, 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 40 	TimeWindow = [ 36 , 44 ]	BeginService =  36.90	CurrentTime = 38 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*, 53 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 53 	TimeWindow = [ 41 , 49 ]	BeginService =  41.40	CurrentTime = 42 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*, 87 , 57 , 22 , 41 , 56 , 43 , 37 , 97 , 96 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 87 	TimeWindow = [ 42 , 45 ]	BeginService =  43.98	CurrentTime = 45 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*, 57 , 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 57 	TimeWindow = [ 42 , 53 ]	BeginService =  45.70	CurrentTime = 47 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*, 22 , 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 22 	TimeWindow = [ 41 , 49 ]	BeginService =  48.02	CurrentTime = 49 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*, 41 , 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 41 	TimeWindow = [ 40 , 51 ]	BeginService =  49.44	CurrentTime = 50 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*, 43 , 97 , 37 , 96 , 60 , 17 , 91 , 100 , 93 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 97 	TimeWindow = [ 61 , 67 ]	BeginService =  61.20	CurrentTime = 62 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*, 37 , 96 , 43 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 43 	TimeWindow = [ 62 , 71 ]	BeginService =  64.01	CurrentTime = 65 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*, 37 , 96 , 13 , 93 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 37 	TimeWindow = [ 61 , 69 ]	BeginService =  66.74	CurrentTime = 68 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*, 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 96 	TimeWindow = [ 61 , 69 ]	BeginService =  68.47	CurrentTime = 69 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*, 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 13 	TimeWindow = [ 69 , 83 ]	BeginService =  70.29	CurrentTime = 71 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*,*13*, 58 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 58 	TimeWindow = [ 85 , 98 ]	BeginService =  84.90	CurrentTime = 86 	Route = *33*,*65*,*29*,*12*,*21*,*75*,*23*,*67*,*73*,*40*,*53*,*87*,*57*,*22*,*41*,*97*,*43*,*37*,*96*,*13*,*58*");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 5  	TimeWindow = [  3 , 21 ]	BeginService =   3.40	CurrentTime = 4  	Route = * 5*, 59 , 92 , 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 59 	TimeWindow = [  2 , 23 ]	BeginService =   5.25	CurrentTime = 6  	Route = * 5*,*59*, 92 , 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 92 	TimeWindow = [  2 , 18 ]	BeginService =   6.47	CurrentTime = 7  	Route = * 5*,*59*,*92*, 42 , 14 , 15 , 39 , 67 , 75 , 73 , 40 , 85 , 99 ,  6 , 96 , 37 , 43 , 100 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 42 	TimeWindow = [  3 , 17 ]	BeginService =   8.49	CurrentTime = 9  	Route = * 5*,*59*,*92*,*42*, 15 , 14 , 44 , 98 , 16 , 61 , 86 , 85 , 99 ,  6 , 53 , 96 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 14 	TimeWindow = [  3 , 24 ]	BeginService =  10.41	CurrentTime = 11 	Route = * 5*,*59*,*92*,*42*,*14*, 98 , 95 , 15 ,  2 , 21 , 75 , 67 , 73 , 40 , 53 , 87 , 57 , 22 , 41 , 43 , 37 , 100 , 93 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 2  	TimeWindow = [ 14 , 28 ]	BeginService =  14.30	CurrentTime = 19 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*, 15 , 95 , 98 , 44 , 16 , 61 , 86 , 85 , 87 , 57 , 22 , 41 , 43 , 37 , 96 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 15 	TimeWindow = [ 18 , 30 ]	BeginService =  17.50	CurrentTime = 20 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*, 95 , 98 , 44 , 16 , 61 , 86 , 85 , 99 , 94 ,  6 , 97 , 43 , 37 , 96 , 13 , 93 , 91 , 100 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 95 	TimeWindow = [  9 , 23 ]	BeginService =  20.46	CurrentTime = 21 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*, 98 , 44 , 16 , 61 , 86 , 85 , 99 , 94 ,  6 , 96 , 93 , 91 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 98 	TimeWindow = [ 18 , 31 ]	BeginService =  22.14	CurrentTime = 23 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*, 44 , 16 , 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 44 	TimeWindow = [ 23 , 34 ]	BeginService =  24.20	CurrentTime = 25 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*, 16 , 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 16 	TimeWindow = [ 27 , 37 ]	BeginService =  27.20	CurrentTime = 28 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*, 61 , 85 , 99 ,  6 , 87 , 57 , 22 , 41 , 43 , 37 , 97 , 96 , 100 , 91 , 93 , 60 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 61 	TimeWindow = [ 29 , 38 ]	BeginService =  29.00	CurrentTime = 30 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*, 38 , 86 , 99 , 84 , 85 , 94 ,  6 , 96 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 38 	TimeWindow = [ 30 , 41 ]	BeginService =  32.02	CurrentTime = 33 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*, 86 , 99 , 84 , 85 , 94 ,  6 , 96 , 97 , 13 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 86 	TimeWindow = [ 39 , 47 ]	BeginService =  38.80	CurrentTime = 40 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*, 85 , 99 , 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 85 	TimeWindow = [ 38 , 46 ]	BeginService =  41.06	CurrentTime = 42 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*, 99 , 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 99 	TimeWindow = [ 33 , 43 ]	BeginService =  42.63	CurrentTime = 44 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*, 84 ,  8 , 49 , 46 , 48 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 84 	TimeWindow = [ 44 , 51 ]	BeginService =  44.66	CurrentTime = 46 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,  8 , 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 8  	TimeWindow = [ 40 , 48 ]	BeginService =  46.86	CurrentTime = 48 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*, 49 , 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 49 	TimeWindow = [ 50 , 54 ]	BeginService =  50.40	CurrentTime = 51 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*, 46 , 48 , 89 , 13 , 58 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 46 	TimeWindow = [ 52 , 63 ]	BeginService =  53.44	CurrentTime = 54 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*, 48 , 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 48 	TimeWindow = [ 77 , 91 ]	BeginService =  77.30	CurrentTime = 78 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*, 60 , 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 60 	TimeWindow = [ 72 , 86 ]	BeginService =  80.14	CurrentTime = 81 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*, 17 , 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 17 	TimeWindow = [ 73 , 87 ]	BeginService =  82.41	CurrentTime = 83 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*, 91 , 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 91 	TimeWindow = [ 74 , 87 ]	BeginService =  84.90	CurrentTime = 86 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*, 100 , 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 100	TimeWindow = [ 80 , 97 ]	BeginService =  86.21	CurrentTime = 87 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*, 93 , 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 93 	TimeWindow = [ 81 , 97 ]	BeginService =  87.81	CurrentTime = 89 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*,*93*, 89 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 89 	TimeWindow = [ 76 , 92 ]	BeginService =  90.17	CurrentTime = 91 	Route = * 5*,*59*,*92*,*42*,*14*,* 2*,*15*,*95*,*98*,*44*,*16*,*61*,*38*,*86*,*85*,*99*,*84*,* 8*,*49*,*46*,*48*,*60*,*17*,*91*,*100*,*93*,*89*");

        assertThat(statisticsDTO.totalDistance).isEqualTo(4989.422621257718);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(4); // The simulater is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(92);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(4);
    }

    @Test
    public void rinsim_dynamic_vrp_time_window_acs_c101_0_5_test() throws Exception {
        File file = Paths.get(rootDirectory, "c101-0.5.txt").toFile();
        RINSIM_ACS_DVRPTW rinsimAcsDvrptw = new RINSIM_ACS_DVRPTW(file, false);
        rinsimAcsDvrptw.run();
        Map<String, List<String>> salesmenRoutes = rinsimAcsDvrptw.getSalesmenRouteTrace();
        LoggerOutput loggerOutput = rinsimAcsDvrptw.getSolverLogs();
        StatisticsDTO statisticsDTO = rinsimAcsDvrptw.getStatistics();

        int lineCount = 0;
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("DVRPTW_ACS MinSum >> Solving dynamic VRPTW instance: c101-0.5");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("No. of customers' requests (except the depot): 100, among which 52 are a-priori known (available nodes excluding the depot) and 48 are dynamic requests");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nRun Ant Colony System #1");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Scalling value = 0.08090614886731391");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("\nInitial (nearest neighbour tour) total tour length: 73.23590361106349 (scalled value = 905.1957686327448); Number of vehicles used: 10");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=64.20493640460731 (scalled value = 793.5730139609464)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=61.97467358163835 (scalled value = 766.00696546905)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=59.48918313692532 (scalled value = 735.286303572397)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 96 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 53");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=59.55963901699469 (scalled value = 736.1571382500543)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 24 38 55 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 56");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=71.20008184390637 (scalled value = 880.0330115906828)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=63.58871859550919 (scalled value = 785.9565618404937)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=60.77037374689296 (scalled value = 751.121819511597)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("5 new nodes became available (known): 17 33 39 74 87 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 61");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=61.37580619838355 (scalled value = 758.6049646120207)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 19 63 78 83 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 65");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.83886734969599 (scalled value = 813.7684004422424)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=61.74342491852919 (scalled value = 763.1487319930209)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 25 41 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 67");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=62.06704951399845 (scalled value = 767.1487319930209)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("3 new nodes became available (known): 7 28 53 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 70");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.66544385366002 (scalled value = 823.9848860312379)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=62.811320817410646 (scalled value = 776.3479253031957)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 40 71 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 72");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=63.669114123805684 (scalled value = 786.9502505702383)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 86 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 73");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=63.669114123805684 (scalled value = 786.9502505702383)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 44 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 74");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.394996162393 (scalled value = 833.0021525671775)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=63.704976770861656 (scalled value = 787.3935128878501)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("4 new nodes became available (known): 29 70 95 100 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 78");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.77942187228636 (scalled value = 800.6736543414595)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 27 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 79");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.79725249270136 (scalled value = 800.8940408097889)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 47 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 80");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=64.94406098313208 (scalled value = 802.7085937515125)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 23 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 81");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.28684251818449 (scalled value = 806.9453735247603)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.00673083593293 (scalled value = 803.483193132131)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 37 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 82");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.0682101306724 (scalled value = 804.2430772151109)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 30 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 83");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.24369945956842 (scalled value = 806.4121253202657)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 12 73 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 85");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.38298167809678 (scalled value = 808.1336535412763)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 91 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 86");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.22537768494531 (scalled value = 830.9056681859241)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.43383461340107 (scalled value = 808.7621958216373)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 93 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 87");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.43383461340106 (scalled value = 808.7621958216372)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 2 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 88");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.97708280447559 (scalled value = 815.4767434633183)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.95606779459817 (scalled value = 815.2169979412334)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 34 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 89");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=69.1026803373547 (scalled value = 854.1091289697041)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=65.95873206822891 (scalled value = 815.2499283633094)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 49 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 90");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.95873206822891 (scalled value = 815.2499283633094)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 88 99 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 92");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=65.9961231793274 (scalled value = 815.7120824964867)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 45 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 93");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.09091062878159 (scalled value = 816.8836553717405)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 4 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 94");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.15099151384396 (scalled value = 817.6262551111114)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 22 89 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 96");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=68.21323894669533 (scalled value = 843.1156333811542)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=66.37982865985902 (scalled value = 820.4546822358575)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 51 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 97");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=66.55531798875504 (scalled value = 822.6237303410123)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("2 new nodes became available (known): 75 80 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 99");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.77271614266013 (scalled value = 837.6707715232792)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Updated Best so far ant >> No. of used vehicles=10 total tours length=67.03386094701989 (scalled value = 828.5385213051659)");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("1 new nodes became available (known): 50 ");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Number of total available (known) nodes (excluding the depot): 100");
        assertThat(loggerOutput.get(lineCount++)).isEqualTo("Best ant after inserting the new available nodes>> No. of used vehicles=10 total tours length=67.0660895584817 (scalled value = 828.936866942834)");

        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 67 	TimeWindow = [  1 ,  6 ]	BeginService =   0.99	CurrentTime = 2  	Route = *67 , 65 , 62 , 72 , 61 , 64 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 65 	TimeWindow = [  6 , 10 ]	BeginService =   8.35	CurrentTime = 9  	Route = *67*,*65 , 63 , 62 , 74 , 72 , 61 , 64 , 66 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 63 	TimeWindow = [ 14 , 18 ]	BeginService =  15.79	CurrentTime = 17 	Route = *67*,*65*,*63 , 62 , 74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 62 	TimeWindow = [ 21 , 26 ]	BeginService =  23.48	CurrentTime = 24 	Route = *67*,*65*,*63*,*62 , 74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 74 	TimeWindow = [ 29 , 33 ]	BeginService =  31.00	CurrentTime = 32 	Route = *67*,*65*,*63*,*62*,*74 , 72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 72 	TimeWindow = [ 36 , 41 ]	BeginService =  38.69	CurrentTime = 40 	Route = *67*,*65*,*63*,*62*,*74*,*72 , 61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 61 	TimeWindow = [ 43 , 49 ]	BeginService =  46.21	CurrentTime = 47 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61 , 64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 64 	TimeWindow = [ 51 , 56 ]	BeginService =  53.66	CurrentTime = 55 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64 , 68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 68 	TimeWindow = [ 59 , 63 ]	BeginService =  61.18	CurrentTime = 62 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68 , 66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 66 	TimeWindow = [ 67 , 71 ]	BeginService =  68.90	CurrentTime = 70 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68*,*66 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-0").get(lineCount++)).isEqualTo("Salesman = 0 	Parcel = 69 	TimeWindow = [ 74 , 78 ]	BeginService =  76.34	CurrentTime = 77 	Route = *67*,*65*,*63*,*62*,*74*,*72*,*61*,*64*,*68*,*66*,*69 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 43 	TimeWindow = [  1 ,  6 ]	BeginService =   1.34	CurrentTime = 2  	Route = *43 , 42 , 46 , 48 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 42 	TimeWindow = [  6 , 12 ]	BeginService =   8.86	CurrentTime = 10 	Route = *43*,*42 , 41 , 46 , 48 , 52 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 41 	TimeWindow = [ 13 , 19 ]	BeginService =  16.31	CurrentTime = 17 	Route = *43*,*42*,*41 , 40 , 44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 40 	TimeWindow = [ 21 , 26 ]	BeginService =  23.75	CurrentTime = 25 	Route = *43*,*42*,*41*,*40 , 44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 44 	TimeWindow = [ 29 , 33 ]	BeginService =  31.27	CurrentTime = 32 	Route = *43*,*42*,*41*,*40*,*44 , 46 , 48 , 52 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 46 	TimeWindow = [ 36 , 41 ]	BeginService =  38.78	CurrentTime = 40 	Route = *43*,*42*,*41*,*40*,*44*,*46 , 45 , 48 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 45 	TimeWindow = [ 44 , 49 ]	BeginService =  46.23	CurrentTime = 47 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45 , 48 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 48 	TimeWindow = [ 51 , 56 ]	BeginService =  53.67	CurrentTime = 55 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48 , 51 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 51 	TimeWindow = [ 59 , 64 ]	BeginService =  61.20	CurrentTime = 62 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51 , 50 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 50 	TimeWindow = [ 66 , 71 ]	BeginService =  68.66	CurrentTime = 70 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50 , 52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 52 	TimeWindow = [ 74 , 78 ]	BeginService =  76.20	CurrentTime = 77 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52 , 49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 49 	TimeWindow = [ 81 , 86 ]	BeginService =  83.72	CurrentTime = 85 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52*,*49 , 47 ");
        assertThat(salesmenRoutes.get("Salesman-1").get(lineCount++)).isEqualTo("Salesman = 1 	Parcel = 47 	TimeWindow = [ 85 , 91 ]	BeginService =  91.16	CurrentTime = 92 	Route = *43*,*42*,*41*,*40*,*44*,*46*,*45*,*48*,*51*,*50*,*52*,*49*,*47 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 5  	TimeWindow = [  1 ,  5 ]	BeginService =   1.22	CurrentTime = 2  	Route = * 5 ,  3 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 3  	TimeWindow = [  5 , 12 ]	BeginService =   8.59	CurrentTime = 10 	Route = * 5*,* 3 ,  7 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 7  	TimeWindow = [ 14 , 18 ]	BeginService =  16.03	CurrentTime = 17 	Route = * 5*,* 3*,* 7 ,  8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 8  	TimeWindow = [ 21 , 26 ]	BeginService =  23.54	CurrentTime = 25 	Route = * 5*,* 3*,* 7*,* 8 , 10 , 11 ,  9 ,  6 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 10 	TimeWindow = [ 29 , 33 ]	BeginService =  31.11	CurrentTime = 32 	Route = * 5*,* 3*,* 7*,* 8*,*10 , 11 ,  9 ,  6 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 11 	TimeWindow = [ 36 , 41 ]	BeginService =  38.64	CurrentTime = 40 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11 ,  9 ,  6 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 9  	TimeWindow = [ 43 , 49 ]	BeginService =  46.18	CurrentTime = 47 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9 ,  6 ,  4 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 6  	TimeWindow = [ 50 , 57 ]	BeginService =  53.64	CurrentTime = 55 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6 ,  4 ,  2 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 4  	TimeWindow = [ 59 , 63 ]	BeginService =  61.10	CurrentTime = 62 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4 ,  2 ,  1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 2  	TimeWindow = [ 67 , 70 ]	BeginService =  68.67	CurrentTime = 70 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2 ,  1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 1  	TimeWindow = [ 74 , 78 ]	BeginService =  76.12	CurrentTime = 77 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2*,* 1 , 75 ");
        assertThat(salesmenRoutes.get("Salesman-2").get(lineCount++)).isEqualTo("Salesman = 2 	Parcel = 75 	TimeWindow = [ 81 , 86 ]	BeginService =  83.64	CurrentTime = 85 	Route = * 5*,* 3*,* 7*,* 8*,*10*,*11*,* 9*,* 6*,* 4*,* 2*,* 1*,*75 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 20 	TimeWindow = [  1 ,  6 ]	BeginService =   0.81	CurrentTime = 2  	Route = *20 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 24 	TimeWindow = [  5 , 12 ]	BeginService =   8.50	CurrentTime = 9  	Route = *20*,*24 , 25 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 25 	TimeWindow = [ 14 , 18 ]	BeginService =  15.94	CurrentTime = 17 	Route = *20*,*24*,*25 , 27 , 29 , 28 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 27 	TimeWindow = [ 21 , 26 ]	BeginService =  23.38	CurrentTime = 24 	Route = *20*,*24*,*25*,*27 , 29 , 30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 29 	TimeWindow = [ 29 , 33 ]	BeginService =  30.96	CurrentTime = 32 	Route = *20*,*24*,*25*,*27*,*29 , 30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 30 	TimeWindow = [ 36 , 41 ]	BeginService =  38.64	CurrentTime = 40 	Route = *20*,*24*,*25*,*27*,*29*,*30 , 28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 28 	TimeWindow = [ 44 , 48 ]	BeginService =  46.17	CurrentTime = 47 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28 , 26 , 23 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 26 	TimeWindow = [ 50 , 57 ]	BeginService =  53.61	CurrentTime = 55 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26 , 23 , 22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 23 	TimeWindow = [ 59 , 63 ]	BeginService =  61.13	CurrentTime = 62 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23 , 22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 22 	TimeWindow = [ 66 , 71 ]	BeginService =  68.66	CurrentTime = 70 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23*,*22 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-3").get(lineCount++)).isEqualTo("Salesman = 3 	Parcel = 21 	TimeWindow = [ 74 , 78 ]	BeginService =  76.10	CurrentTime = 77 	Route = *20*,*24*,*25*,*27*,*29*,*30*,*28*,*26*,*23*,*22*,*21 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 57 	TimeWindow = [  3 ,  7 ]	BeginService =   2.83	CurrentTime = 4  	Route = *57 , 55 , 54 , 56 , 58 , 60 , 59 , 68 , 69 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 55 	TimeWindow = [  8 , 13 ]	BeginService =  10.28	CurrentTime = 11 	Route = *57*,*55 , 54 , 53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 54 	TimeWindow = [ 15 , 21 ]	BeginService =  17.96	CurrentTime = 19 	Route = *57*,*55*,*54 , 53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 53 	TimeWindow = [ 23 , 28 ]	BeginService =  25.68	CurrentTime = 27 	Route = *57*,*55*,*54*,*53 , 56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 56 	TimeWindow = [ 31 , 35 ]	BeginService =  33.28	CurrentTime = 34 	Route = *57*,*55*,*54*,*53*,*56 , 58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 58 	TimeWindow = [ 38 , 43 ]	BeginService =  40.73	CurrentTime = 42 	Route = *57*,*55*,*54*,*53*,*56*,*58 , 60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 60 	TimeWindow = [ 45 , 51 ]	BeginService =  48.25	CurrentTime = 49 	Route = *57*,*55*,*54*,*53*,*56*,*58*,*60 , 59 ");
        assertThat(salesmenRoutes.get("Salesman-4").get(lineCount++)).isEqualTo("Salesman = 4 	Parcel = 59 	TimeWindow = [ 53 , 60 ]	BeginService =  56.38	CurrentTime = 57 	Route = *57*,*55*,*54*,*53*,*56*,*58*,*60*,*59 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 32 	TimeWindow = [  3 ,  8 ]	BeginService =   2.56	CurrentTime = 4  	Route = *32 , 31 , 35 , 38 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 33 	TimeWindow = [  7 , 13 ]	BeginService =  10.00	CurrentTime = 11 	Route = *32*,*33 , 31 , 35 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 31 	TimeWindow = [ 16 , 19 ]	BeginService =  17.72	CurrentTime = 19 	Route = *32*,*33*,*31 , 35 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 35 	TimeWindow = [ 23 , 28 ]	BeginService =  25.41	CurrentTime = 26 	Route = *32*,*33*,*31*,*35 , 37 , 38 , 39 , 36 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 37 	TimeWindow = [ 31 , 35 ]	BeginService =  33.16	CurrentTime = 34 	Route = *32*,*33*,*31*,*35*,*37 , 38 , 39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 38 	TimeWindow = [ 39 , 42 ]	BeginService =  40.60	CurrentTime = 42 	Route = *32*,*33*,*31*,*35*,*37*,*38 , 39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 39 	TimeWindow = [ 46 , 50 ]	BeginService =  48.29	CurrentTime = 49 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39 , 36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 36 	TimeWindow = [ 54 , 58 ]	BeginService =  55.97	CurrentTime = 57 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39*,*36 , 34 ");
        assertThat(salesmenRoutes.get("Salesman-5").get(lineCount++)).isEqualTo("Salesman = 5 	Parcel = 34 	TimeWindow = [ 61 , 66 ]	BeginService =  63.50	CurrentTime = 64 	Route = *32*,*33*,*31*,*35*,*37*,*38*,*39*,*36*,*34 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 13 	TimeWindow = [  2 ,  7 ]	BeginService =   2.49	CurrentTime = 3  	Route = *13 , 18 , 15 , 16 , 14 , 26 , 21 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 17 	TimeWindow = [  8 , 12 ]	BeginService =  10.10	CurrentTime = 11 	Route = *13*,*17 , 18 , 19 , 15 , 16 , 14 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 18 	TimeWindow = [ 14 , 21 ]	BeginService =  17.62	CurrentTime = 19 	Route = *13*,*17*,*18 , 19 , 15 , 16 , 14 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 19 	TimeWindow = [ 22 , 28 ]	BeginService =  25.31	CurrentTime = 26 	Route = *13*,*17*,*18*,*19 , 15 , 16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 15 	TimeWindow = [ 31 , 35 ]	BeginService =  32.99	CurrentTime = 34 	Route = *13*,*17*,*18*,*19*,*15 , 16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 16 	TimeWindow = [ 38 , 43 ]	BeginService =  40.68	CurrentTime = 42 	Route = *13*,*17*,*18*,*19*,*15*,*16 , 14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 14 	TimeWindow = [ 46 , 50 ]	BeginService =  48.12	CurrentTime = 49 	Route = *13*,*17*,*18*,*19*,*15*,*16*,*14 , 12 ");
        assertThat(salesmenRoutes.get("Salesman-6").get(lineCount++)).isEqualTo("Salesman = 6 	Parcel = 12 	TimeWindow = [ 53 , 58 ]	BeginService =  55.65	CurrentTime = 57 	Route = *13*,*17*,*18*,*19*,*15*,*16*,*14*,*12 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 81 	TimeWindow = [  4 , 10 ]	BeginService =   3.84	CurrentTime = 5  	Route = *81 , 76 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 78 	TimeWindow = [  9 , 14 ]	BeginService =  11.36	CurrentTime = 12 	Route = *81*,*78 , 76 , 71 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 76 	TimeWindow = [ 16 , 21 ]	BeginService =  18.81	CurrentTime = 20 	Route = *81*,*78*,*76 , 71 , 70 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 71 	TimeWindow = [ 24 , 29 ]	BeginService =  26.49	CurrentTime = 27 	Route = *81*,*78*,*76*,*71 , 70 , 73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 70 	TimeWindow = [ 31 , 37 ]	BeginService =  34.18	CurrentTime = 35 	Route = *81*,*78*,*76*,*71*,*70 , 73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 73 	TimeWindow = [ 39 , 45 ]	BeginService =  41.70	CurrentTime = 43 	Route = *81*,*78*,*76*,*71*,*70*,*73 , 77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 77 	TimeWindow = [ 46 , 52 ]	BeginService =  49.31	CurrentTime = 50 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77 , 79 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 79 	TimeWindow = [ 54 , 59 ]	BeginService =  56.67	CurrentTime = 58 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77*,*79 , 80 ");
        assertThat(salesmenRoutes.get("Salesman-7").get(lineCount++)).isEqualTo("Salesman = 7 	Parcel = 80 	TimeWindow = [ 62 , 66 ]	BeginService =  64.39	CurrentTime = 65 	Route = *81*,*78*,*76*,*71*,*70*,*73*,*77*,*79*,*80 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 90 	TimeWindow = [  2 ,  7 ]	BeginService =   1.67	CurrentTime = 3  	Route = *90 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 87 	TimeWindow = [  7 , 12 ]	BeginService =   9.35	CurrentTime = 10 	Route = *90*,*87 , 83 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 86 	TimeWindow = [ 14 , 19 ]	BeginService =  16.72	CurrentTime = 18 	Route = *90*,*87*,*86 , 83 , 82 , 84 , 85 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 83 	TimeWindow = [ 21 , 27 ]	BeginService =  24.48	CurrentTime = 25 	Route = *90*,*87*,*86*,*83 , 82 , 84 , 85 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 82 	TimeWindow = [ 30 , 34 ]	BeginService =  32.01	CurrentTime = 33 	Route = *90*,*87*,*86*,*83*,*82 , 84 , 85 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 84 	TimeWindow = [ 37 , 42 ]	BeginService =  39.76	CurrentTime = 41 	Route = *90*,*87*,*86*,*83*,*82*,*84 , 85 , 88 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 85 	TimeWindow = [ 45 , 50 ]	BeginService =  47.27	CurrentTime = 48 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85 , 88 , 89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 88 	TimeWindow = [ 52 , 57 ]	BeginService =  54.80	CurrentTime = 56 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88 , 89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 89 	TimeWindow = [ 60 , 65 ]	BeginService =  62.31	CurrentTime = 63 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88*,*89 , 91 ");
        assertThat(salesmenRoutes.get("Salesman-8").get(lineCount++)).isEqualTo("Salesman = 8 	Parcel = 91 	TimeWindow = [ 68 , 72 ]	BeginService =  69.88	CurrentTime = 71 	Route = *90*,*87*,*86*,*83*,*82*,*84*,*85*,*88*,*89*,*91 ");
        lineCount = 0;
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 98 	TimeWindow = [  2 ,  7 ]	BeginService =   2.49	CurrentTime = 3  	Route = *98 , 96 , 94 , 92 , 97 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 96 	TimeWindow = [  8 , 13 ]	BeginService =  10.21	CurrentTime = 11 	Route = *98*,*96 , 94 , 92 , 97 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 95 	TimeWindow = [ 16 , 19 ]	BeginService =  17.65	CurrentTime = 19 	Route = *98*,*96*,*95 , 94 , 92 , 97 , 100 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 94 	TimeWindow = [ 23 , 27 ]	BeginService =  25.23	CurrentTime = 26 	Route = *98*,*96*,*95*,*94 , 92 , 93 , 97 , 100 ,  1 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 92 	TimeWindow = [ 30 , 36 ]	BeginService =  32.80	CurrentTime = 34 	Route = *98*,*96*,*95*,*94*,*92 , 93 , 97 , 100 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 93 	TimeWindow = [ 38 , 42 ]	BeginService =  40.24	CurrentTime = 41 	Route = *98*,*96*,*95*,*94*,*92*,*93 , 97 , 100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 97 	TimeWindow = [ 45 , 50 ]	BeginService =  47.93	CurrentTime = 49 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97 , 100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 100	TimeWindow = [ 52 , 59 ]	BeginService =  55.62	CurrentTime = 57 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97*,*100 , 99 ");
        assertThat(salesmenRoutes.get("Salesman-9").get(lineCount++)).isEqualTo("Salesman = 9 	Parcel = 99 	TimeWindow = [ 60 , 66 ]	BeginService =  63.30	CurrentTime = 64 	Route = *98*,*96*,*95*,*94*,*92*,*93*,*97*,*100*,*99 ");

        assertThat(statisticsDTO.totalDistance).isEqualTo(5770.962375615753);
        assertThat(statisticsDTO.totalTravelTime).isEqualTo(0.0);// Light speed
        assertThat(statisticsDTO.totalPickups).isEqualTo(100);
        assertThat(statisticsDTO.totalDeliveries).isEqualTo(100);
        assertThat(statisticsDTO.totalParcels).isEqualTo(100);
        assertThat(statisticsDTO.acceptedParcels).isEqualTo(100);
        assertThat(statisticsDTO.pickupTardiness).isEqualTo(0);
        assertThat(statisticsDTO.deliveryTardiness).isEqualTo(441); // The simulater is not synchronized with the algorithm, for while we are ignoring this
        assertThat(statisticsDTO.simulationTime).isEqualTo(99);
        assertThat(statisticsDTO.vehiclesAtDepot).isEqualTo(25);
        assertThat(statisticsDTO.totalVehicles).isEqualTo(25);
        assertThat(statisticsDTO.movedVehicles).isEqualTo(10);
    }
}
