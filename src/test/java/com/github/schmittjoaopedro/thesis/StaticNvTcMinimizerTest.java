package com.github.schmittjoaopedro.thesis;

import com.github.schmittjoaopedro.vrp.thesis.Solver;
import com.github.schmittjoaopedro.vrp.thesis.problem.Instance;
import com.github.schmittjoaopedro.vrp.thesis.problem.Reader;
import com.github.schmittjoaopedro.vrp.thesis.problem.Solution;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

import java.nio.file.Paths;
import java.util.Random;

import static org.assertj.core.api.Java6Assertions.assertThat;

public class StaticNvTcMinimizerTest {

    private static int maxIterations = 25000;

    private static final String pdptw200Directory;

    static {
        pdptw200Directory = Paths.get(StaticNvMinimizerTest.class.getClassLoader().getResource("pdp_200").getFile().substring(1)).toString();
    }

    @Test
    public void minimizeNvAndTc_lc1_2_3_Test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(pdptw200Directory, "lc1_2_3.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Initial solution = [F = true, NV = 20, TC = 4385.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 20, TC = 4377.03] at iteration 1");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 20, TC = 4224.21] at iteration 3");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 20, TC = 4119.91] at iteration 4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 20, TC = 3624.44] at iteration 5");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 20, TC = 3408.08] at iteration 6");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 4054.02] at iteration 7");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3933.10] at iteration 9");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3893.80] at iteration 10");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3600.28] at iteration 12");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3598.64] at iteration 13");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3513.42] at iteration 15");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3503.45] at iteration 16");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 19, TC = 3431.51] at iteration 19");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 3255.51] at iteration 20");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 3101.98] at iteration 29");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 3099.43] at iteration 30");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 3081.00] at iteration 40");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2971.74] at iteration 59");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2969.54] at iteration 61");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2903.86] at iteration 62");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2810.44] at iteration 78");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2803.77] at iteration 79");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2781.31] at iteration 86");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 2780.10] at iteration 87");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3557.25] at iteration 155");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3555.44] at iteration 194");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3526.97] at iteration 196");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3424.35] at iteration 209");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3421.73] at iteration 237");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3418.48] at iteration 239");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3331.26] at iteration 265");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3271.54] at iteration 273");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3271.50] at iteration 274");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3262.85] at iteration 600");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3191.23] at iteration 625");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3167.29] at iteration 627");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3159.60] at iteration 630");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3158.46] at iteration 634");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3142.01] at iteration 637");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3140.99] at iteration 4288");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3138.45] at iteration 12120");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3138.23] at iteration 12442");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3138.14] at iteration 12466");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3136.41] at iteration 12479");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3135.10] at iteration 16873");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 3134.19] at iteration 24571");

        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.totalCost).isEqualTo(3134.1891730841385);
        assertThat(solutionBest.tours.size()).isEqualTo(17);
        // Check tours
        counter = 0;
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 57 118 83 143 176 36 33 121 165 188 202 108 10 2 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 114 159 38 204 150 22 151 16 140 187 142 111 63 56 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 45 178 173 154 24 61 100 64 27 149 68 76 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 62 120 44 192 196 97 96 130 28 19 146 131 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 101 144 119 166 35 126 71 9 1 39 107 78 201 17 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 170 134 50 156 112 168 79 29 87 42 123 133 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 175 203 5 106 167 43 13 86 136 124 200 155 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 148 103 206 197 69 141 65 51 174 162 12 109 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 21 23 182 75 163 194 145 195 52 92 198 74 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 32 147 160 47 205 66 70 171 94 115 189 91 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 113 73 129 11 6 122 139 34 95 158 190 67 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 48 26 152 40 153 14 169 105 15 89 59 30 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 60 82 180 84 191 125 4 72 193 46 128 90 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 93 55 135 58 184 37 138 99 53 102 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 161 104 18 54 185 132 7 181 117 49 81 137 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 20 41 85 80 31 25 172 77 110 116 164 179 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 177 3 88 8 186 127 98 157 199 183 0");
        // Check requests
        counter = 0;
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("59 90 84 42 29 97 7");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("19 72 13 70 77 56 81");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("88 92 14 32 79 24");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("61 99 47 33 65 75");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("60 73 49 18 0 20 39");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("27 40 54 86 67 23");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("85 89 62 44 3 53");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("34 101 50 28 76 71");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("100 37 74 12 94 102");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("82 25 35 57 17 87");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("80 36 46 4 55 8");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("26 15 21 78 9 52");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("93 41 31 63 2 98");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("48 68 30 45 69");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("51 95 10 5 66 83");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("43 16 22 11 38 58");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("96 6 91 1 64");
    }

    @Test
    public void minimizeNvAndTc_lr1_2_3_Test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(pdptw200Directory, "lr1_2_3.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Initial solution = [F = true, NV = 19, TC = 5436.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 18, TC = 5079.29] at iteration 1");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4618.28] at iteration 2");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4410.36] at iteration 3");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4407.26] at iteration 4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4400.49] at iteration 5");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4397.14] at iteration 6");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4239.85] at iteration 7");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4219.58] at iteration 8");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 4471.39] at iteration 9");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 4442.41] at iteration 10");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 4414.64] at iteration 13");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 3949.40] at iteration 15");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 3942.90] at iteration 16");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 5029.22] at iteration 34");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4903.48] at iteration 38");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4800.68] at iteration 39");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4769.99] at iteration 40");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4750.37] at iteration 41");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4604.47] at iteration 42");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4575.27] at iteration 43");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4568.73] at iteration 46");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4549.83] at iteration 47");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4510.16] at iteration 49");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4269.84] at iteration 56");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4268.71] at iteration 57");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4235.34] at iteration 62");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4222.92] at iteration 63");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4222.56] at iteration 65");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4217.15] at iteration 66");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4127.11] at iteration 78");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4110.29] at iteration 79");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4105.68] at iteration 85");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4102.87] at iteration 88");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4094.33] at iteration 99");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4091.50] at iteration 102");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4039.50] at iteration 111");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 4016.62] at iteration 112");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3988.63] at iteration 120");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3901.20] at iteration 198");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3860.48] at iteration 199");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3834.03] at iteration 248");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3771.85] at iteration 252");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3720.12] at iteration 253");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3693.79] at iteration 254");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3669.20] at iteration 3060");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3641.39] at iteration 7884");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3637.36] at iteration 7887");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3632.83] at iteration 7898");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3626.66] at iteration 7986");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3625.32] at iteration 7989");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3620.77] at iteration 7996");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3616.45] at iteration 7997");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3615.10] at iteration 8006");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3614.45] at iteration 18116");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3613.10] at iteration 18132");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3612.85] at iteration 18380");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3612.64] at iteration 18381");

        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.totalCost).isEqualTo(3612.639044272317);
        assertThat(solutionBest.tours.size()).isEqualTo(15);
        // Check tours
        counter = 0;
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 73 45 57 198 19 13 38 84 32 138 111 52 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 156 51 206 26 143 204 21 123 124 181 161 42 53 60 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 132 103 92 48 169 185 148 149 202 119 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 157 93 199 109 28 182 41 75 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 106 43 85 65 94 82 47 58 77 6 189 177 102 173 90 24 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 196 30 35 99 183 34 194 98 142 128 200 192 154 81 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 140 62 20 163 104 100 136 159 10 83 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 46 15 70 208 129 141 164 54 89 12 22 95 127 178 23 29 96 114 74 174 108 97 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 87 145 121 17 2 8 122 205 76 118 152 88 40 112 59 105 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 146 16 115 162 171 170 187 78 139 168 126 113 31 1 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 63 44 3 117 86 131 66 50 158 79 172 18 14 197 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 4 56 188 153 167 166 33 193 186 144 203 179 190 135 147 107 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 55 67 150 36 137 68 25 116 5 61 49 180 195 27 133 64 80 91 201 7 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 155 120 160 130 11 176 165 69 134 101 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 175 72 184 71 191 151 125 110 37 39 207 9 0");
        // Check requests
        counter = 0;
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("3 7 22 42 102 38");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("95 27 82 72 60 8 85");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("52 67 76 77 25");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("83 103 49 96");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("51 41 24 47 20 33 43 54");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("100 63 12 101 15 97 16");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("70 31 87 53 50");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("71 64 28 35 2 11 23 4 9 56 46");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("74 58 44 6 59 55 45 79");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("5 75 13 90 39 86 62");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("21 91 40 32 66 0 84");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("30 73 89 99 1 80 14 98");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("29 48 34 10 26 78 94 17 69 68");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("65 88 57 81 93");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("18 61 19 36 37 92");
    }

    @Test
    public void minimizeNvAndTc_lrc1_2_3_Test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(pdptw200Directory, "lrc1_2_3.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Initial solution = [F = true, NV = 17, TC = 4663.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4481.25] at iteration 1");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4198.95] at iteration 2");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 17, TC = 4193.58] at iteration 3");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 4156.59] at iteration 4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 4113.47] at iteration 6");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 3959.17] at iteration 7");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 16, TC = 3828.06] at iteration 8");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3824.39] at iteration 9");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 15, TC = 3769.56] at iteration 10");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3780.33] at iteration 11");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3757.15] at iteration 12");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3673.41] at iteration 13");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3672.82] at iteration 14");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3568.02] at iteration 15");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3546.37] at iteration 17");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 14, TC = 3546.26] at iteration 19");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3582.77] at iteration 21");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3579.98] at iteration 23");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3525.27] at iteration 24");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3521.88] at iteration 25");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3512.36] at iteration 26");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3500.20] at iteration 41");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3461.09] at iteration 42");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3460.05] at iteration 44");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3458.20] at iteration 69");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3453.11] at iteration 100");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3452.37] at iteration 101");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3449.86] at iteration 102");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3448.98] at iteration 103");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3436.87] at iteration 201");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3436.82] at iteration 281");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3427.23] at iteration 389");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3417.89] at iteration 471");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3415.27] at iteration 773");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3412.26] at iteration 775");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3394.07] at iteration 776");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3385.93] at iteration 779");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3380.37] at iteration 785");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3374.46] at iteration 798");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3370.06] at iteration 812");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3363.74] at iteration 832");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3354.62] at iteration 841");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3352.57] at iteration 1426");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3339.23] at iteration 1427");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3337.00] at iteration 1433");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3334.96] at iteration 1443");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3319.04] at iteration 1452");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3316.22] at iteration 1453");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3315.53] at iteration 1853");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3301.76] at iteration 1898");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3301.40] at iteration 2943");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3295.65] at iteration 2945");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3289.55] at iteration 6971");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3288.14] at iteration 8505");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3276.81] at iteration 8552");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3275.22] at iteration 8566");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3271.47] at iteration 8567");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3267.99] at iteration 8576");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3265.86] at iteration 8579");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3262.22] at iteration 8582");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3259.66] at iteration 10474");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3258.50] at iteration 10477");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3258.34] at iteration 11590");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3245.24] at iteration 12266");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3240.00] at iteration 12269");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3237.85] at iteration 12273");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3235.62] at iteration 12367");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3235.01] at iteration 12369");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3232.72] at iteration 12379");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3231.89] at iteration 12382");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3231.68] at iteration 12469");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3231.60] at iteration 12485");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3231.53] at iteration 12505");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3231.38] at iteration 12782");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3228.48] at iteration 12783");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3174.33] at iteration 13291");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3173.99] at iteration 13378");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3173.41] at iteration 13391");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3173.21] at iteration 13588");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3172.88] at iteration 13589");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3172.79] at iteration 13601");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3168.19] at iteration 13928");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3167.25] at iteration 13935");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3165.38] at iteration 13936");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3164.47] at iteration 13939");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3162.80] at iteration 13942");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3162.46] at iteration 14051");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3162.38] at iteration 14052");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV = 13, TC = 3162.09] at iteration 14225");

        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.totalCost).isEqualTo(3162.092772649836);
        assertThat(solutionBest.tours.size()).isEqualTo(13);
        // Check tours
        counter = 0;
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 142 153 47 48 43 180 3 136 203 124 36 178 110 44 90 116 205 148 83 103 200 39 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 152 169 167 27 190 198 22 126 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 4 173 165 45 108 38 32 23 52 86 117 114 207 85 50 160 74 31 106 55 154 209 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 54 168 53 151 99 125 189 101 192 56 33 66 89 139 210 143 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 140 100 208 37 12 204 59 9 188 29 21 107 129 81 194 158 150 187 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 92 182 57 133 147 40 16 98 119 161 72 102 183 15 179 68 61 70 41 195 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 131 156 7 18 206 91 51 111 95 145 80 184 196 24 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 88 155 87 69 176 113 191 58 134 17 30 201 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 28 6 14 132 171 130 79 73 93 146 170 19 193 42 149 63 162 78 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 172 197 35 164 104 25 10 77 122 181 141 120 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 82 166 128 65 94 109 112 157 177 121 115 144 11 71 105 97 64 67 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 174 84 199 127 118 137 123 13 8 75 60 202 1 34 0");
        assertThat(StringUtils.join(solutionBest.tours.get(counter++), " ")).isEqualTo("0 49 163 96 5 62 26 159 46 138 186 135 20 76 185 2 175 0");
        // Check requests
        counter = 0;
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("79 25 58 75 104 24 22 64 0 71 77");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("14 88 78 102");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("80 23 17 42 20 28 91 59 85 1 56");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("87 65 73 44 51 29 100 30");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("82 52 7 13 74 5 32 39 19");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("46 21 53 96 35 95 50 61 9 31");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("97 3 47 27 45 68 10");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("99 16 81 55 93 43");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("76 89 38 11 8 69 67 15 37");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("18 101 6 63 84 90");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("86 66 57 94 54 62 36 40 49");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("60 92 4 72 103 41 33");
        assertThat(StringUtils.join(solutionBest.requestIds.get(counter++), " ")).isEqualTo("48 34 83 2 26 70 98 12");
    }
}
