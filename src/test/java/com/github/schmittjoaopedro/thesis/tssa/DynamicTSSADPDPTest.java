package com.github.schmittjoaopedro.thesis.tssa;

import com.github.schmittjoaopedro.vrp.thesis.algorithms.stop.IterationCriteria;
import com.github.schmittjoaopedro.vrp.thesis.algorithms.tabu_sa.TABU_SA_DPDP;
import com.github.schmittjoaopedro.vrp.thesis.problem.Instance;
import com.github.schmittjoaopedro.vrp.thesis.problem.Reader;
import com.github.schmittjoaopedro.vrp.thesis.problem.Solution;
import org.junit.Test;

import java.nio.file.Paths;
import java.util.Random;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

public class DynamicTSSADPDPTest {

    private static int maxIterations = 25000;

    private static final String dpdptw100Directory;

    static {
        dpdptw100Directory = Paths.get(DynamicTSSADPDPTest.class.getClassLoader().getResource("dpdptw_100").getFile().substring(1)).toString();
    }

    @Test
    public void dpdptw_lc103_a_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.1.txt").toFile());
        TABU_SA_DPDP solver = new TABU_SA_DPDP(instance, new Random(1), IterationCriteria.of(5000));
        solver.setPrint(true);
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.totalCost).isEqualTo(1156.0081946752466);
        assertThat(solutionBest.tours.size()).isEqualTo(9);
        assertThat(solutionBest.totalScheduleDuration).isEqualTo(10387.91729862018);
        assertThat(solutionBest.totalWaitingTime).isEqualTo(231.9091039449334);
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =       .00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [0, 1]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    126.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [2]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    193.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [3]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    273.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4, 5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    341.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6, 7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    459.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8, 9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    499.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10, 11, 12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    563.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    578.25] at scaled time 0.0174");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13, 14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    619.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15, 16, 17, 18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    791.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    717.60] at scaled time 0.0248");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    732.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20, 21, 22, 23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    850.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    706.56] at scaled time 0.032");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    714.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    788.73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    775.57] at scaled time 0.0386");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26, 27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    785.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    786.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    787.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    792.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    838.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32, 33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    883.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    920.51] at scaled time 0.0548");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    962.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    991.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    998.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1001.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1004.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1054.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1019.40] at scaled time 0.0782");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1030.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1056.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1091.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44, 45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1143.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1095.00] at scaled time 0.0814");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46, 47, 48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1142.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1159.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1153.41] at scaled time 0.083");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1152.65] at scaled time 0.0834");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1148.10] at scaled time 0.087");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1150.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1158.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1156.73] at scaled time 0.0902");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1156.01] at scaled time 0.0938");
    }

    @Test
    public void dpdptw_lc103_a_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.5.txt").toFile());
        TABU_SA_DPDP solver = new TABU_SA_DPDP(instance, new Random(1));
        solver.setPrint(true);
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.tours.size()).isEqualTo(9);
        assertThat(solutionBest.totalCost).isEqualTo(1038.3507683136875);
        assertThat(solutionBest.totalScheduleDuration).isEqualTo(10145.64237054699);
        assertThat(solutionBest.totalWaitingTime).isEqualTo(107.2916022333039);
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =       .00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [0]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   1, TC =     26.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [1]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    126.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [2]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    193.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [3]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    273.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    283.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    341.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    415.32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    459.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    468.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    499.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    518.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    557.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    564.98] at scaled time 0.0862");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    608.81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    578.25] at scaled time 0.0878");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13, 14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    619.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15, 16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    626.59]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    702.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    622.78] at scaled time 0.1234");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    708.91] at scaled time 0.1236");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    797.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    713.37] at scaled time 0.1242");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    728.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    744.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21, 22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    866.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    692.56] at scaled time 0.159");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =   1078.22] at scaled time 0.1594");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    915.32] at scaled time 0.1602");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    929.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    863.93] at scaled time 0.161");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    926.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    714.15] at scaled time 0.1622");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    788.73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    775.57] at scaled time 0.1922");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26, 27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    785.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    786.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    787.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    792.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    838.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    882.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    887.96] at scaled time 0.2716");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    889.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    889.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    918.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    926.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    906.91] at scaled time 0.323");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    909.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    912.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    961.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    972.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    992.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    995.90]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1019.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1008.20] at scaled time 0.405");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1028.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1025.78] at scaled time 0.4066");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1029.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1033.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1033.71]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1035.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1038.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1038.35]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.1.txt").toFile());
        TABU_SA_DPDP solver = new TABU_SA_DPDP(instance, new Random(1));
        solver.setPrint(true);
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.tours.size()).isEqualTo(9);
        assertThat(solutionBest.totalCost).isEqualTo(1035.3499342457626);
        assertThat(solutionBest.totalScheduleDuration).isEqualTo(10272.375221843682);
        assertThat(solutionBest.totalWaitingTime).isEqualTo(237.0252875979187);
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    218.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   2, TC =    192.62] at scaled time 4.0E-4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    218.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   2, TC =    219.05] at scaled time 0.0208");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    319.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   3, TC =    259.82] at scaled time 0.024");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    339.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   4, TC =    317.82] at scaled time 0.0498");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    365.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   4, TC =    349.72] at scaled time 0.0928");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    407.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    481.25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   6, TC =    476.94] at scaled time 0.0992");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    521.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    591.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    538.66] at scaled time 0.1678");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    569.30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    626.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    602.99] at scaled time 0.1712");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    641.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    631.47] at scaled time 0.1728");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    675.30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    628.82] at scaled time 0.175");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    680.56] at scaled time 0.176");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    690.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17, 18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    784.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    698.86] at scaled time 0.2432");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    775.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    741.69] at scaled time 0.2472");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    728.33] at scaled time 0.2474");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    816.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    757.12] at scaled time 0.248");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    750.41] at scaled time 0.2516");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    743.04] at scaled time 0.2518");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    749.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    830.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    689.61] at scaled time 0.3176");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    697.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    711.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    868.77] at scaled time 0.322");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    930.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    718.99] at scaled time 0.325");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    793.57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    780.41] at scaled time 0.384");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    785.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    786.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    787.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    792.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    838.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    882.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    933.08] at scaled time 0.5434");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    874.37] at scaled time 0.5452");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    945.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    928.33] at scaled time 0.5498");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    928.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    923.00] at scaled time 0.6052");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    925.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    932.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    948.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    940.45] at scaled time 0.7166");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    943.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    969.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1002.34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1022.49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1057.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1029.36] at scaled time 0.8056");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1053.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1041.66] at scaled time 0.8096");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1044.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1047.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1051.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1082.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1068.71] at scaled time 0.8256");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1027.28] at scaled time 0.8298");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1032.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1035.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1035.35]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.5.txt").toFile());
        TABU_SA_DPDP solver = new TABU_SA_DPDP(instance, new Random(1));
        solver.setPrint(true);
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.feasible).isTrue();
        assertThat(solutionBest.tours.size()).isEqualTo(10);
        assertThat(solutionBest.totalCost).isEqualTo(827.8646991698506);
        assertThat(solutionBest.totalScheduleDuration).isEqualTo(10058.030338059863);
        assertThat(solutionBest.totalWaitingTime).isEqualTo(230.16563889001253);
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =   1109.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    680.50] at scaled time 4.0E-4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   6, TC =    748.32] at scaled time 6.0E-4");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   6, TC =    740.46] at scaled time 0.0082");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    763.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    830.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    761.79] at scaled time 0.0278");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    705.64] at scaled time 0.0304");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    763.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    713.82] at scaled time 0.096");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    792.11] at scaled time 0.0992");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    791.21] at scaled time 0.0994");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    823.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    818.17] at scaled time 0.1686");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    788.65] at scaled time 0.1688");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    778.91] at scaled time 0.1786");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    778.33] at scaled time 0.1788");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    755.57] at scaled time 0.1794");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    804.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    753.18] at scaled time 0.2416");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    757.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    890.49] at scaled time 0.2446");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    978.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    843.63] at scaled time 0.2478");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    762.07] at scaled time 0.249");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    962.31] at scaled time 0.2578");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1048.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    769.19] at scaled time 0.3136");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    831.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    887.35] at scaled time 0.325");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    863.49] at scaled time 0.3554");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    862.61] at scaled time 0.36");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    864.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    876.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    876.75] at scaled time 0.4778");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    922.75]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    965.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =    810.04] at scaled time 0.5434");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    810.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    853.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =    811.96] at scaled time 0.5506");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    814.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    816.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    819.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    822.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    823.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    825.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    827.86]");
    }

}
