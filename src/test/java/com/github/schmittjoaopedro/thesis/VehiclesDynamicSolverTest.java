package com.github.schmittjoaopedro.thesis;

import com.github.schmittjoaopedro.vrp.thesis.Solver;
import com.github.schmittjoaopedro.vrp.thesis.problem.Instance;
import com.github.schmittjoaopedro.vrp.thesis.problem.Reader;
import com.github.schmittjoaopedro.vrp.thesis.problem.Solution;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

import java.nio.file.Paths;
import java.util.Random;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

public class VehiclesDynamicSolverTest {

    private static int maxIterations = 25000;

    private static final String dpdptw100Directory;

    private static final String dpdptw400Directory;

    static {
        dpdptw100Directory = Paths.get(VehiclesDynamicSolverTest.class.getClassLoader().getResource("dpdptw_100").getFile().substring(1)).toString();
        dpdptw400Directory = Paths.get(VehiclesDynamicSolverTest.class.getClassLoader().getResource("dpdptw_400").getFile().substring(1)).toString();
    }

    @Test
    public void dpdptw_lc103_a_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableLocalSearch();
        solver.enableVehicleControlCenter();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(931.723433670407);
        assertThat(solutionBest.tours.size()).isEqualTo(10);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [0, 1]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    126.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [2]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    193.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [3]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    273.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4, 5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    341.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6, 7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    459.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8, 9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    499.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10, 11, 12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    564.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13, 14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    605.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15, 16, 17, 18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    728.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    743.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20, 21, 22, 23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    774.49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    785.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    817.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26, 27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    827.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    828.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    829.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    835.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    848.79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32, 33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    850.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    850.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    853.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    860.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    862.92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    865.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    869.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    880.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    890.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    891.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44, 45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    910.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46, 47, 48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    918.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    928.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    931.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    931.72]");
    }

    @Test
    public void dpdptw_lc103_a_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.5.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1115.5701601286748);
        assertThat(solutionBest.tours.size()).isEqualTo(11);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [0]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   1, TC =     26.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [1]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    126.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [2]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    193.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [3]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    273.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    283.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    341.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    415.32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    459.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    468.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    499.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    519.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    558.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    564.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13, 14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    605.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15, 16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    663.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    674.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    728.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    743.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    786.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21, 22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    798.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    812.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    875.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    876.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26, 27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    887.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    892.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    894.36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    935.18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    948.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    949.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    979.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    979.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    981.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    989.34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    991.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1011.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1037.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1045.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1073.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   1068.62] at iteration 9954");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1072.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1077.46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1090.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1099.71]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1103.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1104.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1115.28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1115.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1115.57]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1479.2468474824448);
        assertThat(solutionBest.tours.size()).isEqualTo(15);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   2, TC =    192.62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    169.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    265.46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    344.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    355.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    412.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    486.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    531.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    540.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    571.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    662.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    700.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    744.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    754.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17, 18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =    892.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =    904.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =    992.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1002.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1016.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1026.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1100.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   1163.08]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   1163.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   1216.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1256.90]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1262.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1267.92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1281.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1286.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1324.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1324.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1328.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1336.44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1338.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1362.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1387.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1395.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1415.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1419.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1435.73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1454.98]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1458.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1462.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1462.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1474.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1479.16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1479.25]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.5.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1372.6170860876678);
        assertThat(solutionBest.tours.size()).isEqualTo(17);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    681.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    680.50] at iteration 1");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    689.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    757.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    729.16] at iteration 711");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    774.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =    773.89] at iteration 2388");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    806.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =    889.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =    940.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1028.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   1114.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1176.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1182.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1188.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1202.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1228.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1238.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1238.59]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1315.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1335.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1354.90]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1357.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1358.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1368.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1372.62]");
    }

    @Test
    public void dpdptw_lr1_4_8_q_0_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw400Directory, "LR1_4_8_q_0_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(13453.648044509102);
        assertThat(solutionBest.tours.size()).isEqualTo(27);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =   1692.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   5, TC =   1664.05] at iteration 1");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   5, TC =   1657.36] at iteration 2");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   5, TC =   1654.87] at iteration 3");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   5, TC =   1653.61] at iteration 7");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   5, TC =   1638.87] at iteration 119");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   2491.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   2465.58] at iteration 902");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   2424.31] at iteration 904");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   2408.63] at iteration 909");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   2406.66] at iteration 910");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   2403.83] at iteration 912");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35, 36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2655.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2645.73] at iteration 964");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2650.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2648.01] at iteration 996");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2647.06] at iteration 1109");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   2723.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39, 40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   2842.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   2962.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  13, TC =   2923.37] at iteration 1647");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  13, TC =   2915.64] at iteration 1695");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3073.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3108.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3139.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3195.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3227.75]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3309.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3314.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3355.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3433.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3517.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3538.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3615.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3691.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3703.00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3706.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3863.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3905.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [59, 60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4063.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [61, 62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4135.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4135.97] at iteration 6872");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   4226.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   4336.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4383.36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4395.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4408.00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4435.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4449.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4463.61]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [71]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4541.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4587.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4592.81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4643.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   4643.12] at iteration 9112");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [75, 76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4738.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4824.73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   4808.83] at iteration 9584");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   4805.80] at iteration 9585");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4853.30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   4966.34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5006.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5028.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5030.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5063.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5141.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   5139.56] at iteration 11702");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   5134.36] at iteration 11756");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   5132.37] at iteration 11773");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5142.59]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   5141.21] at iteration 11879");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5148.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5160.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5240.79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5390.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [90, 91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5513.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5697.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5710.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5795.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5910.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   5967.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6059.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [98]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6104.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6278.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   6275.09] at iteration 16223");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [100]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6406.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [101]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6477.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [102]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6526.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [103]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6545.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [104]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6647.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [105]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6729.28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [106]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6734.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [107]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6770.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [108]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6804.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [109]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6895.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [110]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6952.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [111]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   6964.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [112]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7043.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [113]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7122.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [114, 115]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7333.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [116]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7333.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [117, 118, 119]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7613.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [120]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7623.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [121]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7629.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [122]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7662.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [123]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7727.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [124]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   7793.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  18, TC =   7776.65] at iteration 18098");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [125, 126, 127]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8126.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [128]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8127.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [129, 130]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8239.59]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [131, 132]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8327.16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [133]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8334.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [134, 135, 136, 137]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8559.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   8558.63] at iteration 18345");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [138]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   8592.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [139, 140]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   8920.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   8919.60] at iteration 18417");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [141]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9070.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [142]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9251.10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [143]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9322.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   9313.26] at iteration 18540");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [144]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9397.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   9369.20] at iteration 18628");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [145]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9376.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [146]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   9380.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [147, 148]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  21, TC =   9722.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [149]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  21, TC =   9897.57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [150, 151]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  21, TC =   9941.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [152, 153]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  21, TC =  10077.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [154, 155, 156]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =  10403.81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [157]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =  10416.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [158]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =  10433.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [159]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =  10554.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [160, 161, 162]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  10832.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [163]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  10918.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [164]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  10994.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [165]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  11071.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [166]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  11110.18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [167, 168]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  11328.34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [169, 170, 171]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =  11466.49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [172]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11605.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [173]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11699.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [174]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11744.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [175, 176]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11843.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [177]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11976.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [178]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  11980.32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [179]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  12067.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [180]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  12087.28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [181]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =  12091.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [182, 183]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12279.08]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [184]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12282.57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [185, 186]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12453.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [187, 188, 189]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12559.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [190]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12567.44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [191, 192]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12655.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [193]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =  12746.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [194]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  12845.10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [195]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  12928.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [196]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  12933.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [197, 198]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13028.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [199, 200]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13178.08]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [201]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13200.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [202]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13200.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [203]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13282.62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [204]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13336.78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [205]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13406.02]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [206]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =  13409.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [207]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =  13453.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [208]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =  13453.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [209]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =  13453.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [210]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =  13453.65]");
    }
}
