package com.github.schmittjoaopedro.thesis;

import com.github.schmittjoaopedro.vrp.thesis.Solver;
import com.github.schmittjoaopedro.vrp.thesis.problem.Instance;
import com.github.schmittjoaopedro.vrp.thesis.problem.Reader;
import com.github.schmittjoaopedro.vrp.thesis.problem.Solution;
import org.junit.Test;

import java.nio.file.Paths;
import java.util.Random;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

public class VehiclesDynamicSolverTest {

    private static int maxIterations = 25000;

    private static final String dpdptw100Directory;

    private static final String dpdptw400Directory;

    private static final String dpdptw800Directory;

    static {
        dpdptw100Directory = Paths.get(VehiclesDynamicSolverTest.class.getClassLoader().getResource("dpdptw_100").getFile().substring(1)).toString();
        dpdptw400Directory = Paths.get(VehiclesDynamicSolverTest.class.getClassLoader().getResource("dpdptw_400").getFile().substring(1)).toString();
        dpdptw800Directory = Paths.get(VehiclesDynamicSolverTest.class.getClassLoader().getResource("dpdptw_800").getFile().substring(1)).toString();
    }

    @Test
    public void dpdptw_lc103_a_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(846.554652078846);
        assertThat(solutionBest.tours.size()).isEqualTo(10);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    792.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    795.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    799.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    800.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    810.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    811.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44, 45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    824.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46, 47, 48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    831.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    842.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    846.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    846.55]");
    }

    @Test
    public void dpdptw_lc103_a_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_a_0.5.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1317.3410228561859);
        assertThat(solutionBest.tours.size()).isEqualTo(10);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    459.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    468.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    499.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    519.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    558.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    572.70] at iteration 324");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    565.61] at iteration 344");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    564.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    578.88] at iteration 365");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13, 14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    620.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15, 16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    688.76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    699.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    739.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    799.01] at iteration 1275");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    789.74] at iteration 1280");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    804.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    820.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21, 22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    902.32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    768.93] at iteration 2154");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    782.93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    794.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    846.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    920.74] at iteration 2974");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26, 27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    930.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    856.71]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    976.29] at iteration 3176");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    975.48] at iteration 3177");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1006.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1011.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =   1011.10] at iteration 4165");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1040.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1040.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1092.19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1092.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1094.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1102.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1104.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1124.61]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1174.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1207.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1227.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1234.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1269.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1305.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1291.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1299.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1300.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1311.32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1311.52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1317.34]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1648.631894730265);
        assertThat(solutionBest.tours.size()).isEqualTo(15);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    317.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    357.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   4, TC =    349.72] at iteration 486");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    407.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    476.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    521.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    538.66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    569.30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    618.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    603.62] at iteration 2458");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    616.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    727.15] at iteration 2488");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   7, TC =    632.10] at iteration 2490");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    630.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    640.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17, 18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    735.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    741.08] at iteration 4248");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    778.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    866.79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    943.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =    925.04] at iteration 6008");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    927.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    968.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =   1064.17] at iteration 6129");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  10, TC =    994.89] at iteration 6141");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1008.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1048.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1049.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1056.92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1095.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1100.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1105.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1146.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1151.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1198.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1198.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1227.41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1234.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1237.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1262.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1312.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1322.79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1371.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1411.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1466.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1497.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1527.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1564.92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   1590.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1620.38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1625.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1648.63]");
    }

    @Test
    public void dpdptw_lc103_q_0_0_5_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc103_q_0_0.5.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(1280.6296189724035);
        assertThat(solutionBest.tours.size()).isEqualTo(11);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    701.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    758.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    743.92] at iteration 567");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    713.88] at iteration 568");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    740.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    769.04] at iteration 2387");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    755.63] at iteration 2443");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   8, TC =    754.94] at iteration 2447");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33, 34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    776.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    780.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    821.00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   9, TC =    816.82] at iteration 4369");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =    895.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    948.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    953.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =    978.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1024.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1067.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   1078.42] at iteration 11752");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1162.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   1165.10] at iteration 11914");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   1163.41] at iteration 11924");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1163.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1188.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1192.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1224.35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1254.90]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1255.10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1280.44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1280.63]");
    }

    @Test
    public void dpdptw_lr1_4_8_q_0_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw400Directory, "LR1_4_8_q_0_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(10700.099251361407);
        assertThat(solutionBest.tours.size()).isEqualTo(37);
        assertThat(solutionBest.feasible).isTrue();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2826.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2804.16] at iteration 2");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2695.21] at iteration 35");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2691.01] at iteration 81");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2817.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2782.89] at iteration 187");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2778.12] at iteration 188");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2721.40] at iteration 189");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2743.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2788.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2785.60] at iteration 602");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2784.12] at iteration 649");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2813.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2810.63] at iteration 813");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   3007.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2944.34] at iteration 840");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2939.68] at iteration 845");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2920.23] at iteration 850");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2923.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2918.99] at iteration 935");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2916.35] at iteration 1105");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2916.14] at iteration 1107");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2967.00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2957.38] at iteration 1496");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2951.76] at iteration 1503");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2949.12] at iteration 1525");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   2948.90] at iteration 1688");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   2975.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3059.72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3081.18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3142.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3139.69] at iteration 2086");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3139.20] at iteration 2143");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3138.02] at iteration 2171");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3137.52] at iteration 2178");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3240.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3210.59] at iteration 2556");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3208.91] at iteration 2583");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3209.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3249.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  11, TC =   3244.38] at iteration 3546");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3271.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   3309.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [59, 60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   3466.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [61, 62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   3573.08]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3669.23] at iteration 4074");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3653.86] at iteration 4094");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3652.50] at iteration 4096");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   3676.21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3616.64] at iteration 4145");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3615.77] at iteration 4146");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3615.15] at iteration 4149");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3610.37] at iteration 4150");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3610.35] at iteration 4151");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   3666.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  12, TC =   3663.09] at iteration 4172");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   3710.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [66]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   3713.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3830.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3842.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3864.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3865.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [71]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3971.97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  14, TC =   3956.24] at iteration 5538");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  14, TC =   3948.61] at iteration 5539");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [72]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3948.75]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [73]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   3997.27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   4053.08]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [75, 76]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4144.49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4260.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4253.53] at iteration 6795");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4248.75] at iteration 6809");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [78]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4394.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4391.82] at iteration 6810");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4368.33] at iteration 6818");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4364.12] at iteration 6850");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   4468.34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4583.87] at iteration 6935");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4573.53] at iteration 6941");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4527.73] at iteration 6947");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4497.51] at iteration 6948");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4494.87] at iteration 6949");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4494.23] at iteration 6950");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4512.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4505.05] at iteration 6968");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4504.82] at iteration 6971");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4494.80] at iteration 6984");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4494.55] at iteration 7057");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4491.34] at iteration 7065");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4486.91] at iteration 7075");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4481.32] at iteration 7337");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4508.80]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4498.37] at iteration 7339");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4494.14] at iteration 7347");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4466.29] at iteration 7354");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4426.86] at iteration 7391");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4421.93] at iteration 8022");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4413.03] at iteration 8076");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4406.64] at iteration 8103");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4399.01] at iteration 8105");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4412.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4471.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4549.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4545.37] at iteration 8905");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4552.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4544.75] at iteration 9022");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4542.66] at iteration 9045");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4536.28] at iteration 9058");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4543.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4568.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4564.31] at iteration 9943");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4605.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4710.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [90, 91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4868.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [92]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   4983.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4960.31] at iteration 10330");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4953.93] at iteration 10350");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [93]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5036.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5016.83] at iteration 10386");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5011.53] at iteration 10393");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5008.67] at iteration 10397");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5005.42] at iteration 10401");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5004.81] at iteration 10416");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4991.17] at iteration 10469");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4984.45] at iteration 10481");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4979.92] at iteration 10618");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   4975.90] at iteration 10636");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5062.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5170.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5136.92] at iteration 11760");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5137.60]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [97]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5229.61]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [98]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5367.33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5543.16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5499.53] at iteration 13406");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5498.37] at iteration 13417");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5471.74] at iteration 13439");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5466.44] at iteration 13441");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [100]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5473.05]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [101]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5547.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [102]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5689.55]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [103]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5706.09]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [104]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5843.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [105]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5880.99]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [106]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5885.81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [107]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   5906.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   5900.33] at iteration 14494");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [108]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6046.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [109]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6256.36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [110]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6260.36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [111]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6272.03]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  15, TC =   6271.75] at iteration 14692");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [112]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6324.14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [113]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   6407.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [114, 115]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   6426.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [116]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   6434.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [117, 118, 119]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   6667.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [120]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   6710.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [121]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   6737.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [122]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   6773.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [123]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   6909.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [124]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   6915.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [125, 126, 127]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   6993.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [128]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   6994.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   6991.71] at iteration 15393");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [129, 130]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7000.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [131, 132]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7026.53]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [133]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7034.25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [134, 135, 136, 137]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7231.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   7222.39] at iteration 15518");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   7221.25] at iteration 15538");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [138]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7230.82]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [139, 140]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7438.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   7263.99] at iteration 15610");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [141]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   7415.11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  19, TC =   7409.61] at iteration 15688");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [142]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7483.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [143]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7629.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   7541.21] at iteration 15735");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [144]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7667.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [145]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7682.77]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [146]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   7682.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   7678.32] at iteration 16051");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  20, TC =   7677.96] at iteration 16058");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [147, 148]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =   7958.79]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [149]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =   8033.86]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [150, 151]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =   8237.44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  24, TC =   8236.61] at iteration 16140");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [152, 153]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =   8412.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [154, 155, 156]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =   8592.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [157]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =   8613.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [158]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =   8627.18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [159]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  26, TC =   8769.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [160, 161, 162]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =   9090.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  27, TC =   9081.52] at iteration 16616");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  27, TC =   9078.58] at iteration 16623");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  27, TC =   9074.49] at iteration 16684");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [163]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =   9085.69]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  27, TC =   9085.25] at iteration 16792");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [164]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =   9155.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [165]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =   9161.43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [166]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  27, TC =   9183.57]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [167, 168]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  28, TC =   9373.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  28, TC =   9297.44] at iteration 17040");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [169, 170, 171]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  29, TC =   9486.87]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  29, TC =   9460.12] at iteration 17086");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  29, TC =   9447.44] at iteration 17186");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  29, TC =   9405.03] at iteration 17193");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [172]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  29, TC =   9426.64]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [173]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  29, TC =   9496.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [174]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  29, TC =   9561.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [175, 176]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9797.04]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9790.48] at iteration 17384");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9705.96] at iteration 17392");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9704.11] at iteration 17393");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9701.12] at iteration 17395");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [177]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9831.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9772.39] at iteration 17421");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [178]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9783.25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9733.00] at iteration 17493");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9728.87] at iteration 17501");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [179]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9804.59]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9788.87] at iteration 17539");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [180]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9908.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9799.44] at iteration 17631");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  31, TC =   9769.18] at iteration 17714");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [181]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  31, TC =   9773.12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [182, 183]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  32, TC =   9986.31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [184]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  32, TC =   9989.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  32, TC =   9989.23] at iteration 17898");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  32, TC =   9989.11] at iteration 17919");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [185, 186]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  33, TC =  10090.61]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  33, TC =  10089.78] at iteration 17973");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  33, TC =  10079.51] at iteration 18000");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  33, TC =  10079.27] at iteration 18001");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [187, 188, 189]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  33, TC =  10211.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  33, TC =  10211.68] at iteration 18093");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [190]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  33, TC =  10216.20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  33, TC =  10215.76] at iteration 18188");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [191, 192]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  33, TC =  10220.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [193]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  34, TC =  10323.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [194]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  35, TC =  10421.22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  34, TC =  10407.20] at iteration 18502");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [195]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  35, TC =  10467.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  35, TC =  10465.05] at iteration 18534");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  35, TC =  10452.04] at iteration 18558");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [196]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  35, TC =  10452.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  35, TC =  10448.34] at iteration 18570");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [197, 198]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  35, TC =  10518.40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [199, 200]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  35, TC =  10531.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  35, TC =  10530.10] at iteration 18705");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [201]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  36, TC =  10575.07]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [202]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  36, TC =  10609.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  36, TC =  10556.45] at iteration 18753");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [203]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  36, TC =  10633.23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  36, TC =  10612.32] at iteration 18917");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =  36, TC =  10611.52] at iteration 18937");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [204]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  36, TC =  10611.89]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [205]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  36, TC =  10636.84]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [206]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  37, TC =  10689.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [207]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  37, TC =  10696.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [208]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  37, TC =  10697.39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [209]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  37, TC =  10700.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [210]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  37, TC =  10700.10]");
    }

    @Test
    public void dpdptw_lc104_a_1_0_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw100Directory, "lc104_a_1.0.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(2387.496616161863);
        assertThat(solutionBest.tours.size()).isEqualTo(30);
        assertThat(solutionBest.feasible).isFalse();
        int counter = 0;
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   3, TC =    175.45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [3]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    205.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New best = [F = true, NV =   3, TC =    220.09] at iteration 567");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [4]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    246.48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [5]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   4, TC =    314.10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [6]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    352.81]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [7]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    360.63]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [8]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    396.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [9]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   5, TC =    409.85]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [10]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    449.58]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [11]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    527.16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [12]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    562.56]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   6, TC =    623.62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [14]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    691.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    698.24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [16]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    711.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    726.00]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [18]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    729.68]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [19]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   7, TC =    781.29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [20]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   8, TC =    817.01]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [21]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    853.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [22]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    907.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [23]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =    924.95]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [24]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1011.65]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [25]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1084.42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =   9, TC =   1165.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [27]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  10, TC =   1255.70]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [28]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  11, TC =   1303.15]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [29]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  12, TC =   1382.06]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  13, TC =   1433.26]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [31]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  14, TC =   1505.51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [32]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  15, TC =   1577.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [33]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  16, TC =   1647.91]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [34]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  17, TC =   1715.83]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [35]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  18, TC =   1775.30]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [36]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   1831.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  19, TC =   1861.94]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [38]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  20, TC =   1904.47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [39]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  21, TC =   1953.54]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [40]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  22, TC =   2000.13]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [41]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  23, TC =   2045.75]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [42]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  24, TC =   2089.62]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [43]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = true, NV =  25, TC =   2130.88]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [44]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  26, TC =   2172.17]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [45]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  27, TC =   2212.90]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [46]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  28, TC =   2251.74]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [47]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  29, TC =   2283.96]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [48]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  30, TC =   2362.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [49]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  30, TC =   2362.67]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  30, TC =   2387.37]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [51]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  30, TC =   2387.50]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("New requests = [52]");
        assertThat(solver.getLogs().get(counter++)).isEqualTo("Insertion heuristic = [F = false, NV =  30, TC =   2387.50]");
    }

    @Test
    public void dpdptw_lrc2_8_7_q_0_1_test() throws Exception {
        Instance instance = Reader.getInstance(Paths.get(dpdptw800Directory, "LRC2_8_7_q_0_0.1.txt").toFile());
        Solver solver = new Solver(instance, new Random(1), maxIterations, true, true);
        solver.enableVehicleControlCenter();
        solver.enableLocalSearch();
        //solver.enablePrintOperation("C:\\Temp\\route-tracker\\print");
        solver.init();
        solver.run();
        Solution solutionBest = solver.getSolutionBest();
        assertThat(solutionBest.totalCost).isEqualTo(42460.51278293948);
        assertThat(solutionBest.tours.size()).isEqualTo(34);
        assertThat(solutionBest.feasible).isTrue();
    }
}
