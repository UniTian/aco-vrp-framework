package com.github.schmittjoaopedro;

import com.github.schmittjoaopedro.algorithms.MMAS_MEM_CMADTSP;
import com.github.schmittjoaopedro.graph.Graph;
import com.github.schmittjoaopedro.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_CMADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/KroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_10_mag_0_5_kroA100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 10, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(32393.894817710094);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 39601.077353207074, 3256.4480241212223, 0.0, 57.137142857142855, 34060.60184509465);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 5, 32642.208710279887, 1823.494116084192, 0.735, 6.50530612244898, 31310.60859911548);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 10, 30688.698290409564, 1888.2640009146317, 0.5, 4.63265306122449, 29637.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 11, 30350.979080573645, 1561.7884302167895, 0.5, 2.0008163265306123, 29637.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 15, 30177.80050312303, 1529.6705238580685, 0.5, 1.497142857142857, 29637.17547638517);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 20, 30902.898979718975, 1839.6906862536548, 0.5, 6.151836734693878, 29534.77490268333);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 21, 39319.27254943938, 2350.5439777716233, 0.48, 27.660408163265306, 34232.72443654453);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 25, 34760.39867156656, 2704.529023989655, 1.115, 31.31673469387755, 30389.43940201231);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 30, 33235.74199619067, 2044.5078926594551, 1.185, 27.34857142857143, 29744.50285185991);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 31, 38077.175358597335, 3368.1928593419525, 1.135, 29.124897959183674, 33237.929614974666);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 35, 35284.64016655421, 2865.4045656579124, 1.28, 25.49795918367347, 31962.052683785994);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 40, 36024.46539371248, 3580.437164921175, 1.285, 22.383673469387755, 30783.930998796004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 41, 38082.02820045648, 2489.6326105876724, 1.225, 30.455510204081634, 32769.73989179866);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 45, 35346.88919338917, 2773.9907214821455, 1.39, 25.666122448979593, 31285.49351465777);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 33260.62111168756, 2710.3568897952996, 1.44, 19.678367346938774, 29425.37131293534);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 51, 35737.849227594605, 1895.2598273834865, 1.405, 25.772244897959183, 32936.23663197243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 55, 34298.359318045426, 2321.7781886765847, 1.45, 26.87183673469388, 29933.419748944154);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 60, 33654.615192012585, 2214.144912280334, 1.505, 24.304489795918368, 29541.375969945104);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 61, 34165.85314840833, 2124.422098585411, 1.52, 27.267755102040816, 30567.875482398915);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 65, 33625.03900598935, 1996.7003131020856, 1.545, 23.384489795918366, 29926.997732223233);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 70, 33217.97438002222, 2008.9026948467854, 1.545, 22.485714285714284, 29926.997732223233);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 71, 36254.03907494442, 3480.457782906339, 1.485, 27.434285714285714, 32012.30495013493);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 75, 36537.14734419992, 3442.9231375175373, 1.505, 28.06204081632653, 30861.320476430927);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 80, 35919.652844972654, 4104.305906735313, 1.505, 27.209795918367348, 30861.320476430927);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 81, 35000.04506056887, 3230.0629303141623, 1.56, 24.05469387755102, 30246.01387008159);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 85, 35607.515774406005, 2954.160267500467, 1.55, 25.932244897959183, 28509.129451024706);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 90, 34265.672317046294, 3254.2110491322496, 1.55, 21.981224489795917, 28509.129451024706);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 91, 34327.202107922516, 2404.433981198747, 1.49, 25.408979591836733, 30881.040852347087);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 95, 33145.35650235369, 1805.4418849743881, 1.535, 24.07183673469388, 29817.526114393662);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 33076.04209035734, 2323.578076000313, 1.555, 21.83918367346939, 29252.92237591602);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 34451.49279391461, 2177.0209065520794, 1.55, 23.97061224489796, 30944.9306287909);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 105, 34466.878397160435, 2445.604286539741, 1.545, 21.68, 30370.69642647968);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 110, 34032.1143444457, 2357.8394074946023, 1.545, 21.239183673469388, 30370.69642647968);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 111, 36699.832660578104, 3278.3265581146525, 1.495, 28.288979591836735, 32456.372019335166);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 115, 36145.52916264234, 3507.0718621947694, 1.575, 29.58448979591837, 30454.451128049317);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 120, 37092.93316367381, 4012.8601342855295, 1.52, 29.238367346938777, 30223.071393172);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 121, 34765.99479571069, 3605.3747599771664, 1.54, 27.477551020408164, 28946.17424092688);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 125, 35298.959514313065, 3165.9382958002593, 1.555, 24.26612244897959, 28750.200768175073);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 130, 34988.807921120366, 3721.006998860992, 1.54, 23.161632653061226, 28360.143382843642);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 131, 33664.30935725746, 2563.0652276834126, 1.47, 26.30938775510204, 29075.20276156576);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 135, 33468.03177239843, 2218.3557057191474, 1.485, 24.959183673469386, 28924.945165990062);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 140, 32564.11298164885, 2405.8898111264916, 1.485, 23.547755102040817, 28924.945165990062);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 141, 35331.55271768087, 2035.321086088257, 1.47, 24.83918367346939, 31802.792332450306);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 145, 34868.62275628324, 2496.211575159864, 1.51, 25.60408163265306, 30156.469300048248);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 34442.23568145054, 2175.1195614541325, 1.535, 25.079183673469387, 30106.693708030543);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 151, 36226.28011038586, 3819.239102801987, 1.55, 29.892244897959184, 30969.550967919095);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 155, 37124.721452730024, 3844.4145525131553, 1.55, 30.129795918367346, 30969.550967919095);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 160, 36635.65896766367, 3558.4133455667234, 1.565, 30.66938775510204, 30266.06162041144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 161, 36685.35420651893, 3264.511992073065, 1.555, 26.58204081632653, 29707.106678380074);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 165, 35841.78888883457, 2652.703201545909, 1.575, 26.40326530612245, 29643.51281484267);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 170, 36357.080109642, 3387.2165041463754, 1.555, 22.693061224489796, 29018.01101649778);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 171, 33357.691134790235, 1901.5029446272165, 1.54, 27.610612244897958, 29974.488415436823);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 175, 31944.83668678033, 1908.8403476003798, 1.545, 22.65714285714286, 29192.83954289219);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 180, 32313.26076696043, 2569.5498270450485, 1.52, 22.76734693877551, 28341.407858889404);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 181, 35365.88943736065, 2393.1573773149985, 1.52, 26.089795918367347, 30621.033272083325);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 185, 34872.70511851787, 2103.251958721594, 1.52, 22.289795918367346, 30621.033272083325);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 190, 33925.631763411315, 2219.1570139199957, 1.52, 21.045714285714286, 30105.123987639654);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 191, 35777.35014660893, 2965.1927604946245, 1.52, 29.426938775510205, 30514.590156586986);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 195, 36065.470064153524, 3439.9788980440258, 1.52, 28.026938775510203, 30514.590156586986);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 36806.526461516194, 4086.6960022447834, 1.54, 29.220408163265308, 30349.69345654431);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 36237.56963193147, 2985.25968204195, 1.535, 26.866938775510203, 31128.086639234392);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 205, 35792.27688001996, 2440.866828288079, 1.545, 24.88326530612245, 28481.211258568743);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 210, 35486.51197610219, 2840.4061962604346, 1.545, 23.178775510204083, 28481.211258568743);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 211, 33116.842480287276, 2165.4128754343346, 1.55, 25.227755102040817, 29572.87422943967);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 215, 32462.43957017415, 2287.582328465887, 1.54, 22.84979591836735, 29438.3840414321);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 220, 32490.7267695821, 2280.0696772217625, 1.535, 22.06122448979592, 29184.778763188326);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 221, 34243.86052613471, 2550.8029841977736, 1.525, 22.11265306122449, 29796.477471231487);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 225, 33691.887286559926, 2279.017403151786, 1.525, 19.344489795918367, 29796.477471231487);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 230, 33363.88788278151, 1741.1444598991188, 1.52, 18.85061224489796, 29309.072764689183);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 231, 35902.78835601163, 3421.351780320166, 1.535, 28.366530612244897, 31174.22688741782);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 235, 35879.208524723275, 3565.278025482929, 1.595, 27.908571428571427, 30445.514031092956);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 240, 35824.98455109207, 3622.39410003088, 1.595, 27.842448979591836, 30445.514031092956);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 241, 35708.92308437198, 2640.4628605095018, 1.59, 25.732244897959184, 29469.142991130535);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 245, 34765.56180128167, 2809.8921154662107, 1.6, 23.595102040816325, 28832.13509875651);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 36193.49349086098, 3199.086750319645, 1.6, 24.39265306122449, 28832.13509875651);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 251, 33796.066624213854, 2782.2999776718125, 1.58, 23.117551020408165, 30219.514050724225);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 255, 32199.106982357018, 2156.6001630765995, 1.57, 19.663673469387756, 29288.160355399315);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 260, 32413.3231719296, 2178.0528706312275, 1.57, 19.46857142857143, 29147.621068610126);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 261, 34061.77567409008, 2046.9823176789162, 1.5, 20.36, 30460.98011169994);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 265, 33651.60175375151, 1504.7366783584375, 1.5, 19.411428571428573, 30460.98011169994);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 270, 33647.29049081824, 2062.0913368765887, 1.52, 18.907755102040817, 29713.079685034943);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 271, 35101.130710319456, 2847.0076860778254, 1.54, 26.88, 30292.304873516965);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 275, 35392.416026093815, 2312.6750313064813, 1.54, 26.83918367346939, 30292.304873516965);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 280, 35013.29098143548, 2781.769387215194, 1.585, 26.48081632653061, 30209.565549646133);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 281, 36379.35588662543, 3016.6341641451168, 1.545, 24.729795918367348, 30898.563337237105);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 285, 37280.68578459967, 2507.962035232041, 1.56, 23.84734693877551, 30437.115273094016);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 290, 36084.74940102208, 2973.5601749191574, 1.52, 23.09387755102041, 29689.545789788695);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 291, 32207.339289032567, 2780.252389911433, 1.53, 20.101224489795918, 29693.099477963366);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 295, 32121.71010826001, 2038.8334073670912, 1.54, 19.87265306122449, 29456.05141092559);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 32084.6916469242, 2189.6729076727374, 1.51, 17.915102040816326, 29456.05141092559);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 33917.17800120937, 1540.108938061264, 1.465, 19.591836734693878, 31119.16268885262);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 305, 33810.29235548478, 2102.451065110972, 1.455, 19.44, 29949.193464835673);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 310, 33735.06613387574, 1581.5703608962885, 1.455, 19.879183673469388, 29949.193464835673);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 311, 34734.48164586239, 2966.5487728157013, 1.465, 26.026938775510203, 30242.386362868576);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 315, 34518.36502789833, 2677.4518713524362, 1.465, 23.775510204081634, 30242.386362868576);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 320, 34298.26476550111, 2598.195578282808, 1.48, 24.002448979591836, 30193.287173573866);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 321, 35860.46439875395, 3032.4154900855874, 1.44, 22.082448979591838, 30209.396435359482);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 325, 35547.183106936915, 2754.1945434322006, 1.445, 21.39673469387755, 28906.93056025197);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 330, 35027.53457356257, 3280.543853921381, 1.445, 20.791020408163266, 28906.93056025197);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 331, 33592.76831966353, 3080.043213163108, 1.51, 20.979591836734695, 29679.078459611123);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 335, 32362.968863515816, 2159.6185668747385, 1.51, 17.333877551020407, 29610.623600878196);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 340, 31414.452131067366, 1719.9963886414755, 1.495, 16.096326530612245, 29551.244786757496);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 341, 34999.89124759617, 1983.9495240989152, 1.4, 18.00734693877551, 31421.228821644705);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 345, 33805.19268743964, 1604.0697658953227, 1.41, 14.815510204081633, 31066.199530284488);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 33579.23215071755, 1672.7903297891398, 1.415, 13.820408163265306, 30876.506287463366);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 351, 34712.72390778084, 1925.5683905456544, 1.445, 21.610612244897958, 31774.786080486145);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 355, 37967.60818830485, 4606.688565105807, 1.465, 20.569795918367348, 31674.920943725665);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 360, 36160.0160060873, 3921.48329900533, 1.485, 22.06122448979592, 31527.98915923822);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 361, 37856.522478455656, 3439.107035055997, 1.46, 23.06122448979592, 31060.156778135188);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 365, 35254.169075947604, 2498.6043992670584, 1.47, 18.676734693877552, 30318.99599450525);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 370, 34145.62497005766, 2271.588413792245, 1.455, 19.176326530612243, 30143.37307496513);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 371, 32434.94521423572, 1770.9701351194885, 1.495, 17.04326530612245, 30405.89563496349);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 375, 32221.118708678725, 1455.3560352550558, 1.485, 16.824489795918367, 30107.460800446934);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 380, 31803.717679495137, 1654.21385216823, 1.485, 15.631020408163264, 30107.460800446934);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 381, 34395.87099905962, 1465.468036703575, 1.36, 16.3265306122449, 31479.854025646942);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 385, 33846.42312926915, 1698.61529843797, 1.38, 14.248979591836735, 30825.90003556351);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 390, 33974.59414735294, 1752.150691954222, 1.395, 14.231836734693877, 30671.054995660892);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 391, 36940.06758981381, 3660.1589365392224, 1.44, 21.012244897959185, 32219.33611821206);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 395, 36511.29262746153, 3468.1476916842125, 1.445, 19.380408163265304, 31292.781704780307);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 36530.61089893421, 3345.6104679410437, 1.44, 19.75673469387755, 30849.281957479936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 35695.11075611985, 2528.8226452496056, 1.4, 19.24326530612245, 31059.924533763726);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 405, 33839.77599628122, 2251.287466891538, 1.43, 17.365714285714287, 29757.320212619165);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 410, 34653.660371573256, 2536.6183192474587, 1.43, 16.333061224489796, 29757.320212619165);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 411, 36456.9118785036, 2930.3508074705956, 1.48, 17.605714285714285, 30853.885119596132);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 415, 34684.33784746571, 2966.812907730874, 1.46, 16.22530612244898, 30677.83049866051);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 420, 33149.00904110189, 2323.7471085015027, 1.445, 15.577142857142857, 30443.91690286563);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 421, 33821.07344849597, 2033.1448981989106, 1.375, 14.664489795918367, 30527.25324620627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 425, 34158.736430028264, 1974.30660426689, 1.375, 12.867755102040816, 30527.25324620627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 430, 33560.18910081794, 1397.0233026583087, 1.375, 14.133877551020408, 30527.25324620627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 431, 36014.58627207344, 3062.1505975527907, 1.375, 19.82938775510204, 31620.59176730949);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 435, 35355.19876181887, 3158.334817623025, 1.4, 18.293061224489797, 31484.05375441763);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 440, 35098.46079404871, 2186.622459737733, 1.385, 17.84734693877551, 30909.715924696695);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 441, 34915.03699436796, 2485.237120714036, 1.375, 18.560816326530613, 31010.863422558177);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 445, 34177.399415692176, 2345.714804339305, 1.395, 16.0334693877551, 30252.314658070693);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 34824.12647666656, 2322.313428479438, 1.395, 16.325714285714287, 30252.314658070693);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 451, 33589.07497367589, 1336.802037582362, 1.42, 18.848979591836734, 31290.219269737252);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 455, 33134.31995842595, 1371.7431367505949, 1.415, 15.772244897959183, 31165.3641646076);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 460, 33141.873508295794, 1385.7171788113674, 1.415, 15.685714285714285, 31149.660600039828);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 461, 34654.05557886212, 1622.995983091694, 1.35, 14.220408163265306, 32193.315862295884);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 465, 34810.43690434329, 2588.0003067007497, 1.34, 13.076734693877551, 31791.150620742366);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 470, 34002.66814813699, 1655.3807210762568, 1.33, 11.532244897959183, 31125.335563219192);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 471, 40493.71038060721, 4740.920701140346, 1.315, 17.771428571428572, 33401.6232146369);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 475, 35321.34478336013, 1495.274758024058, 1.32, 15.699591836734694, 32329.536009253734);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 480, 35562.748004951914, 1612.2945815663884, 1.32, 16.306122448979593, 32329.536009253734);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 481, 36011.686074359706, 2171.8982615544733, 1.29, 16.54612244897959, 31983.892289069143);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 485, 35139.65294064754, 1986.3428882137337, 1.33, 16.345306122448978, 30995.13896377851);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 490, 34344.32217851863, 2014.0599199435267, 1.325, 14.866122448979592, 30764.027213791724);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 491, 33027.92849725654, 1399.1125786030677, 1.33, 15.968163265306123, 31368.59369245936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 495, 33157.29241647468, 1763.758992629568, 1.33, 15.339591836734694, 31101.025726594977);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 33327.3977116382, 1593.3652110573319, 1.29, 14.972244897959184, 31101.025726594977);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 34060.8987243297, 1229.483292348831, 1.245, 14.04734693877551, 30948.766570392883);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 505, 33796.80099213711, 2010.178992161568, 1.245, 11.862857142857143, 30702.55129045006);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 510, 33312.44231313702, 1452.3161553145226, 1.245, 10.706938775510205, 30702.55129045006);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 511, 34669.470173251735, 1590.434493997191, 1.235, 16.435102040816325, 31822.585072441627);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 515, 34349.113401892464, 1567.383888188041, 1.26, 15.777959183673469, 31521.326229186518);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 520, 34294.99010703619, 1542.1768809230061, 1.26, 15.379591836734694, 31521.326229186518);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 521, 36522.92430871591, 2028.7792585065665, 1.225, 16.632653061224488, 33048.48091417877);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 525, 35110.24653951365, 1989.4229648880473, 1.265, 15.564897959183673, 31660.125107834137);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 530, 34832.30993113152, 2212.0676069621436, 1.245, 14.311836734693877, 31508.747374707);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 531, 33901.665642899, 1492.7829696102522, 1.29, 16.488979591836735, 31931.641998401577);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 535, 33280.08660701196, 1136.7639531271795, 1.335, 15.305306122448979, 31525.79372572886);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 540, 33718.16137606586, 1726.145902846435, 1.335, 14.777142857142858, 31410.00052854852);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 541, 35009.12969133107, 2098.269502672333, 1.285, 14.685714285714285, 32215.452431109854);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 545, 34486.75700058903, 2351.7514419716995, 1.28, 9.173061224489796, 31609.190104257752);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 34199.28843272011, 2019.483450188167, 1.28, 8.182857142857143, 31609.190104257752);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 551, 35308.12141372133, 1270.8909131686985, 1.265, 13.679183673469387, 32728.625330401348);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 555, 35332.86563429091, 1204.6043801433482, 1.28, 12.885714285714286, 32536.57109207505);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 560, 35291.52946915561, 1768.2833468313038, 1.27, 12.372244897959183, 31920.685851423124);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 561, 36338.68427042369, 2018.868825269625, 1.265, 13.148571428571428, 32539.361641580886);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 565, 35536.82456435517, 2042.908402195717, 1.295, 13.05795918367347, 32279.708083435522);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 570, 36050.293526605696, 2626.698043962178, 1.275, 13.379591836734694, 31972.752614044384);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 571, 33937.72335277961, 1765.2664057998834, 1.32, 13.738775510204082, 31615.782689152544);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 575, 33872.57317677775, 1406.9137765181333, 1.32, 13.162448979591836, 31435.252218615176);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 580, 33916.04547125638, 1337.9594358415536, 1.32, 12.588571428571429, 31435.252218615176);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 581, 34736.04627683005, 1512.612921138273, 1.235, 13.426938775510203, 32262.086127844315);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 585, 33865.48929091815, 1838.791671698308, 1.25, 7.836734693877551, 32150.53413307193);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 590, 34297.55764174329, 1925.8877353050189, 1.25, 8.754285714285714, 32150.53413307193);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 591, 35571.96369466908, 1246.9337720560152, 1.21, 11.789387755102041, 31846.863967123893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 595, 34624.89408946766, 1465.5585048827884, 1.21, 11.637551020408162, 31846.863967123893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 34652.89232076894, 1520.9573566015154, 1.17, 10.084897959183673, 31846.863967123893);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 34986.33645635719, 2429.5248171120556, 1.19, 13.233469387755102, 31625.519285400973);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 605, 34750.22750103772, 2539.932477411757, 1.19, 10.845714285714285, 31625.519285400973);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 610, 35061.1717041012, 2847.2031833856445, 1.18, 9.511836734693878, 31448.84500298428);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 611, 34003.20479102335, 1570.5447716188546, 1.215, 12.063673469387755, 31733.378179658168);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 615, 33930.58154835588, 1217.4493519967837, 1.22, 11.555102040816326, 31713.934259530844);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 620, 34058.39360966945, 1340.8508807221074, 1.2, 12.217142857142857, 31612.33715650958);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 621, 34826.93157480946, 1973.318455085182, 1.175, 10.84734693877551, 31891.647933993892);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 625, 34218.405993107815, 1568.6547110175784, 1.165, 9.755102040816327, 31804.677862939407);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 630, 34773.69815158424, 2203.4951703421584, 1.165, 9.98857142857143, 31804.677862939407);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 631, 35105.48050675548, 1411.4779733118557, 1.16, 12.521632653061225, 32988.97400443391);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 635, 35769.84012845149, 1426.1716802299563, 1.19, 9.326530612244898, 32589.52826115887);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 640, 35810.0242756707, 1543.3430528573938, 1.195, 9.547755102040817, 32403.545696643334);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 641, 36329.40027703238, 2186.837687525368, 1.18, 11.479183673469388, 32931.1802524962);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 645, 36035.874942663795, 1994.5771523597368, 1.19, 11.035102040816327, 32478.394596418184);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 36281.007388561775, 2293.6161031682313, 1.185, 11.81469387755102, 32128.809961413248);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 651, 34388.99880664681, 1623.9455597733522, 1.21, 11.790204081632654, 31643.795813076602);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 655, 34018.98217185673, 1290.3838424606727, 1.21, 10.26530612244898, 31643.795813076602);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 660, 33809.626069102924, 1288.65298701804, 1.21, 10.088979591836734, 31643.795813076602);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 661, 34831.42065071283, 1928.5354944680867, 1.125, 9.597551020408163, 32558.999320246174);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 665, 34581.037718150175, 1941.6610356909293, 1.125, 7.835918367346939, 31877.75543592935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 670, 34233.31647624204, 1928.5108335158825, 1.125, 6.823673469387755, 31877.75543592935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 671, 35165.30354186181, 1395.2314510145945, 1.125, 10.417142857142856, 32830.28872236653);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 675, 34581.406055084495, 1315.1319481891157, 1.13, 10.575510204081633, 32654.074227596273);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 680, 34660.62901927969, 1667.1647826357046, 1.12, 10.8, 32571.945075327454);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 681, 36648.36580603022, 1990.9396272242093, 1.09, 11.780408163265307, 33274.93100114691);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 685, 36384.79375706517, 2113.8957081392255, 1.075, 9.856326530612245, 33098.25671873022);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 690, 36026.42082827323, 1795.9874861299334, 1.075, 9.417142857142856, 33098.25671873022);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 691, 34090.62376000283, 1839.253751704789, 1.07, 10.071836734693878, 31878.12282238037);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 695, 33252.067475984644, 1098.03530582065, 1.07, 8.633469387755103, 31319.25519571765);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 33102.089572142955, 734.6743602486695, 1.055, 7.347755102040816, 31319.25519571765);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 34356.390863847846, 1472.8096778397519, 1.035, 7.8008163265306125, 32891.99767044447);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 705, 34117.80283268291, 1420.770941375151, 1.035, 6.886530612244898, 32891.99767044447);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 710, 34250.21804869533, 1513.8368696054683, 1.035, 6.484897959183673, 32891.99767044447);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 711, 35141.397759105406, 1570.9909041264082, 1.05, 8.955102040816326, 32801.03621176243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 715, 34806.20013958862, 1377.2240374697383, 1.04, 8.421224489795918, 32353.708131805484);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 720, 34780.10051087582, 1614.1922131188896, 1.04, 7.795918367346939, 32353.708131805484);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 721, 36668.54834799888, 2080.0914584369925, 1.02, 8.661224489795918, 33166.255720413305);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 725, 36261.82190980131, 2099.7277598052738, 1.02, 9.180408163265307, 33127.80213659222);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 730, 36343.54629585904, 2241.8004934545957, 1.02, 8.788571428571428, 33127.80213659222);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 731, 33477.182098006786, 1151.8576991878251, 1.01, 7.746122448979592, 31678.81251636043);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 735, 33753.62906812976, 1620.2020427574682, 1.015, 7.799183673469388, 31535.088042896066);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 740, 33422.45600986454, 911.1111844468078, 1.015, 7.622040816326531, 31535.088042896066);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 741, 34189.57303130511, 1412.6685675309304, 0.97, 6.36, 32915.80450722676);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 745, 33527.90771138368, 887.508800001519, 0.97, 4.294693877551021, 32915.80450722676);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 33481.62893961271, 842.7200948328514, 0.95, 3.9412244897959186, 32664.560622909936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 751, 34917.356130115746, 1555.3351370507473, 0.955, 5.578775510204082, 33183.37003698686);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 755, 34843.529178351135, 1639.0322722041778, 0.955, 5.42530612244898, 33183.37003698686);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 760, 34247.77983527247, 1240.5714739442824, 0.955, 4.9077551020408166, 33183.37003698686);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 761, 35858.42296278886, 2032.8752204228463, 0.965, 6.731428571428571, 33567.90733024408);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 765, 36135.010229255204, 2295.575201496577, 0.97, 6.400816326530612, 33528.67269592055);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 770, 35739.2728564334, 2009.7490303413942, 0.985, 6.1085714285714285, 33354.97761474958);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 771, 33972.93450373871, 1052.9625186438823, 1.005, 6.876734693877551, 32170.895534564712);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 775, 33445.83225297972, 1178.8973903565015, 1.005, 6.16734693877551, 31900.518954131232);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 780, 33377.83189209212, 920.8100748864065, 1.005, 6.106938775510204, 31900.518954131232);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 781, 34227.97398946997, 1263.6245751462009, 0.915, 5.124897959183674, 33334.83422682034);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 785, 33913.06359975688, 947.9122337090449, 0.92, 4.116734693877551, 32653.590342503514);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 790, 33988.354051650065, 996.3418568921998, 0.92, 4.163265306122449, 32653.590342503514);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 791, 33445.19110633114, 665.8212936333313, 0.915, 4.422040816326531, 32836.875658397854);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 795, 33328.840523242885, 700.6209030138613, 0.915, 4.128163265306123, 32836.875658397854);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 33224.60634801732, 613.1129374647328, 0.89, 3.740408163265306, 32836.875658397854);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 34805.37930376599, 1203.7529536677607, 0.92, 4.524081632653061, 33902.34905122666);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 805, 35376.986877473464, 1766.9299438395958, 0.92, 6.141224489795919, 33765.192969604235);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 810, 35328.5551473367, 1896.8296163176053, 0.925, 5.755918367346939, 33725.9583352807);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 811, 33384.57856975669, 1223.7352030722222, 0.945, 5.7036734693877555, 31950.630045469075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 815, 33446.768105840834, 986.0015283551331, 0.945, 5.254693877551021, 31950.630045469075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 820, 33270.76359857262, 1069.2656838788942, 0.945, 5.78204081632653, 31950.630045469075);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 821, 33863.86491514012, 1078.4779111026821, 0.89, 4.141224489795919, 32583.080846057783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 825, 33991.87381832323, 1267.4630738642443, 0.89, 3.8922448979591837, 32583.080846057783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 830, 33775.312089428095, 808.1417399722708, 0.89, 3.873469387755102, 32583.080846057783);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 831, 33214.71343552675, 968.9372305483236, 0.87, 3.7110204081632654, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 835, 33129.84094578027, 704.73423188996, 0.87, 3.871020408163265, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 840, 33142.01180354888, 599.3363858403334, 0.87, 3.9020408163265308, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 841, 34818.92690653801, 1220.096778056027, 0.875, 4.166530612244898, 33660.018990851095);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 845, 35252.715740099935, 1760.3943663229081, 0.88, 4.504489795918367, 33447.08927535659);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 34713.6925010149, 1264.1471085493095, 0.88, 4.617959183673469, 33447.08927535659);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 851, 33341.01642209045, 920.951208313554, 0.895, 4.126530612244898, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 855, 33139.737043776, 832.6908961529606, 0.895, 4.64734693877551, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 860, 32882.4859496198, 812.0785626475064, 0.895, 4.2424489795918365, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 861, 34128.894687776345, 1077.1329996126535, 0.87, 4.538775510204082, 32947.15730706299);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 865, 33775.886627082626, 794.6832235927734, 0.87, 3.978775510204082, 32578.28523247518);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 870, 33925.62868823661, 824.7979802433048, 0.87, 3.8212244897959184, 32578.28523247518);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 871, 33311.01524765098, 967.1307913530221, 0.87, 4.004081632653061, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 875, 33064.69817598086, 666.1709829539739, 0.87, 3.635918367346939, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 880, 33000.01648862285, 653.889655922505, 0.87, 2.857142857142857, 32724.141025554938);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 881, 34834.68060021366, 1555.7793919318556, 0.905, 4.097142857142857, 33522.36238558867);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 885, 35481.486758748404, 1604.6114304934179, 0.905, 5.22530612244898, 33309.43267009417);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 890, 35407.92087233416, 1718.1235261403517, 0.905, 4.682448979591837, 33309.43267009417);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 891, 33142.145938979265, 901.6612611354483, 0.87, 4.060408163265306, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 895, 32437.27512001132, 506.3351166699195, 0.87, 2.1044897959183673, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 32487.542758824326, 794.7234205150481, 0.87, 2.183673469387755, 31980.99070275644);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 33487.787337465415, 436.21249473163937, 0.855, 1.7975510204081633, 32869.939064495);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 905, 33479.57928558781, 472.1055301334714, 0.86, 1.893061224489796, 32439.939064495004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 910, 33488.25313327988, 381.56581191275586, 0.86, 1.363265306122449, 32439.939064495004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 911, 33215.74095915179, 743.005337762778, 0.835, 3.2514285714285713, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 915, 32850.70400955131, 527.5036940504119, 0.835, 1.700408163265306, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 920, 32884.97807252415, 605.9024755030692, 0.835, 1.716734693877551, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 921, 35225.09200780907, 1469.967148682839, 0.835, 1.84, 34302.520222212996);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 925, 34644.248877014055, 1125.0634131468726, 0.87, 1.4620408163265306, 33974.97238607771);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 930, 34817.04188472186, 1345.1547012814478, 0.885, 2.260408163265306, 33941.9661520916);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 931, 31940.367283189906, 1.469965419604284E-11, 0.845, 0.0, 31940.36728318992);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 935, 31983.84133930037, 307.40799881390654, 0.845, 0.12, 31940.36728318992);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 940, 32022.00133930037, 356.05577214142914, 0.845, 0.35020408163265304, 31940.36728318992);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 941, 33300.38830172937, 424.69223410016116, 0.83, 1.6506122448979592, 32315.939064495004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 945, 33312.16122338536, 373.082359974392, 0.83, 1.116734693877551, 32315.939064495004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 33148.738418602654, 334.6238540021709, 0.83, 0.9379591836734694, 32315.939064495004);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 951, 32808.10121172325, 537.2247547918489, 0.775, 1.1526530612244898, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 955, 32517.280386830374, 2.939930839208568E-11, 0.775, 0.0, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 960, 32517.280386830374, 2.939930839208568E-11, 0.775, 0.0, 32517.280386830345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 961, 34309.566002216416, 1.469965419604284E-11, 0.775, 0.0, 34309.5660022164);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 965, 34309.566002216416, 1.469965419604284E-11, 0.775, 0.0, 34309.5660022164);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 970, 34309.566002216416, 1.469965419604284E-11, 0.775, 0.0, 34309.5660022164);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 971, 32304.045444374377, 1.469965419604284E-11, 0.775, 0.0, 32304.045444374362);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 975, 32304.045444374377, 1.469965419604284E-11, 0.775, 0.0, 32304.045444374362);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 980, 32304.045444374377, 1.469965419604284E-11, 0.775, 0.0, 32304.045444374362);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 981, 33048.844455111095, 2.204948129406426E-11, 0.775, 0.0, 33048.84445511112);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 985, 33048.844455111095, 2.204948129406426E-11, 0.775, 0.0, 33048.84445511112);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 990, 33048.844455111095, 2.204948129406426E-11, 0.775, 0.0, 33048.84445511112);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 991, 32393.8948177101, 7.34982709802142E-12, 0.775, 0.0, 32393.894817710094);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 995, 32393.8948177101, 7.34982709802142E-12, 0.775, 0.0, 32393.894817710094);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 32393.8948177101, 7.34982709802142E-12, 0.715, 0.0, 32393.894817710094);

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[59, 61, 76, 11, 19, 56, 6, 8, 86, 50, 60, 80, 24, 84, 67, 72, 43, 49, 77, 51, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 63, 39, 53, 1, 68, 57, 27, 92, 7, 91, 74, 18, 3, 25, 65, 64, 69, 21, 15, 87, 78, 17, 93, 52, 89, 48, 5, 62, 20, 73, 58, 16, 14, 10, 90, 97, 22, 31, 44, 46, 71, 83, 9, 0, 66, 41, 88, 30, 79, 55, 96, 37, 98, 35, 23, 85, 26, 34, 82, 54, 33, 42, 2, 45, 13, 99, 70, 40, 47, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 74, 18, 52, 78, 17, 23, 37, 35, 98, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 27, 92, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 8, 19, 11, 54, 82, 33, 28, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 42, 85, 26, 56, 6, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 18, 52, 78, 21, 15, 87, 93, 17, 23, 37, 35, 98, 69, 65, 64, 25, 3, 27, 92, 66, 57, 60, 50, 86, 6, 8, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 38, 29, 24, 80, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 18, 74, 96, 55, 79, 30, 88, 41, 7, 46, 0, 91, 5, 62, 48, 89, 23, 37, 35, 98, 17, 78, 87, 15, 21, 69, 93, 52, 65, 64, 25, 3, 27, 92, 66, 57, 60, 24, 80, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 72, 67, 84, 39, 63, 53, 1, 68, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 27, 92, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 2, 45, 42, 66, 0, 91, 7, 41, 88, 30, 79, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 78, 52, 18, 35, 37, 23, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 24, 80, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 0, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 15, 21, 69, 65, 64, 25, 3, 96, 78, 87, 93, 17, 37, 23, 98, 35, 46, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 47, 13, 99, 70, 40, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 38, 29, 24, 80, 66, 62, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 83, 9, 62, 48, 5, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 78, 87, 15, 21, 69, 93, 17, 23, 37, 35, 98, 52, 65, 64, 25, 3, 89, 46, 27, 92, 66, 57, 60, 24, 80, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 81, 94, 12, 75, 32, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 27, 92, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 88, 41, 79, 30, 55, 96, 7, 0, 91, 74, 18, 52, 65, 64, 25, 3, 15, 21, 69, 93, 87, 78, 17, 37, 23, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 68, 72, 49, 67, 84, 24, 80, 39, 53, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 0, 91, 7, 41, 88, 30, 79, 55, 74, 96, 18, 52, 78, 87, 15, 21, 69, 65, 64, 25, 3, 93, 17, 23, 37, 35, 98, 62, 46, 27, 92, 57, 60, 24, 80, 86, 50, 19, 11, 26, 85, 34, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 67, 84, 38, 29, 56, 6, 8, 72, 49, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 62, 48, 5, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 78, 17, 23, 37, 35, 98, 52, 15, 21, 69, 93, 87, 65, 64, 25, 3, 89, 46, 27, 92, 66, 57, 60, 24, 80, 86, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 81, 94, 12, 75, 32, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 13, 99, 70, 40, 47, 42, 2, 45, 28, 82, 54, 33, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 78, 17, 23, 37, 35, 98, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 63, 68, 67, 84, 24, 80, 39, 53, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 18, 52, 15, 87, 93, 17, 23, 37, 35, 98, 78, 21, 69, 65, 64, 25, 3, 62, 46, 27, 92, 57, 60, 80, 24, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 62, 48, 5, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 78, 52, 15, 21, 69, 3, 64, 65, 25, 87, 93, 17, 23, 37, 35, 98, 89, 46, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 81, 94, 12, 75, 32, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 11, 26, 85, 34, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 13, 99, 70, 40, 47, 42, 2, 45, 28, 82, 54, 33, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 55, 30, 88, 41, 79, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 66, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 0, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 40, 70, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 63, 53, 39, 68, 67, 84, 24, 80, 60, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 15, 21, 69, 65, 64, 25, 3, 96, 78, 87, 93, 17, 23, 37, 35, 98, 62, 46, 92, 27, 57, 66, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 24, 80, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 60, 24, 80, 86, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 84, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 49, 67, 72, 68, 63, 53, 39, 66, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 78, 87, 15, 21, 69, 3, 64, 65, 25, 23, 37, 35, 98, 17, 93, 52, 50, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 92, 27, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 13, 99, 70, 40, 47, 42, 2, 45, 28, 82, 54, 33, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 66, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 24, 80, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 96, 18, 74, 52, 78, 87, 15, 21, 69, 3, 65, 64, 25, 23, 37, 35, 98, 17, 93, 27, 92, 57, 66, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 24, 80, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 52, 78, 17, 23, 37, 35, 98, 21, 15, 87, 93, 69, 65, 64, 25, 3, 74, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 42, 2, 13, 40, 70, 99, 47, 29, 84, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 26, 85, 34, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 88, 30, 79, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 21, 15, 87, 69, 65, 64, 25, 3, 96, 27, 92, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 28, 13, 99, 70, 40, 47, 42, 2, 45, 33, 54, 82, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 27, 92, 66, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 13, 40, 70, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 53, 39, 68, 72, 49, 67, 84, 24, 80, 57, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 23, 37, 35, 98, 17, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 27, 92, 57, 66, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 28, 13, 40, 70, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 24, 80, 60, 34, 19, 11, 26, 85, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 96, 18, 74, 52, 78, 17, 23, 37, 35, 98, 21, 15, 87, 93, 69, 65, 64, 25, 3, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 45, 28, 2, 42, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 33, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 13, 99, 70, 40, 47, 42, 2, 45, 28, 82, 54, 33, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 96, 3, 65, 64, 25, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 78, 52, 18, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 24, 80, 42, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 15, 87, 78, 23, 37, 35, 98, 17, 93, 21, 69, 65, 64, 25, 3, 96, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 24, 80, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 23, 37, 35, 98, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 45, 28, 2, 42, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 33, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 25, 3, 96, 27, 92, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 66, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 23, 37, 35, 98, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 63, 39, 53, 68, 67, 84, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 69, 21, 15, 87, 93, 64, 25, 3, 65, 96, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 24, 80, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 21, 15, 87, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 33, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 21, 15, 87, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 28, 13, 99, 70, 40, 47, 42, 2, 45, 33, 54, 82, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 40, 70, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 50, 60, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 57, 60, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 38, 29, 24, 80, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 45, 42, 2, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 33, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 69, 93, 65, 64, 25, 3, 96, 27, 92, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 28, 13, 99, 70, 40, 47, 42, 2, 45, 33, 54, 82, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 65, 64, 25, 3, 96, 27, 92, 57, 66, 50, 60, 24, 80, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 38, 29, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 24, 80, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 60, 50, 34, 26, 85, 19, 11, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 25, 65, 96, 27, 92, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 28, 13, 99, 70, 40, 47, 42, 2, 45, 33, 54, 82, 11, 26, 85, 34, 19, 56, 6, 8, 86, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 24, 80, 50, 60, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 86, 8, 6, 56, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 67, 84, 38, 29, 24, 80, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 11, 26, 85, 34, 19, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 33, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 38, 29, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 38, 29, 84, 67, 80, 24, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 50, 60, 8, 6, 56, 86, 85, 26, 11, 19, 54, 82, 33, 28, 2, 42, 45, 70, 99, 40, 47, 13, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 72, 49, 67, 84, 39, 63, 68, 53, 66, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 68, 53, 39, 63, 66, 67, 84, 38, 29, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 72, 49, 67, 84, 38, 29, 68, 63, 39, 53, 66, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 2, 45, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 67, 84, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 11, 26, 85, 34, 19, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 11, 26, 85, 19, 34, 82, 54, 33, 42, 45, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 38, 29, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 42, 2, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 49, 72, 67, 84, 39, 63, 68, 53, 66, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 72, 49, 67, 84, 63, 39, 53, 1, 68, 66, 19, 11, 26, 85, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 66, 68, 85, 26, 11, 34, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 19, 34, 45, 28, 2, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 42, 45, 28, 2, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 43, 72, 49, 67, 84, 39, 63, 68, 53, 66, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 43, 72, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 28, 2, 42, 13, 70, 99, 40, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 43, 49, 67, 84, 72, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 38, 29, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 40, 70, 99, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 38, 29, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 36, 4, 12, 75, 32, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 43, 72, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 68, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 63, 68, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 84, 68, 63, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 72, 49, 43, 67, 84, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 53, 39, 63, 68, 43, 1, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 63, 68, 39, 53, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[59, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 97, 90, 44, 31, 10, 16, 14, 73, 58, 20, 71, 83, 9, 89, 48, 5, 62, 46, 0, 91, 7, 41, 79, 30, 88, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 21, 15, 87, 93, 69, 3, 64, 65, 25, 96, 27, 92, 57, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11, 26, 85, 34, 19, 45, 42, 2, 28, 13, 99, 40, 70, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 66, 59]");

    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_100_mag_0_5_kroA100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 100, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(31996.320921987066);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 39601.077353207074, 3256.4480241212223, 0.0, 57.137142857142855, 34060.60184509465);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 29718.661952199527, 1973.5462195463756, 0.5, 2.3877551020408165, 28849.37750241455);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 29385.602216191055, 2393.6206229948784, 0.5, 2.434285714285714, 28069.507161534348);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 28774.12343651873, 1624.3670734073844, 0.5, 1.9926530612244897, 28069.507161534348);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 29400.258583286148, 2244.6694488879994, 0.5, 3.500408163265306, 28069.507161534348);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 28479.28693536811, 1508.8852507513634, 0.5, 1.573061224489796, 27954.31774150543);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 40232.35495357214, 2530.062430720142, 0.48, 19.18857142857143, 34118.40865262476);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 33022.637910625526, 2685.322666721895, 1.11, 12.583673469387755, 29838.261832845932);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 31202.623214795076, 2196.5392754091013, 1.015, 11.50204081632653, 28718.861645127803);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 37040.82626814351, 3327.700999284827, 0.91, 23.009795918367345, 32962.85894722379);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 33834.80257948885, 2029.7167094581737, 1.105, 12.406530612244898, 30125.74502607551);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 33407.092300404336, 2290.489947414077, 1.05, 11.124081632653061, 30125.74502607551);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 37921.31852104818, 2778.254853490662, 0.965, 18.64081632653061, 32695.470821020772);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 35390.03899986287, 2992.457897081308, 1.165, 15.655510204081633, 30326.69673898504);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 32359.060773394867, 2541.232819551597, 1.03, 8.28, 29958.97247013054);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 36087.10421071148, 2216.1796283837643, 1.02, 14.995102040816327, 31856.266652451905);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 31659.411441427892, 1596.1890731803744, 1.08, 5.839183673469388, 30863.446356992634);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 31083.723534381697, 517.1341002788625, 0.97, 1.8057142857142856, 30863.446356992634);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 34537.574108807275, 1584.868637937515, 0.965, 11.097142857142858, 31389.483262465874);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 30854.65992748416, 805.7341265783208, 0.99, 2.3355102040816327, 30526.646982077116);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 30859.711542388322, 616.2232117519146, 0.835, 1.6138775510204082, 30526.646982077116);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 36328.757342997626, 1534.9247996307581, 0.765, 7.711020408163265, 32710.799278751747);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 32834.45103442381, 738.7214574105986, 0.815, 2.329795918367347, 32471.02160413953);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 32471.021604139536, 7.34982709802142E-12, 0.71, 0.0, 32471.02160413953);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 33187.156504858125, 459.1381848969051, 0.725, 1.220408163265306, 32847.264167199035);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 32902.64216879336, 334.97475153150356, 0.725, 0.31755102040816324, 32847.264167199035);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 32847.26416719907, 3.67491354901071E-11, 0.65, 0.0, 32847.264167199035);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 32787.442562596116, 462.55091379424823, 0.655, 0.9420408163265306, 31996.320921987066);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 32014.98436292029, 123.22984372459992, 0.655, 0.30775510204081635, 31996.320921987066);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 31996.320921987066, 0.0, 0.665, 0.0, 31996.320921987066);

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[59, 61, 76, 11, 19, 56, 6, 8, 86, 50, 60, 80, 24, 84, 67, 72, 43, 49, 77, 51, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 63, 39, 53, 1, 68, 57, 27, 92, 7, 91, 74, 18, 3, 25, 65, 64, 69, 21, 15, 87, 78, 17, 93, 52, 89, 48, 5, 62, 20, 73, 58, 16, 14, 10, 90, 97, 22, 31, 44, 46, 71, 83, 9, 0, 66, 41, 88, 30, 79, 55, 96, 37, 98, 35, 23, 85, 26, 34, 82, 54, 33, 42, 2, 45, 13, 99, 70, 40, 47, 28, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 96, 55, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 27, 92, 0, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 41, 7, 96, 55, 30, 88, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 26, 85, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 26, 85, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 34, 26, 85, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 43, 49, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 30, 88, 41, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 7, 91, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 32, 75, 12, 94, 81, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 96, 55, 74, 18, 52, 78, 17, 37, 23, 98, 35, 93, 87, 15, 21, 69, 65, 64, 3, 25, 79, 30, 88, 41, 7, 91, 0, 92, 27, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 54, 82, 33, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 28, 85, 26, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 62, 92, 27, 0, 91, 7, 41, 30, 88, 79, 74, 18, 52, 78, 17, 23, 37, 35, 98, 21, 15, 87, 93, 69, 65, 64, 3, 25, 55, 96, 66, 57, 60, 80, 24, 72, 49, 43, 1, 53, 39, 63, 68, 50, 86, 56, 6, 8, 19, 11, 26, 85, 54, 82, 33, 28, 42, 2, 45, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 88, 41, 30, 96, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 66, 57, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 82, 54, 45, 28, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 43, 1, 63, 39, 53, 68, 60, 50, 80, 24, 72, 29, 38, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 91, 0, 27, 92, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 82, 54, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 96, 3, 17, 23, 37, 35, 98, 62, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 91, 0, 62, 92, 27, 57, 66, 68, 60, 50, 80, 24, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 82, 54, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 96, 3, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 79, 30, 88, 41, 7, 91, 0, 62, 92, 27, 57, 66, 68, 60, 50, 80, 24, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 96, 3, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 41, 30, 88, 79, 55, 96, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 82, 54, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 41, 30, 88, 79, 55, 96, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 82, 54, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 41, 30, 88, 79, 55, 96, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 41, 30, 88, 79, 55, 96, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 39, 53, 63, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 17, 23, 37, 35, 98, 62, 92, 27, 0, 91, 7, 96, 55, 79, 30, 88, 41, 66, 57, 24, 80, 86, 8, 6, 56, 19, 11, 26, 85, 34, 33, 54, 82, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 49, 72, 43, 1, 63, 39, 53, 68, 60, 50, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 55, 96, 3, 17, 23, 37, 35, 98, 62, 91, 7, 41, 30, 79, 88, 66, 57, 24, 80, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 63, 39, 53, 68, 72, 49, 67, 84, 38, 29, 50, 60, 27, 92, 0, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 62, 37, 35, 98, 23, 17, 0, 66, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 39, 53, 63, 68, 27, 92, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 66, 57, 24, 80, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 43, 1, 72, 49, 67, 84, 38, 29, 68, 63, 39, 53, 50, 60, 27, 92, 0, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 2, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 53, 39, 63, 68, 67, 84, 66, 62, 37, 98, 35, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 60, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 19, 11, 26, 85, 34, 66, 62, 37, 98, 35, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 60, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 26, 85, 34, 11, 19, 56, 86, 50, 8, 6, 66, 62, 37, 98, 35, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 63, 39, 53, 1, 68, 67, 84, 38, 29, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 63, 39, 53, 1, 68, 67, 84, 38, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 63, 39, 53, 1, 68, 67, 84, 38, 29, 77, 51, 36, 4, 12, 32, 75, 94, 81, 95, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 29, 77, 51, 36, 4, 12, 32, 75, 94, 81, 95, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 67, 84, 38, 29, 77, 51, 36, 4, 12, 32, 75, 94, 81, 95, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 56, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 85, 34, 26, 11, 19, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 63, 39, 53, 1, 68, 67, 84, 38, 29, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 26, 85, 34, 11, 19, 56, 6, 8, 86, 50, 60, 66, 62, 37, 98, 35, 23, 17, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 28, 13, 2, 99, 70, 40, 47, 95, 77, 51, 36, 4, 29, 38, 12, 32, 75, 94, 81, 84, 67, 56, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 37, 23, 17, 98, 35, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 29, 38, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 34, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 35, 98, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 2, 42, 45, 70, 40, 99, 13, 47, 29, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 84, 67, 66, 62, 17, 23, 37, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 23, 37, 35, 98, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[59, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[59, 61, 76, 22, 90, 97, 46, 31, 44, 14, 16, 10, 20, 73, 58, 71, 83, 9, 89, 48, 5, 74, 18, 52, 78, 15, 21, 87, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0, 92, 27, 57, 24, 80, 72, 49, 43, 1, 53, 39, 63, 68, 60, 50, 86, 56, 6, 8, 19, 11, 26, 85, 82, 54, 33, 28, 13, 99, 70, 40, 2, 45, 42, 47, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 67, 84, 38, 29, 66, 62, 17, 37, 23, 98, 35, 34, 59]");

    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_10_mag_0_5_kroA150() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 10, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(40059.85476605052);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 47612.67939543519, 2940.9855025489237, 0.0, 84.57142857142857, 42683.170205531416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 5, 41984.70574036803, 2723.3224950880353, 0.6866666666666666, 17.675102040816327, 39027.03324507068);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 10, 38198.7199291893, 1347.5861323133272, 0.58, 3.073469387755102, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 11, 39461.347387068374, 2862.8456532926616, 0.58, 8.681632653061225, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 15, 38912.961136409685, 2182.176562670615, 0.58, 4.896326530612245, 37686.655130768435);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 20, 39251.99558616353, 3370.428451857869, 0.5133333333333333, 7.191020408163265, 37274.54142640669);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 21, 52076.707268074315, 4941.52666306508, 0.4866666666666667, 38.02122448979592, 42629.29503289067);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 25, 45964.971392226464, 3268.799467499836, 1.19, 51.74938775510204, 41107.01415451583);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 30, 43933.55522282984, 3509.1898629226725, 1.3033333333333332, 41.52816326530612, 37948.22837513138);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 31, 49113.81147765767, 3383.1693440537215, 1.17, 61.12326530612245, 42071.49543349673);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 35, 47305.99651902245, 2482.282534308829, 1.5366666666666666, 54.76244897959184, 40186.7650539852);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 40, 45624.516248705375, 2587.063422848798, 1.5633333333333332, 47.35836734693878, 39416.470090873016);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 41, 48961.61913920715, 3816.0155658743324, 1.5533333333333332, 61.351836734693876, 43226.49453629713);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 45, 48721.797185197545, 4591.7857637912675, 1.7866666666666666, 57.65714285714286, 39869.73951920086);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 47326.844371340245, 4712.76429215919, 1.7866666666666666, 57.17061224489796, 39869.73951920086);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 51, 44830.30447213036, 3435.0710323435337, 1.8166666666666667, 51.652244897959186, 39215.43689891398);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 55, 44930.0110898183, 2783.317014304716, 1.9266666666666667, 51.42122448979592, 38669.662245367515);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 60, 42761.83170945459, 2320.6527454466473, 1.9633333333333334, 44.6130612244898, 37948.773270151825);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 61, 45698.67828774862, 3803.755524239422, 1.9333333333333333, 54.67755102040816, 40665.039869512846);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 65, 44717.69763507715, 3398.548194433642, 2.006666666666667, 50.779591836734696, 37719.53973231653);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 70, 44986.22244905904, 4179.662985021121, 2.0166666666666666, 46.87428571428571, 37615.005266303204);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 71, 46405.62751204758, 4056.7513379729544, 1.9266666666666667, 54.010612244897956, 39584.47612700263);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 75, 47043.899527609254, 3516.3673840021693, 1.9266666666666667, 52.31265306122449, 39584.47612700263);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 80, 46106.91328407973, 3022.007120232108, 1.9633333333333334, 51.46938775510204, 39541.32977128049);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 81, 48112.21096682406, 3970.7974165706796, 1.9766666666666666, 59.15020408163265, 39993.014352669656);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 85, 46080.93174821507, 3265.508451967445, 2.0566666666666666, 56.36489795918367, 39098.25520121689);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 90, 47084.14393149944, 4072.947214035172, 2.0566666666666666, 57.031836734693876, 39098.25520121689);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 91, 43219.04083173563, 3697.9014666982844, 2.04, 45.991020408163266, 37476.00606161347);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 95, 43232.4062380328, 3234.0918296822088, 2.046666666666667, 44.76408163265306, 36939.15071155977);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 42893.61074139057, 3781.3131054895725, 2.0233333333333334, 40.64163265306122, 35971.886056342555);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 45218.142322672495, 3189.2044897212936, 2.006666666666667, 51.922448979591834, 39069.5912501584);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 105, 44848.61964904607, 2801.9446710465895, 2.06, 51.66122448979592, 38192.30738922258);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 110, 45492.86855730907, 3534.2281801555105, 2.08, 49.34530612244898, 35656.058167884104);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 111, 46712.792017789325, 3217.22261126272, 2.0166666666666666, 52.71836734693878, 41433.69207467653);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 115, 46181.10670596755, 3797.781561333018, 2.1333333333333333, 51.161632653061226, 39817.721132175226);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 120, 46969.934418547375, 3318.3161088196834, 2.1433333333333335, 52.13224489795918, 39576.58917622854);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 121, 48025.653332248956, 3948.4344353893844, 2.1366666666666667, 58.2065306122449, 41121.71125798602);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 125, 47037.49389961522, 3821.4676456388906, 2.1766666666666667, 57.89224489795918, 40591.14143887115);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 130, 45986.35211064623, 3840.793020423324, 2.203333333333333, 55.159183673469386, 39317.3983951413);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 131, 44018.957990864, 3648.090331434586, 2.22, 46.888163265306126, 37612.66275099635);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 135, 44794.74754539732, 4051.2703005973895, 2.22, 47.012244897959185, 36916.600566701345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 140, 44276.3270905347, 3172.2764432763233, 2.22, 44.28326530612245, 36916.600566701345);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 141, 45119.854389702996, 2684.9996601250587, 2.2066666666666666, 49.00326530612245, 39915.92723322006);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 145, 44765.58930445382, 3315.922404689344, 2.223333333333333, 49.89061224489796, 38298.95420634419);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 44347.29517877771, 3050.056315143674, 2.223333333333333, 48.2334693877551, 38298.95420634419);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 151, 46427.145373535604, 4005.69426772936, 2.1333333333333333, 51.67591836734694, 39399.464019620034);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 155, 45488.533060685586, 3988.916171753159, 2.1466666666666665, 48.67755102040816, 38986.39860261985);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 160, 45283.51165589198, 3392.923267938822, 2.1533333333333333, 47.90530612244898, 38895.30477124765);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 161, 46995.03213646743, 3727.8310105655323, 2.1533333333333333, 54.53387755102041, 39688.368562088326);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 165, 46827.81906965529, 4272.665482196013, 2.1633333333333336, 54.41795918367347, 39106.55033235363);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 170, 47463.60666185271, 3757.213311838229, 2.1633333333333336, 54.371428571428574, 39106.55033235363);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 171, 42735.67509452008, 3479.5371257095408, 2.1866666666666665, 45.4734693877551, 37264.49815158652);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 175, 44628.338910916966, 3528.845625782097, 2.17, 45.08734693877551, 37230.64322504368);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 180, 43946.04800487785, 4130.818235322663, 2.17, 43.26285714285714, 36839.843911420234);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 181, 45749.135663692934, 2745.7592537008945, 2.1466666666666665, 46.59265306122449, 41835.81962695344);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 185, 44619.28413066981, 2804.866496800998, 2.18, 47.521632653061225, 38872.63574060031);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 190, 45774.38580777543, 2850.2359870147347, 2.203333333333333, 45.06122448979592, 38803.74601330721);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 191, 45546.169343187474, 3126.1689131635558, 2.1366666666666667, 48.02204081632653, 40612.34597583681);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 195, 45147.501826649124, 3556.1766749892904, 2.1633333333333336, 46.53632653061224, 38321.02355543278);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 44068.60943266564, 3536.6256795911945, 2.1933333333333334, 44.66612244897959, 38073.56697861958);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 45769.91535442737, 3533.857370849393, 2.17, 51.31836734693878, 39740.48894888346);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 205, 46547.0610414789, 4012.356040324986, 2.1866666666666665, 51.8734693877551, 37981.56065929766);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 210, 45971.10837016776, 4070.5391432892147, 2.1866666666666665, 50.01959183673469, 37981.56065929766);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 211, 44546.21635781545, 4245.4079831946965, 2.23, 41.16897959183674, 38271.76170486814);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 215, 43933.27525305122, 3383.7749290605766, 2.23, 40.63428571428572, 37313.86762529431);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 220, 45207.2604360219, 4537.257143997917, 2.216666666666667, 39.794285714285714, 37297.869013081676);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 221, 44760.881401455, 3715.1139035950346, 2.1566666666666667, 46.14857142857143, 37894.03226869033);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 225, 45256.58450886296, 3006.462665015392, 2.1566666666666667, 46.63755102040816, 37894.03226869033);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 230, 44200.6711196773, 3299.3536073074, 2.1566666666666667, 44.77142857142857, 37894.03226869033);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 231, 45301.32654603006, 3758.1634386982964, 2.0833333333333335, 46.19755102040816, 39081.80264465531);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 235, 44421.442171027025, 3447.009858697376, 2.1066666666666665, 46.43102040816326, 38660.66850342914);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 240, 44972.50773253968, 3714.8938815715624, 2.1066666666666665, 44.503673469387756, 38660.66850342914);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 241, 46115.74162290431, 3800.1077084716744, 2.0533333333333332, 49.68816326530612, 40703.88766526706);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 245, 46070.97407208047, 4062.3748865742928, 2.0766666666666667, 49.585306122448976, 38720.1155316504);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 46156.52763141649, 3917.543559531502, 2.0833333333333335, 48.38448979591837, 38692.70754172257);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 251, 44082.1742491464, 3877.0525686449732, 2.066666666666667, 40.4465306122449, 38035.25638530609);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 255, 45311.67082011323, 4027.0946310661716, 2.066666666666667, 40.08163265306123, 38035.25638530609);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 260, 44324.80218737132, 4042.3404436054307, 2.0833333333333335, 39.57142857142857, 36790.18413808833);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 261, 45066.19783977412, 4327.522859105868, 2.033333333333333, 44.04489795918367, 37853.00906439149);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 265, 44194.3914862053, 3817.208949855696, 2.0766666666666667, 40.59183673469388, 37493.31206095591);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 270, 44452.92914345913, 3432.652980361236, 2.0733333333333333, 42.04, 37238.080146454755);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 271, 43710.249012052984, 3101.9324119098937, 2.026666666666667, 43.627755102040815, 38576.004005626564);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 275, 44316.64761308404, 2637.759767295203, 2.04, 44.6530612244898, 37535.94054691552);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 280, 44598.79524116432, 3358.1651802903402, 2.04, 42.55591836734694, 37535.94054691552);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 281, 45598.96635537611, 4058.6406547968027, 2.0566666666666666, 48.33387755102041, 40247.3647038843);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 285, 45722.91986791673, 3536.6925202603693, 2.0833333333333335, 44.623673469387754, 38429.43337043144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 290, 43818.78919913267, 3675.356220567942, 2.0566666666666666, 41.80571428571429, 37549.01376262094);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 291, 43002.85062756529, 4447.835458349575, 2.05, 36.24, 36135.98296599827);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 295, 42823.153717337205, 2950.7086313244363, 2.05, 36.41061224489796, 36135.98296599827);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 43224.57677452097, 3168.7320988479096, 2.0033333333333334, 33.93224489795919, 36135.98296599827);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 44104.38648438581, 2663.2913203476305, 2.0033333333333334, 39.46938775510204, 38337.836013727414);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 305, 43600.24172076243, 2988.04585178004, 1.9666666666666666, 38.95510204081633, 37577.624749027935);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 310, 44137.61782456609, 3457.8596031962816, 1.9766666666666666, 37.435918367346936, 36595.531468337285);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 311, 43574.35561217787, 3364.105264670001, 1.9966666666666666, 39.55673469387755, 38539.63732631764);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 315, 43907.06059465451, 3947.901200488525, 2.0, 37.07265306122449, 37848.055338152015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 320, 43882.97903214393, 4095.5117337963507, 2.0033333333333334, 37.561632653061224, 37780.38970821224);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 321, 45309.50840458314, 3361.639330771347, 1.98, 42.27918367346939, 39805.53926574123);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 325, 45229.39247032715, 3706.5858554724787, 2.03, 40.775510204081634, 38934.68078627684);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 330, 45651.408791308, 4482.233957412274, 2.02, 39.8065306122449, 37608.45047030264);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 331, 43026.338954421255, 3502.1360551549515, 1.9666666666666666, 34.15673469387755, 37618.37717523738);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 335, 43433.84043281785, 3593.871220575326, 1.9733333333333334, 32.22857142857143, 36662.84567079339);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 340, 42594.66923694492, 3690.449554428533, 1.97, 32.053061224489795, 36630.213115802115);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 341, 44045.965205529676, 3543.9122748229256, 1.9433333333333334, 33.97714285714286, 37808.87111064457);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 345, 43434.5226110213, 3413.180933085509, 1.9566666666666668, 34.52897959183674, 37446.01935158892);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 44168.82504954961, 3093.049369316114, 1.9666666666666666, 32.63428571428572, 37305.89126424369);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 351, 44823.66438488565, 3505.9983507797715, 1.9233333333333333, 34.64163265306122, 37607.86596916373);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 355, 45283.4843435962, 3515.7160820605436, 1.93, 32.92081632653061, 36972.33062268446);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 360, 44357.53224111442, 3725.2978946445637, 1.93, 32.6530612244898, 36972.33062268446);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 361, 45557.13305113624, 3396.260840890951, 1.93, 37.63510204081633, 38755.529740018865);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 365, 45613.58022676426, 3449.8694509830193, 1.9466666666666668, 36.46775510204082, 36688.504778178125);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 370, 45262.22237374782, 3394.2294768994693, 1.9466666666666668, 35.19673469387755, 36688.504778178125);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 371, 43184.52941840261, 3162.5801299211716, 1.85, 28.31265306122449, 37670.05280199897);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 375, 42736.52628324135, 3212.890758457616, 1.88, 30.060408163265308, 37210.87492176053);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 380, 43266.70543647597, 3341.6884875617843, 1.8433333333333333, 29.30530612244898, 36649.00956652597);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 381, 43185.73767827006, 3536.711218434032, 1.8233333333333333, 31.71183673469388, 37636.50572538287);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 385, 44053.55153772016, 4300.589617999232, 1.83, 32.46612244897959, 36683.21590630837);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 390, 43912.69403152232, 3417.8832764898434, 1.83, 29.848979591836734, 36683.21590630837);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 391, 44636.092236478056, 3237.6569916379012, 1.8, 33.099591836734696, 39539.40976805163);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 395, 45198.171925786955, 3661.4823356113384, 1.85, 32.9330612244898, 38678.7768259203);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 43537.778219278596, 2994.0631062991106, 1.8433333333333333, 32.08489795918367, 38024.650829884136);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 46938.74871084162, 4026.494324782639, 1.8633333333333333, 32.304489795918364, 38933.68132080432);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 405, 45117.02007179823, 4056.3675301819108, 1.8866666666666667, 31.568979591836733, 37800.98169240674);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 410, 45243.3969734459, 3808.438975492067, 1.88, 31.787755102040816, 37427.74755025807);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 411, 47682.70606490748, 4406.842638934168, 1.7466666666666666, 28.732244897959184, 38035.1887988318);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 415, 46437.88480066304, 4844.425845060864, 1.7433333333333334, 29.008979591836734, 36736.710518285);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 420, 46004.843949853675, 4693.062509526887, 1.7266666666666666, 28.909387755102042, 36580.16919850511);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 421, 44173.26559881862, 3948.2794005984597, 1.7266666666666666, 27.932244897959183, 38319.9934670071);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 425, 43465.68516146765, 3228.1563319218653, 1.73, 28.19265306122449, 37648.12464661985);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 430, 43456.30660278331, 3657.431378800792, 1.72, 24.936326530612245, 37297.61582590614);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 431, 43940.69112581889, 2845.6067623071613, 1.7733333333333334, 31.93469387755102, 37798.05237224768);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 435, 44437.45288428294, 3533.9166054402967, 1.7766666666666666, 30.42530612244898, 37636.276945855876);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 440, 43756.16477394258, 3384.018458910283, 1.7566666666666666, 30.302857142857142, 37251.86092197936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 441, 47758.30340324646, 2939.6484849714084, 1.74, 32.564081632653064, 40302.16584665202);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 445, 47631.21046257418, 2942.012384942127, 1.76, 29.21142857142857, 39649.16730758103);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 45965.44093745109, 3266.2284029808006, 1.76, 28.107755102040816, 39050.46097553638);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 451, 47967.19092301439, 3887.643333698438, 1.6966666666666668, 27.23265306122449, 39817.01407808555);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 455, 46721.962172161984, 3620.2774083589607, 1.6966666666666668, 26.08734693877551, 39817.01407808555);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 460, 46716.845293372666, 3683.3999214217083, 1.7133333333333334, 24.175510204081633, 39518.56356197143);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 461, 45430.369503846356, 3495.512567090225, 1.65, 27.799183673469386, 39944.6130183163);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 465, 46074.10370967249, 3395.3903428372287, 1.6733333333333333, 26.790204081632652, 38687.77703433206);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 470, 45013.00712796278, 3377.3169922074317, 1.67, 26.14857142857143, 37855.816123219985);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 471, 43635.47261806524, 3078.774033900861, 1.6933333333333334, 27.576326530612246, 37472.89544098662);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 475, 43465.17542569028, 3921.5303650778637, 1.69, 25.959183673469386, 37376.26365523461);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 480, 42023.53736567867, 3496.4228719218117, 1.69, 22.859591836734694, 37376.26365523461);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 481, 47152.957367547664, 4071.5814661260906, 1.64, 30.97795918367347, 39748.28193594891);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 485, 46061.82021804941, 4314.630170849623, 1.69, 28.078367346938776, 39476.991776386385);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 490, 45947.28029997681, 4421.141381781165, 1.7, 26.925714285714285, 38888.40840404747);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 491, 45602.740030683504, 3695.3005718953855, 1.6433333333333333, 20.897959183673468, 38935.60124357015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 495, 45565.48203001013, 3575.680270012083, 1.6433333333333333, 22.13714285714286, 38935.60124357015);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 45191.80717477122, 3772.456818437994, 1.6366666666666667, 22.366530612244897, 38913.20293938881);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 44886.71251121182, 3316.7774828596703, 1.63, 25.59755102040816, 38123.89030144096);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 505, 44427.01046070221, 3408.150244282964, 1.63, 25.325714285714287, 38123.89030144096);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 510, 45039.95442698068, 3367.722861266877, 1.63, 24.979591836734695, 38123.89030144096);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 511, 45628.26606058262, 2832.4291314266115, 1.5966666666666667, 24.143673469387757, 39688.01168956243);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 515, 43578.782642361206, 3712.3287452982636, 1.5966666666666667, 22.35918367346939, 37799.646788393955);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 520, 43047.23401896407, 3856.393635064844, 1.5766666666666667, 21.372244897959185, 37613.78367920987);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 521, 47014.56174952982, 4165.025842271169, 1.5866666666666667, 27.313469387755102, 40052.11592789483);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 525, 46474.927577583396, 4206.702415528863, 1.5966666666666667, 24.743673469387755, 39041.543387696256);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 530, 44628.64386861879, 4035.6149116928523, 1.5766666666666667, 22.548571428571428, 39010.95388262966);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 531, 45691.255905406426, 3581.200654133015, 1.53, 19.078367346938776, 39481.62502313282);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 535, 44026.55941770411, 2893.315089596598, 1.52, 16.103673469387754, 39163.49760095643);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 540, 44943.209563972036, 4134.317804187561, 1.52, 15.732244897959184, 38578.39324356166);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 541, 44681.983720144184, 3524.6182190202476, 1.47, 23.270204081632652, 38843.81627294752);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 545, 43138.906893352614, 2526.1909856355423, 1.46, 23.49061224489796, 38083.61733810652);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 44508.178135674185, 3367.441376260958, 1.4433333333333334, 23.75265306122449, 37904.7997438109);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 551, 43871.2290503681, 3569.668630468948, 1.47, 20.2, 38817.253737123945);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 555, 43224.313476000025, 3706.941944230721, 1.47, 17.528163265306123, 37945.46174624553);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 560, 43665.00563237939, 4307.587221015541, 1.47, 18.07265306122449, 37945.46174624553);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 561, 44537.97644265431, 3864.4871819864793, 1.45, 22.838367346938774, 39200.158218903474);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 565, 44501.62737128524, 4042.853681693426, 1.4533333333333334, 21.982857142857142, 38811.13193500412);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 570, 43123.946666604774, 3524.977302098129, 1.4466666666666668, 19.88326530612245, 38666.26378251156);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 571, 43893.34900758762, 2284.620175918151, 1.4166666666666667, 16.120816326530612, 40870.58143526278);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 575, 44944.54326926447, 3806.6991720316023, 1.4066666666666667, 16.68081632653061, 38430.00343442805);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 580, 44334.154911185935, 3401.2336308686063, 1.4066666666666667, 16.399183673469388, 38430.00343442805);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 581, 43733.40979043568, 2539.1629655385786, 1.3866666666666667, 21.42938775510204, 38968.33227734374);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 585, 44280.99563559701, 3685.522401438679, 1.3733333333333333, 20.611428571428572, 38611.06925760297);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 590, 44494.056131027595, 3065.226928292071, 1.3633333333333333, 20.204897959183672, 38388.827303202735);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 591, 42834.785693855236, 3820.121471370973, 1.3633333333333333, 21.02938775510204, 38542.6444788033);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 595, 43295.43944817522, 3947.8268848709977, 1.36, 19.976326530612244, 38020.199384359505);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 42728.30571723164, 3868.5468353424626, 1.34, 18.805714285714284, 38020.199384359505);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 45161.50917183565, 4900.688091092809, 1.3133333333333332, 20.611428571428572, 38723.46239806439);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 605, 43667.8019325516, 4162.859587501124, 1.3266666666666667, 19.001632653061225, 38506.243602100956);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 610, 43385.35631751782, 4208.614982123228, 1.3266666666666667, 17.765714285714285, 38506.243602100956);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 611, 43311.33012805621, 2781.6433238496434, 1.3133333333333332, 11.885714285714286, 40685.96181059707);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 615, 43097.52769781065, 2935.2837246041277, 1.3166666666666667, 12.63265306122449, 40185.474464805826);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 620, 43218.9284970023, 3410.162545333479, 1.3033333333333332, 11.199183673469388, 40136.59164256743);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 621, 44889.645470760675, 3389.9156273711587, 1.2766666666666666, 17.059591836734693, 38733.34426213114);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 625, 44845.9040105334, 3586.793512996396, 1.2533333333333334, 17.82938775510204, 38203.466013087855);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 630, 44439.09055999914, 3337.086641740584, 1.2366666666666666, 16.213061224489795, 37717.6898522654);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 631, 43684.312630775225, 4776.845047574322, 1.24, 18.995102040816327, 38277.43984976936);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 635, 44970.90926747726, 5084.902565168881, 1.2433333333333334, 14.433469387755101, 38139.12060311467);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 640, 45633.57440300165, 5099.175896217232, 1.2433333333333334, 16.38530612244898, 38139.12060311467);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 641, 42823.04162739361, 4572.662171578524, 1.2233333333333334, 16.069387755102042, 38464.56528033193);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 645, 43680.74428306827, 5089.034703436053, 1.2033333333333334, 16.012244897959185, 38331.104368101536);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 43144.4793936803, 4112.9951982470875, 1.2033333333333334, 15.428571428571429, 38331.104368101536);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 651, 44028.19061241598, 3625.6059592617075, 1.18, 13.844897959183674, 40423.218049845615);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 655, 44681.54633674824, 4008.1668639655977, 1.19, 14.91265306122449, 40408.10208391902);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 660, 44011.524251615396, 3340.2186183319595, 1.19, 12.578775510204082, 40270.44522986056);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 661, 45060.552446846945, 2890.6091847323155, 1.1633333333333333, 16.85795918367347, 39090.3095757974);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 665, 43347.354790751815, 2474.877409555514, 1.1533333333333333, 16.0, 38072.35906740468);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 670, 43214.380773887875, 3362.6353943872095, 1.1333333333333333, 13.449795918367347, 37833.090828304965);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 671, 47532.555469326704, 3318.745775373828, 1.1366666666666667, 16.450612244897957, 39755.15952338491);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 675, 46399.61697776835, 3399.984412339758, 1.1333333333333333, 15.235102040816326, 38746.64736588953);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 680, 47398.77694443814, 3080.8993301618953, 1.1333333333333333, 12.62938775510204, 38746.64736588953);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 681, 47500.00663510081, 3107.407509028931, 1.1066666666666667, 11.606530612244898, 39474.779144747816);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 685, 47201.44866588991, 3203.0310626742544, 1.1066666666666667, 11.328979591836735, 39474.779144747816);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 690, 46272.0485057311, 2886.8895575715405, 1.1066666666666667, 13.470204081632653, 39474.779144747816);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 691, 51180.97266360252, 3054.3859333958067, 1.1066666666666667, 9.674285714285714, 45030.99073407218);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 695, 45798.44235990769, 4908.676613726188, 1.1066666666666667, 10.921632653061225, 41284.23725976669);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 46915.04916412725, 5871.902889347889, 1.0966666666666667, 10.38204081632653, 41284.23725976669);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 47366.4526616644, 6314.534638171295, 1.0833333333333333, 9.764897959183674, 38364.31097134257);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 705, 44628.21131223936, 5807.854733880332, 1.06, 8.372244897959183, 38056.33683154637);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 710, 45290.07740595495, 6028.371816137503, 1.06, 8.765714285714285, 38056.33683154637);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 711, 40623.90284828147, 1852.841479917695, 1.0233333333333334, 7.838367346938775, 38751.84098115613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 715, 40013.599247180966, 2114.96953546768, 1.0233333333333334, 5.933877551020408, 38751.84098115613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 720, 40370.87131621553, 2103.5313242647844, 1.0233333333333334, 6.264489795918367, 38751.84098115613);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 721, 41501.47754127327, 1490.3309661998903, 1.0233333333333334, 9.743673469387755, 39443.00225206739);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 725, 42002.523406277156, 1535.736704940008, 1.0233333333333334, 10.24, 39443.00225206739);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 730, 42133.63300722953, 1809.4066704456804, 1.01, 9.689795918367347, 39361.369888376496);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 731, 42645.008963712324, 1119.8166482803222, 1.0333333333333334, 6.9616326530612245, 41236.92855395194);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 735, 42712.24720700528, 1181.6988971459714, 1.0333333333333334, 7.457959183673469, 41236.92855395194);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 740, 42196.50079820459, 1000.640445419176, 1.0333333333333334, 7.300408163265306, 41236.92855395194);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 741, 39608.156462495936, 1388.132296559284, 0.9633333333333334, 7.395102040816327, 37924.03848304774);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 745, 40146.700961657196, 1910.3333327750759, 0.9633333333333334, 7.1624489795918365, 37924.03848304774);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 39980.905754937754, 1333.9227832390984, 0.9633333333333334, 6.7608163265306125, 37924.03848304774);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 751, 39952.08504943998, 1218.7507220635312, 0.94, 6.516734693877551, 38957.12940991366);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 755, 39732.04069562438, 1253.9493677485593, 0.9366666666666666, 5.939591836734694, 38783.23732373293);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 760, 39822.150051305594, 1393.5061377194359, 0.9366666666666666, 6.626122448979592, 38783.23732373293);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 761, 41408.99515342104, 1898.1510365569138, 0.9233333333333333, 8.358367346938776, 38776.28089275368);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 765, 41520.35820123536, 1601.7508652497743, 0.9233333333333333, 9.035102040816327, 38776.28089275368);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 770, 41001.92810939385, 2117.654031744884, 0.9233333333333333, 7.6971428571428575, 38776.28089275368);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 771, 39997.669782269615, 1237.3713749679455, 0.9366666666666666, 6.220408163265306, 38119.86870455474);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 775, 38899.514558092655, 681.0963140687392, 0.9366666666666666, 3.16734693877551, 38119.86870455474);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 780, 38803.31108980736, 613.9578522527631, 0.9366666666666666, 3.6473469387755104, 38119.86870455474);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 781, 40676.18828896364, 1574.278685534671, 0.8833333333333333, 7.121632653061225, 38954.90371656612);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 785, 40460.31966544302, 1638.0116006055905, 0.8833333333333333, 6.729795918367347, 38954.90371656612);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 790, 41286.67087397676, 2251.5966127067973, 0.88, 6.18938775510204, 38925.59082283011);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 791, 39939.060268794965, 1507.8123193184788, 0.9, 6.0081632653061225, 38835.13518235397);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 795, 39914.28124090261, 1408.1182649049322, 0.9, 5.659591836734694, 38835.13518235397);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 39707.22062096953, 1205.7292796813015, 0.9033333333333333, 3.229387755102041, 38835.13518235397);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 40932.57910745441, 530.5917066235005, 0.8966666666666666, 4.386122448979592, 39582.765102680365);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 805, 40217.986869047505, 645.9767286730155, 0.9033333333333333, 4.948571428571428, 39341.81019814072);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 810, 40309.74517267654, 736.2504970257444, 0.9033333333333333, 3.537959183673469, 39341.81019814072);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 811, 40293.03574872247, 1464.4690967910688, 0.9, 4.059591836734694, 39201.25032509144);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 815, 40468.144151717104, 1458.0612944795478, 0.8966666666666666, 4.395102040816327, 39106.27570230871);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 820, 40234.236448453914, 1440.6533814979218, 0.8966666666666666, 4.695510204081633, 39106.27570230871);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 821, 41210.663504026044, 1760.6419123070907, 0.8566666666666667, 4.627755102040816, 39228.20086372625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 825, 40005.93519054254, 1438.9821002474314, 0.8566666666666667, 3.4481632653061225, 39228.20086372625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 830, 39858.10694834589, 1257.6622711284242, 0.8566666666666667, 3.3518367346938778, 39228.20086372625);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 831, 40777.779751314265, 1038.915346708894, 0.87, 3.777142857142857, 40175.51044501419);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 835, 40780.783559562755, 960.6668547690286, 0.8733333333333333, 4.25795918367347, 39899.277987620684);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 840, 40827.76506030555, 1033.1047775099587, 0.8733333333333333, 4.039183673469387, 39899.277987620684);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 841, 41303.356677281416, 668.8473401397695, 0.8366666666666667, 4.371428571428571, 40467.61044988451);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 845, 41300.53274899334, 1178.0982380045261, 0.8533333333333334, 4.423673469387755, 40170.235020799344);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 40649.34501016933, 301.31293512873145, 0.8533333333333334, 3.289795918367347, 40170.235020799344);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 851, 40470.66667049264, 185.84187992885873, 0.8666666666666667, 3.4612244897959186, 40243.90556572532);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 855, 40366.42635442188, 87.29834694045243, 0.8666666666666667, 1.8546938775510204, 40243.90556572532);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 860, 40284.06815720939, 43.64326599823399, 0.8733333333333333, 0.7371428571428571, 40176.9864001483);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 861, 40288.8660223271, 75.34499276107833, 0.8766666666666667, 0.5208163265306123, 40272.621650839785);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 865, 40291.10186832568, 120.56151909581288, 0.8766666666666667, 0.19755102040816327, 40272.621650839785);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 870, 40323.67251969455, 204.11663574892665, 0.8766666666666667, 0.23020408163265307, 40272.621650839785);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 871, 41354.882079250405, 1112.2157655849776, 0.8766666666666667, 1.133061224489796, 39921.6301496824);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 875, 40696.505150364654, 315.81547313289656, 0.8766666666666667, 0.7371428571428571, 39921.6301496824);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 880, 39921.63014968245, 5.144878968614994E-11, 0.8766666666666667, 0.0, 39921.6301496824);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 881, 40082.07209393341, 5.144878968614994E-11, 0.8533333333333334, 0.0, 40082.072093933464);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 885, 40082.07209393341, 5.144878968614994E-11, 0.8533333333333334, 0.0, 40082.072093933464);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 890, 40082.07209393341, 5.144878968614994E-11, 0.8533333333333334, 0.0, 40082.072093933464);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 891, 40059.85476605054, 2.204948129406426E-11, 0.8533333333333334, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 895, 40059.85476605054, 2.204948129406426E-11, 0.8533333333333334, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 905, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 910, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 911, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 915, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 920, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 921, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 925, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 930, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 931, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 935, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 940, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 941, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 945, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 951, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 955, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 960, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 961, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 965, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 970, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 971, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 975, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 980, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 981, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 985, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 990, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 991, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 995, 40059.85476605054, 2.204948129406426E-11, 0.8033333333333333, 0.0, 40059.85476605052);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 40059.85476605054, 2.204948129406426E-11, 0.6566666666666666, 0.0, 40059.85476605052);

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[128, 65, 64, 25, 123, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 96, 7, 91, 129, 0, 62, 48, 5, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 126, 58, 140, 73, 20, 71, 10, 31, 108, 90, 97, 22, 44, 16, 14, 112, 92, 27, 66, 104, 141, 147, 46, 130, 50, 124, 86, 144, 56, 8, 116, 6, 19, 85, 26, 34, 149, 76, 109, 59, 61, 11, 148, 82, 54, 114, 119, 122, 42, 45, 2, 135, 13, 47, 77, 51, 95, 38, 100, 106, 29, 120, 4, 36, 12, 75, 32, 145, 102, 94, 125, 81, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 67, 80, 24, 60, 57, 107, 139, 33, 84, 111, 131, 28, 127, 70, 40, 99, 134, 72, 68, 137, 132, 88, 89, 78, 105, 17, 83, 9, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 50, 124, 86, 144, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 132, 88, 137, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 99, 47, 77, 51, 95, 4, 36, 84, 67, 72, 49, 43, 143, 113, 63, 68, 24, 80, 50, 124, 60, 144, 86, 8, 116, 56, 6, 82, 54, 148, 11, 26, 34, 85, 149, 61, 59, 76, 109, 90, 97, 22, 108, 31, 44, 16, 14, 10, 58, 140, 126, 20, 73, 71, 112, 89, 78, 83, 9, 48, 5, 62, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 19, 119, 114, 122, 42, 127, 40, 70, 33, 134, 139, 129, 0, 7, 91, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 18, 133, 52, 93, 21, 15, 87, 136, 78, 105, 89, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 90, 97, 22, 108, 46, 0, 129, 141, 147, 107, 57, 66, 104, 92, 27, 130, 44, 109, 76, 59, 61, 85, 11, 26, 34, 149, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 49, 43, 143, 1, 115, 146, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 99, 70, 40, 47, 33, 82, 54, 148, 119, 114, 122, 42, 127, 134, 139, 67, 84, 81, 125, 94, 75, 12, 32, 145, 102, 63, 39, 53, 137, 132, 88, 7, 91, 79, 30, 96, 121, 41, 48, 62, 5, 9, 83, 35, 103, 110, 101, 98, 17, 23, 37, 69, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 96, 74, 18, 133, 52, 15, 21, 69, 93, 87, 136, 78, 105, 89, 48, 5, 62, 0, 129, 7, 91, 79, 30, 88, 121, 41, 132, 141, 147, 66, 104, 107, 57, 27, 92, 130, 46, 112, 71, 83, 9, 35, 103, 110, 101, 98, 23, 37, 126, 20, 73, 58, 140, 16, 14, 10, 31, 44, 90, 108, 97, 22, 76, 109, 61, 59, 149, 85, 26, 34, 19, 11, 8, 116, 6, 56, 139, 134, 84, 67, 72, 49, 43, 143, 1, 115, 81, 125, 94, 12, 75, 145, 102, 32, 146, 36, 4, 77, 51, 95, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 122, 42, 119, 114, 82, 54, 148, 33, 24, 80, 50, 124, 144, 86, 68, 39, 53, 63, 113, 38, 60, 137, 123, 25, 17, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 18, 133, 52, 136, 78, 17, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 46, 90, 97, 22, 76, 109, 61, 59, 149, 85, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 39, 53, 63, 143, 113, 49, 43, 1, 115, 146, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 114, 119, 122, 42, 127, 148, 11, 54, 82, 134, 84, 67, 72, 139, 33, 102, 32, 75, 12, 145, 94, 125, 81, 107, 66, 104, 141, 147, 129, 0, 7, 91, 41, 121, 30, 79, 88, 137, 132, 57, 27, 92, 130, 44, 62, 48, 5, 89, 105, 87, 15, 21, 69, 93, 25, 123, 96, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 7, 91, 129, 0, 62, 5, 48, 89, 105, 136, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 44, 90, 97, 22, 108, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 60, 24, 80, 68, 72, 113, 143, 1, 115, 49, 43, 63, 39, 53, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 99, 70, 40, 47, 33, 82, 54, 148, 11, 26, 34, 85, 149, 61, 59, 109, 76, 19, 6, 8, 116, 56, 86, 144, 50, 124, 84, 67, 134, 139, 127, 119, 114, 122, 42, 146, 88, 121, 41, 30, 79, 137, 132, 112, 133, 52, 78, 18, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 15, 87, 136, 78, 17, 37, 103, 110, 101, 98, 23, 21, 69, 93, 9, 83, 35, 126, 20, 73, 58, 140, 14, 16, 10, 31, 108, 46, 112, 71, 105, 89, 48, 5, 62, 0, 129, 141, 147, 66, 104, 92, 27, 130, 44, 90, 97, 22, 76, 109, 61, 59, 149, 85, 26, 34, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 49, 43, 113, 143, 1, 115, 81, 125, 94, 75, 12, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 67, 84, 134, 139, 148, 82, 54, 33, 114, 119, 11, 57, 107, 63, 39, 53, 137, 132, 88, 121, 41, 30, 79, 7, 91, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 15, 87, 93, 21, 69, 123, 25, 78, 105, 89, 48, 5, 62, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 129, 0, 7, 91, 121, 41, 88, 79, 30, 132, 137, 68, 39, 53, 63, 143, 1, 43, 113, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 70, 40, 99, 47, 13, 33, 82, 54, 148, 11, 26, 34, 19, 6, 8, 116, 56, 144, 86, 50, 124, 60, 24, 80, 67, 84, 38, 146, 139, 134, 122, 42, 127, 119, 114, 85, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 9, 83, 35, 101, 98, 110, 103, 23, 37, 126, 17, 136, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 17, 23, 37, 35, 103, 110, 101, 98, 83, 9, 89, 48, 5, 62, 0, 129, 91, 7, 121, 41, 30, 79, 88, 137, 132, 141, 147, 66, 104, 27, 92, 130, 108, 31, 44, 97, 22, 90, 59, 76, 109, 61, 85, 26, 34, 19, 11, 148, 82, 54, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 113, 143, 1, 39, 53, 63, 68, 72, 49, 33, 114, 119, 122, 42, 127, 149, 57, 107, 46, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 105, 87, 15, 21, 69, 93, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 10, 16, 14, 59, 76, 109, 61, 85, 34, 149, 19, 11, 26, 144, 86, 50, 124, 60, 24, 80, 68, 39, 53, 63, 143, 1, 113, 72, 49, 43, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 40, 70, 99, 47, 33, 82, 54, 148, 119, 114, 122, 42, 127, 134, 139, 8, 6, 116, 56, 67, 84, 146, 115, 88, 79, 30, 137, 132, 7, 91, 129, 0, 62, 5, 48, 89, 105, 83, 9, 71, 112, 46, 108, 31, 44, 97, 90, 22, 130, 92, 27, 66, 104, 141, 147, 107, 57, 121, 41, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 23, 37, 103, 110, 101, 98, 83, 35, 126, 20, 73, 58, 140, 14, 16, 10, 31, 90, 108, 97, 22, 44, 46, 112, 71, 9, 17, 105, 89, 48, 5, 62, 0, 129, 91, 41, 121, 30, 79, 7, 147, 66, 107, 57, 130, 27, 92, 141, 104, 132, 88, 137, 63, 39, 53, 143, 113, 43, 49, 72, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 135, 13, 47, 99, 70, 40, 95, 51, 77, 4, 36, 146, 115, 81, 125, 94, 75, 12, 32, 145, 102, 1, 68, 24, 80, 139, 134, 116, 6, 8, 56, 86, 144, 50, 124, 60, 76, 109, 61, 85, 26, 34, 149, 19, 11, 54, 82, 33, 148, 119, 114, 59, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 23, 37, 35, 126, 20, 73, 58, 140, 16, 14, 10, 31, 90, 108, 97, 22, 44, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 129, 0, 91, 7, 121, 41, 88, 79, 30, 137, 132, 39, 53, 63, 143, 1, 113, 43, 49, 72, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 127, 119, 114, 82, 54, 33, 148, 11, 19, 56, 6, 8, 116, 139, 134, 2, 135, 70, 99, 47, 77, 51, 95, 4, 36, 146, 115, 81, 94, 125, 12, 75, 32, 145, 102, 13, 40, 26, 85, 149, 61, 59, 109, 76, 34, 124, 50, 144, 86, 80, 24, 60, 68, 112, 71, 83, 9, 89, 48, 5, 62, 105, 17, 101, 98, 110, 103, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 23, 37, 35, 103, 110, 101, 98, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 47, 99, 70, 40, 95, 51, 77, 36, 4, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 113, 143, 1, 39, 53, 63, 68, 72, 49, 139, 134, 82, 54, 148, 11, 119, 114, 122, 33, 57, 27, 92, 130, 44, 46, 0, 129, 91, 7, 121, 41, 30, 79, 88, 137, 132, 104, 141, 147, 66, 107, 62, 5, 48, 89, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 10, 16, 14, 31, 90, 97, 22, 108, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 60, 24, 80, 68, 39, 53, 63, 143, 1, 113, 72, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 77, 51, 95, 100, 106, 29, 120, 111, 131, 28, 45, 33, 82, 54, 148, 11, 26, 34, 149, 61, 59, 76, 109, 8, 6, 116, 56, 144, 86, 50, 124, 19, 85, 139, 134, 84, 67, 43, 38, 146, 47, 99, 70, 40, 13, 119, 114, 122, 42, 127, 135, 2, 44, 62, 5, 48, 89, 105, 83, 9, 71, 112, 129, 0, 91, 121, 41, 30, 79, 88, 137, 132, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 83, 35, 126, 20, 73, 58, 140, 14, 16, 10, 31, 90, 97, 22, 44, 108, 46, 112, 71, 9, 105, 89, 48, 5, 62, 0, 129, 141, 104, 27, 92, 130, 66, 107, 57, 50, 124, 60, 24, 80, 139, 134, 116, 8, 56, 6, 82, 54, 148, 119, 114, 122, 42, 2, 45, 33, 11, 26, 85, 149, 19, 109, 76, 59, 61, 34, 144, 86, 68, 72, 113, 43, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 13, 47, 99, 70, 40, 127, 135, 51, 95, 77, 84, 67, 63, 39, 53, 143, 1, 132, 121, 41, 88, 79, 30, 137, 147, 7, 91, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 109, 76, 59, 61, 85, 34, 149, 19, 26, 11, 148, 82, 54, 33, 114, 119, 122, 42, 2, 135, 127, 45, 13, 131, 28, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 43, 49, 115, 84, 67, 72, 113, 143, 63, 39, 53, 68, 24, 80, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 47, 99, 70, 40, 60, 57, 107, 66, 104, 141, 147, 129, 0, 91, 62, 5, 48, 89, 105, 112, 46, 130, 27, 92, 132, 137, 79, 30, 121, 41, 88, 7, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 49, 43, 113, 143, 1, 39, 53, 63, 67, 84, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 95, 51, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 139, 134, 82, 54, 148, 11, 119, 114, 122, 42, 127, 33, 57, 27, 92, 130, 44, 46, 0, 129, 91, 7, 41, 121, 30, 79, 88, 137, 132, 104, 141, 147, 66, 107, 62, 5, 48, 89, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 90, 108, 46, 130, 92, 27, 104, 141, 147, 7, 91, 129, 0, 62, 5, 48, 89, 105, 123, 25, 121, 41, 30, 79, 88, 137, 132, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 77, 51, 95, 100, 106, 120, 29, 38, 146, 47, 13, 40, 70, 99, 127, 135, 2, 45, 28, 131, 111, 33, 82, 54, 148, 11, 19, 56, 76, 109, 59, 61, 85, 34, 149, 26, 114, 119, 122, 42, 68, 66, 112, 44, 97, 22, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 112, 62, 0, 129, 141, 147, 66, 104, 27, 92, 130, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 33, 148, 82, 54, 8, 116, 6, 56, 144, 86, 50, 124, 139, 134, 84, 67, 95, 51, 77, 47, 99, 70, 40, 13, 135, 2, 42, 122, 127, 119, 114, 26, 85, 149, 19, 11, 59, 61, 34, 76, 109, 57, 107, 137, 132, 7, 91, 5, 48, 89, 105, 123, 25, 30, 79, 41, 121, 88, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 90, 108, 97, 22, 44, 109, 76, 61, 85, 26, 34, 149, 59, 19, 56, 6, 8, 116, 139, 134, 84, 67, 72, 49, 115, 43, 113, 143, 63, 39, 53, 68, 24, 80, 50, 124, 144, 86, 11, 148, 82, 54, 33, 114, 119, 122, 42, 127, 135, 2, 45, 13, 47, 99, 70, 40, 131, 28, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 60, 57, 27, 92, 104, 66, 107, 0, 129, 141, 147, 79, 30, 121, 41, 88, 7, 91, 62, 5, 48, 89, 105, 112, 46, 130, 132, 137, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 59, 61, 85, 26, 34, 149, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 40, 70, 99, 47, 77, 51, 95, 4, 36, 145, 102, 32, 12, 75, 94, 125, 81, 67, 84, 33, 82, 54, 148, 11, 119, 114, 122, 42, 127, 134, 139, 57, 27, 92, 130, 44, 46, 0, 129, 91, 7, 121, 41, 30, 79, 88, 137, 132, 104, 141, 147, 66, 107, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 90, 97, 22, 44, 108, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 60, 24, 80, 50, 124, 144, 86, 8, 6, 116, 56, 19, 11, 26, 85, 34, 149, 61, 59, 76, 109, 134, 139, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 13, 40, 70, 99, 47, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 68, 41, 121, 30, 79, 88, 132, 137, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 90, 108, 46, 112, 105, 89, 48, 5, 62, 0, 129, 7, 91, 121, 41, 88, 79, 30, 137, 132, 104, 141, 147, 66, 107, 57, 50, 124, 60, 24, 80, 139, 134, 116, 8, 56, 6, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 106, 29, 120, 100, 38, 146, 36, 4, 77, 51, 95, 47, 99, 70, 40, 13, 135, 127, 33, 11, 19, 149, 85, 26, 34, 61, 59, 109, 76, 86, 144, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 94, 125, 12, 75, 32, 145, 102, 84, 67, 27, 92, 130, 44, 97, 22, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 97, 22, 44, 90, 46, 112, 62, 48, 5, 89, 105, 91, 129, 0, 7, 121, 41, 88, 30, 79, 137, 132, 141, 147, 104, 66, 107, 57, 27, 92, 130, 60, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 39, 53, 68, 24, 80, 82, 54, 33, 148, 11, 19, 149, 61, 85, 26, 34, 119, 114, 122, 42, 127, 45, 13, 47, 99, 70, 40, 135, 2, 28, 131, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 109, 76, 59, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 112, 62, 5, 48, 89, 105, 91, 7, 121, 41, 30, 79, 88, 137, 132, 104, 141, 147, 66, 107, 60, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 33, 82, 54, 148, 11, 26, 34, 149, 61, 59, 76, 109, 19, 85, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 77, 95, 51, 4, 36, 57, 27, 92, 130, 0, 129, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 85, 34, 149, 19, 11, 26, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 68, 72, 113, 143, 63, 39, 53, 1, 115, 49, 84, 67, 43, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 120, 29, 134, 139, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 13, 99, 70, 40, 146, 57, 107, 66, 104, 141, 147, 7, 91, 129, 0, 62, 5, 48, 89, 105, 112, 46, 130, 92, 27, 41, 121, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 112, 105, 89, 48, 5, 62, 0, 129, 7, 91, 121, 30, 79, 41, 88, 132, 104, 141, 147, 66, 107, 60, 24, 80, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 50, 124, 109, 76, 59, 61, 85, 26, 34, 149, 19, 11, 54, 82, 148, 119, 114, 2, 33, 57, 130, 27, 92, 137, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 104, 66, 107, 57, 60, 80, 24, 68, 72, 49, 113, 43, 143, 63, 39, 53, 137, 132, 30, 79, 88, 121, 41, 7, 91, 62, 0, 129, 141, 147, 50, 124, 144, 86, 56, 8, 116, 6, 11, 19, 149, 61, 109, 76, 59, 54, 82, 33, 148, 119, 114, 122, 42, 2, 28, 45, 13, 47, 99, 70, 40, 135, 127, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 115, 84, 67, 134, 139, 85, 26, 34, 112, 105, 89, 48, 5, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 60, 24, 80, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 33, 82, 54, 148, 11, 26, 85, 34, 149, 61, 59, 76, 109, 19, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 43, 49, 113, 143, 63, 39, 53, 1, 72, 68, 107, 66, 104, 141, 147, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 121, 41, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 60, 24, 80, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 33, 82, 54, 148, 11, 26, 85, 34, 149, 61, 59, 76, 109, 19, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 115, 43, 49, 113, 143, 63, 39, 53, 1, 72, 68, 107, 66, 104, 141, 147, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 121, 41, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 139, 134, 84, 67, 43, 49, 72, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 2, 33, 82, 54, 148, 119, 114, 26, 85, 149, 19, 6, 116, 8, 56, 144, 86, 50, 124, 109, 76, 59, 61, 34, 11, 68, 147, 66, 104, 141, 132, 121, 30, 79, 41, 88, 137, 7, 91, 129, 0, 62, 5, 48, 89, 105, 112, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 56, 6, 8, 116, 139, 134, 33, 148, 82, 54, 34, 26, 85, 149, 61, 59, 109, 76, 19, 11, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 145, 32, 12, 75, 102, 94, 125, 81, 115, 49, 72, 67, 84, 63, 143, 1, 43, 113, 68, 39, 53, 137, 132, 30, 79, 88, 121, 41, 7, 91, 62, 5, 48, 89, 112, 105, 123, 25, 0, 129, 141, 104, 66, 147, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 86, 144, 8, 6, 56, 116, 139, 134, 84, 67, 72, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 95, 51, 106, 29, 120, 111, 33, 82, 54, 148, 11, 26, 85, 34, 149, 61, 59, 76, 109, 19, 119, 114, 122, 42, 127, 135, 13, 70, 40, 2, 28, 131, 47, 99, 45, 100, 38, 146, 1, 143, 63, 39, 53, 68, 66, 104, 141, 147, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 121, 41, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 6, 116, 139, 134, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 127, 135, 2, 33, 82, 54, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 56, 114, 119, 122, 13, 47, 77, 51, 95, 99, 70, 40, 68, 66, 104, 141, 147, 137, 132, 121, 41, 30, 79, 88, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 6, 116, 139, 134, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 120, 29, 95, 51, 77, 47, 13, 135, 127, 42, 122, 2, 45, 28, 131, 111, 70, 40, 99, 119, 114, 82, 54, 148, 33, 19, 149, 85, 26, 34, 61, 59, 109, 76, 56, 11, 68, 147, 66, 104, 141, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 79, 30, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 95, 77, 51, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 84, 67, 72, 49, 115, 43, 143, 63, 39, 53, 113, 68, 1, 125, 81, 94, 12, 75, 32, 145, 102, 134, 139, 85, 34, 26, 19, 149, 61, 59, 109, 76, 0, 129, 141, 104, 66, 147, 79, 30, 121, 41, 88, 132, 137, 7, 91, 62, 48, 5, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 34, 149, 61, 59, 76, 109, 19, 54, 148, 82, 33, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 51, 77, 95, 4, 36, 146, 38, 100, 84, 67, 68, 72, 49, 43, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 145, 102, 12, 134, 139, 104, 141, 147, 129, 0, 91, 7, 121, 41, 30, 79, 88, 137, 132, 66, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 34, 149, 61, 59, 76, 109, 19, 54, 82, 148, 33, 134, 139, 84, 67, 72, 113, 143, 63, 39, 53, 1, 115, 49, 43, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 120, 29, 95, 77, 51, 99, 70, 40, 13, 47, 111, 131, 28, 45, 2, 135, 42, 127, 119, 114, 122, 68, 66, 141, 104, 147, 137, 132, 121, 41, 30, 79, 88, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 19, 61, 109, 76, 59, 148, 82, 54, 33, 45, 2, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 114, 119, 34, 139, 134, 84, 67, 72, 113, 43, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 68, 39, 53, 1, 143, 63, 137, 132, 121, 41, 30, 79, 88, 7, 91, 5, 48, 89, 105, 112, 0, 129, 141, 147, 66, 104, 62, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 109, 76, 19, 54, 82, 33, 114, 119, 122, 42, 2, 45, 13, 47, 99, 70, 40, 135, 127, 131, 28, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 43, 143, 63, 39, 53, 68, 72, 49, 115, 84, 67, 139, 134, 148, 34, 112, 89, 48, 5, 62, 0, 129, 141, 147, 66, 104, 137, 132, 30, 79, 121, 41, 88, 7, 91, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 34, 148, 82, 54, 33, 139, 134, 84, 67, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 146, 36, 4, 77, 51, 95, 102, 32, 145, 12, 75, 94, 125, 81, 115, 43, 49, 113, 143, 63, 39, 53, 1, 68, 72, 66, 104, 141, 147, 41, 121, 30, 79, 88, 137, 132, 0, 129, 91, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 34, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 115, 49, 113, 143, 63, 39, 53, 1, 72, 67, 84, 134, 139, 33, 82, 54, 148, 70, 40, 99, 47, 13, 43, 68, 66, 104, 141, 147, 137, 132, 121, 41, 30, 79, 88, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 33, 82, 54, 139, 134, 84, 67, 49, 43, 113, 72, 68, 39, 53, 63, 143, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 51, 77, 95, 2, 119, 114, 34, 112, 89, 105, 5, 48, 62, 0, 129, 141, 104, 66, 147, 41, 121, 30, 79, 7, 91, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 33, 114, 119, 122, 42, 2, 28, 45, 135, 127, 134, 139, 68, 39, 53, 63, 143, 1, 113, 72, 49, 115, 43, 67, 84, 38, 100, 106, 111, 131, 13, 47, 99, 70, 40, 51, 77, 95, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 120, 29, 34, 112, 62, 5, 48, 89, 105, 91, 121, 41, 88, 30, 79, 7, 132, 137, 66, 104, 141, 147, 129, 0, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 146, 145, 102, 32, 75, 12, 94, 125, 81, 115, 43, 113, 143, 63, 39, 53, 68, 72, 49, 1, 67, 84, 38, 100, 106, 122, 42, 127, 33, 114, 119, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 7, 121, 41, 30, 79, 88, 137, 132, 104, 141, 147, 66, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 33, 114, 119, 122, 42, 127, 45, 28, 131, 111, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 113, 143, 63, 39, 53, 68, 72, 67, 84, 43, 49, 115, 47, 13, 99, 70, 40, 2, 135, 34, 112, 89, 48, 5, 62, 0, 129, 141, 104, 66, 147, 137, 132, 121, 41, 30, 79, 88, 7, 91, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 43, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 120, 29, 95, 51, 77, 47, 13, 70, 40, 99, 135, 127, 42, 122, 45, 2, 33, 114, 119, 34, 28, 131, 111, 72, 113, 68, 147, 66, 104, 141, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 79, 30, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 43, 143, 63, 39, 53, 68, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 119, 114, 34, 33, 13, 47, 99, 70, 40, 135, 2, 38, 146, 1, 137, 132, 141, 147, 104, 66, 129, 0, 91, 62, 5, 48, 89, 105, 112, 7, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 68, 72, 43, 1, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 95, 51, 114, 119, 122, 33, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 7, 79, 30, 121, 41, 88, 137, 132, 104, 141, 147, 66, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 68, 72, 43, 1, 115, 81, 125, 94, 12, 145, 102, 32, 75, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 135, 2, 70, 40, 99, 47, 77, 51, 95, 13, 122, 114, 119, 33, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 121, 41, 30, 79, 88, 137, 132, 147, 141, 104, 66, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 114, 119, 33, 13, 70, 40, 99, 47, 51, 77, 95, 2, 135, 127, 34, 112, 89, 105, 5, 48, 62, 0, 129, 91, 7, 121, 41, 88, 79, 30, 137, 132, 141, 104, 147, 66, 68, 72, 43, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 42, 122, 127, 119, 114, 34, 33, 13, 135, 2, 70, 40, 99, 47, 77, 51, 95, 68, 147, 104, 66, 137, 132, 30, 121, 41, 88, 79, 7, 91, 62, 48, 5, 89, 105, 112, 0, 129, 141, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 95, 51, 114, 119, 33, 34, 122, 42, 127, 68, 66, 104, 141, 147, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 41, 121, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 135, 13, 47, 51, 77, 95, 99, 70, 40, 42, 127, 119, 114, 122, 33, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 121, 41, 30, 79, 88, 137, 132, 147, 141, 104, 66, 68, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 77, 51, 95, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 127, 135, 13, 70, 40, 99, 47, 2, 119, 114, 34, 33, 146, 38, 68, 147, 141, 104, 66, 129, 0, 91, 62, 48, 5, 89, 105, 112, 7, 121, 41, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 38, 100, 106, 29, 120, 111, 28, 45, 42, 122, 2, 135, 127, 119, 114, 34, 33, 13, 47, 99, 70, 40, 131, 51, 77, 95, 68, 147, 141, 104, 66, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 95, 51, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 127, 42, 122, 114, 119, 33, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 7, 121, 41, 30, 79, 88, 132, 66, 104, 141, 147, 68, 146, 38, 100, 137, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 51, 77, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 127, 119, 114, 34, 122, 2, 135, 13, 47, 99, 70, 40, 33, 146, 68, 66, 104, 141, 147, 137, 132, 7, 41, 121, 30, 79, 88, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 42, 122, 2, 119, 114, 34, 33, 13, 135, 127, 99, 70, 40, 47, 146, 68, 147, 66, 141, 104, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 48, 5, 89, 105, 112, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 100, 106, 111, 131, 28, 45, 42, 122, 127, 119, 114, 34, 33, 13, 47, 99, 70, 40, 135, 2, 120, 29, 38, 146, 68, 147, 66, 104, 141, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 42, 122, 114, 119, 33, 34, 112, 105, 89, 48, 5, 62, 0, 129, 91, 7, 41, 121, 30, 79, 88, 137, 132, 147, 141, 104, 66, 68, 146, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 2, 135, 42, 127, 119, 114, 34, 122, 33, 13, 99, 70, 40, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 121, 41, 30, 79, 88, 137, 132, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 122, 127, 119, 114, 34, 33, 13, 135, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 79, 30, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 42, 122, 127, 119, 114, 34, 33, 13, 47, 99, 70, 40, 135, 2, 131, 146, 68, 147, 141, 104, 66, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 33, 34, 122, 114, 119, 131, 146, 68, 66, 104, 141, 147, 129, 0, 91, 5, 48, 89, 105, 112, 62, 7, 121, 41, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 13, 47, 99, 70, 40, 2, 135, 42, 127, 119, 114, 34, 122, 131, 146, 68, 66, 104, 141, 147, 7, 41, 121, 30, 79, 88, 137, 132, 0, 129, 91, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 42, 122, 127, 119, 114, 34, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 48, 5, 112, 105, 89, 91, 121, 41, 88, 79, 30, 137, 132, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 42, 122, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 42, 122, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 66, 104, 141, 147, 41, 121, 30, 79, 88, 137, 132, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 137, 132, 30, 79, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 99, 47, 40, 146, 68, 147, 66, 104, 141, 129, 0, 91, 121, 41, 88, 79, 30, 137, 132, 7, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 66, 104, 141, 147, 41, 121, 30, 79, 88, 137, 132, 0, 129, 91, 7, 62, 48, 5, 112, 105, 89, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 66, 104, 141, 147, 41, 121, 30, 79, 88, 137, 132, 7, 91, 129, 0, 62, 48, 5, 112, 105, 89, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 66, 104, 141, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 79, 30, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 137, 132, 30, 79, 121, 41, 88, 7, 91, 129, 0, 62, 5, 48, 89, 112, 105, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 137, 132, 41, 121, 30, 79, 88, 7, 91, 129, 0, 62, 48, 5, 112, 105, 89, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 91, 121, 41, 30, 79, 88, 137, 132, 7, 62, 48, 5, 112, 105, 89, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 48, 5, 89, 105, 112, 7, 91, 121, 41, 88, 137, 132, 30, 79, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 121, 41, 88, 30, 79, 7, 132, 137, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 41, 121, 30, 79, 88, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 121, 41, 30, 79, 88, 137, 132, 7, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 121, 41, 88, 79, 30, 137, 132, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 79, 30, 137, 132, 41, 121, 88, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 30, 79, 88, 121, 41, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 30, 79, 88, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[128, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 142, 55, 138, 74, 96, 18, 133, 52, 78, 136, 87, 15, 21, 69, 93, 17, 37, 23, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 27, 92, 57, 107, 60, 24, 80, 50, 124, 144, 86, 8, 116, 6, 56, 11, 26, 85, 149, 61, 59, 76, 109, 19, 148, 82, 54, 139, 134, 84, 67, 49, 113, 143, 63, 39, 53, 1, 43, 72, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 38, 100, 106, 29, 120, 111, 28, 45, 33, 131, 13, 135, 127, 119, 114, 34, 122, 42, 2, 70, 40, 99, 47, 146, 68, 147, 141, 104, 66, 129, 0, 62, 5, 48, 89, 112, 105, 91, 7, 132, 137, 121, 41, 88, 30, 79, 25, 123, 128]");

    }

    @Test
    public void test_mmas_mem_cycle_moving_adtsp_freq_100_mag_0_5_kroA150() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_CMADTSP mmas_mem_cmadtsp = new MMAS_MEM_CMADTSP(graph, 0.8, 1000, 0.5, 100, 4);
        mmas_mem_cmadtsp.setMmasSeed(1);
        mmas_mem_cmadtsp.setDbgpSeed(1);
        mmas_mem_cmadtsp.setStatisticInterval(1);
        mmas_mem_cmadtsp.setShowLog(false);
        mmas_mem_cmadtsp.run();
        assertThat(mmas_mem_cmadtsp.getGlobalStatistics().getBestSoFar()).isEqualTo(36847.91654106039);
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getGlobalStatistics())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");

        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1, 47612.67939543519, 2940.9855025489237, 0.0, 84.57142857142857, 42683.170205531416);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 50, 39054.78586244564, 3618.52014077601, 0.49666666666666665, 5.430204081632653, 37005.46772287745);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 100, 38669.22944646253, 3668.6491923581484, 0.5, 5.337142857142857, 36049.353103114685);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 101, 38782.46626965684, 3233.9749845076753, 0.5, 5.2424489795918365, 36049.353103114685);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 150, 39690.522432682425, 3745.849676164626, 0.51, 6.877551020408164, 35934.396535847874);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 200, 38156.318401073484, 3616.384671028491, 0.5, 5.333877551020408, 35934.396535847874);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 201, 49099.89455482205, 3700.320393932681, 0.4666666666666667, 35.1934693877551, 43638.497731040115);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 250, 43591.08510618653, 4178.79871805515, 1.0633333333333332, 24.09795918367347, 37745.26831566531);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 300, 42250.8400239093, 3614.4865497459177, 1.0233333333333334, 21.335510204081633, 35938.968171085355);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 301, 45733.95195314603, 3574.5999874148442, 0.9366666666666666, 29.285714285714285, 39646.7307496564);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 350, 42091.98725246501, 3601.9688669659363, 1.03, 20.44, 36284.61463769642);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 400, 40268.6312347098, 4218.893720395179, 0.9466666666666667, 11.568979591836735, 35900.97127398958);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 401, 49084.139847684, 3345.7640685620577, 0.9233333333333333, 28.697142857142858, 41021.226298995454);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 450, 44841.31105423255, 4554.68146240764, 1.21, 16.770612244897958, 37443.058216588244);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 500, 41877.08007427089, 5016.001801426243, 1.0466666666666666, 6.403265306122449, 37171.57184313761);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 501, 45081.03664638983, 3007.542889866074, 1.0166666666666666, 24.07591836734694, 39903.249925465505);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 550, 40366.65738154091, 5202.734127286454, 0.9833333333333333, 7.816326530612245, 36089.180653755386);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 600, 40879.41310874172, 5242.5628954096055, 0.8933333333333333, 7.468571428571429, 36040.83271214793);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 601, 43215.058587982814, 4281.719924316596, 0.88, 9.54938775510204, 37541.60693921746);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 650, 42167.202614054106, 4404.98314140894, 0.8966666666666666, 7.8579591836734695, 36789.5361870615);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 700, 38383.03959442922, 3217.1587041900593, 0.7933333333333333, 5.851428571428571, 36786.5361870615);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 701, 40009.94999681766, 2727.4415816100554, 0.7566666666666667, 7.284897959183674, 36114.056392933024);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 750, 36154.68611069543, 870.0969432586863, 0.73, 1.0048979591836735, 35898.90647661541);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 800, 36120.80559236245, 799.3674102606211, 0.7366666666666667, 0.5869387755102041, 35898.90647661541);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 801, 39105.05986724072, 1294.8939136766005, 0.7133333333333334, 3.0808163265306123, 36753.22007305384);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 850, 36905.01283968074, 204.44513260371787, 0.7133333333333334, 0.9404081632653061, 36753.22007305384);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 900, 36753.22007305384, 0.0, 0.6233333333333333, 0.0, 36753.22007305384);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 901, 36847.91654106041, 2.204948129406426E-11, 0.6233333333333333, 0.0, 36847.91654106039);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 950, 36847.91654106041, 2.204948129406426E-11, 0.6233333333333333, 0.0, 36847.91654106039);
        TestUtils.checkValues(mmas_mem_cmadtsp.getIterationStatistics(), 1000, 36847.91654106041, 2.204948129406426E-11, 0.5733333333333334, 0.0, 36847.91654106039);

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[128, 65, 64, 25, 123, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 96, 7, 91, 129, 0, 62, 48, 5, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 126, 58, 140, 73, 20, 71, 10, 31, 108, 90, 97, 22, 44, 16, 14, 112, 92, 27, 66, 104, 141, 147, 46, 130, 50, 124, 86, 144, 56, 8, 116, 6, 19, 85, 26, 34, 149, 76, 109, 59, 61, 11, 148, 82, 54, 114, 119, 122, 42, 45, 2, 135, 13, 47, 77, 51, 95, 38, 100, 106, 29, 120, 4, 36, 12, 75, 32, 145, 102, 94, 125, 81, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 67, 80, 24, 60, 57, 107, 139, 33, 84, 111, 131, 28, 127, 70, 40, 99, 134, 72, 68, 137, 132, 88, 89, 78, 105, 17, 83, 9, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 109, 76, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 50, 124, 86, 144, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 42, 127, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 26, 34, 19, 44, 46, 130, 92, 27, 66, 104, 141, 147, 107, 57, 68, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 11, 148, 82, 54, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 114, 119, 122, 26, 34, 19, 44, 46, 130, 92, 27, 57, 68, 66, 104, 141, 147, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 85, 11, 26, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 44, 46, 130, 92, 27, 57, 68, 66, 104, 141, 147, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 76, 109, 61, 59, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 44, 46, 130, 92, 27, 57, 68, 66, 147, 141, 104, 107, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 133, 52, 136, 87, 15, 21, 69, 93, 23, 37, 35, 103, 110, 101, 98, 17, 105, 89, 78, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 83, 9, 112, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 59, 76, 109, 44, 46, 130, 92, 27, 57, 68, 24, 80, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 42, 127, 135, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 134, 139, 33, 82, 54, 148, 122, 114, 119, 11, 26, 85, 61, 149, 34, 19, 6, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 35, 103, 110, 101, 98, 17, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 59, 76, 109, 61, 149, 34, 85, 26, 11, 54, 82, 148, 122, 114, 119, 42, 127, 135, 13, 40, 99, 47, 77, 51, 95, 4, 36, 84, 67, 72, 49, 43, 143, 113, 63, 39, 53, 1, 115, 146, 145, 102, 32, 75, 12, 94, 125, 81, 38, 100, 106, 29, 120, 111, 131, 28, 45, 2, 70, 33, 134, 139, 8, 116, 56, 86, 144, 50, 124, 60, 107, 147, 141, 104, 66, 27, 92, 57, 80, 24, 68, 6, 19, 130, 112, 46, 83, 9, 96, 123, 25, 88, 132, 137, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 59, 61, 149, 34, 85, 26, 11, 19, 6, 8, 116, 82, 54, 148, 119, 114, 42, 127, 2, 135, 13, 99, 47, 111, 131, 28, 45, 122, 40, 70, 38, 100, 106, 29, 120, 77, 51, 95, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 49, 43, 113, 143, 63, 39, 53, 1, 115, 72, 67, 84, 134, 139, 33, 56, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 147, 141, 104, 66, 130, 112, 46, 76, 109, 132, 137, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 66, 141, 147, 88, 132, 137, 39, 53, 1, 115, 146, 36, 4, 77, 51, 95, 29, 120, 106, 38, 100, 84, 67, 72, 143, 63, 43, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 47, 111, 131, 28, 45, 33, 82, 54, 148, 119, 114, 42, 127, 2, 135, 13, 99, 70, 40, 122, 116, 6, 8, 139, 134, 46, 130, 112, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 66, 141, 147, 88, 132, 137, 39, 53, 63, 143, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 29, 120, 106, 38, 100, 84, 67, 72, 43, 1, 115, 146, 47, 111, 131, 28, 45, 33, 82, 54, 148, 119, 114, 42, 127, 2, 135, 13, 99, 70, 40, 122, 116, 6, 8, 139, 134, 46, 130, 112, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 8, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 120, 29, 47, 111, 131, 28, 45, 2, 135, 13, 99, 70, 40, 122, 42, 127, 114, 119, 82, 54, 148, 33, 56, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 141, 147, 88, 132, 137, 66, 130, 112, 46, 25, 123, 96, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 8, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 120, 29, 47, 111, 131, 28, 45, 2, 135, 13, 99, 70, 40, 122, 42, 127, 114, 119, 82, 54, 148, 33, 56, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 141, 147, 88, 132, 137, 66, 130, 112, 46, 25, 123, 96, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 29, 120, 106, 38, 100, 146, 47, 13, 99, 70, 40, 122, 42, 127, 2, 135, 45, 28, 131, 111, 33, 82, 54, 148, 119, 114, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 141, 147, 88, 132, 137, 66, 130, 112, 46, 25, 123, 96, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 120, 29, 47, 13, 99, 70, 40, 122, 42, 127, 2, 135, 45, 28, 131, 111, 33, 82, 54, 148, 119, 114, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 147, 141, 104, 66, 130, 112, 46, 76, 109, 132, 137, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 29, 120, 106, 38, 100, 146, 47, 13, 99, 70, 40, 122, 42, 127, 2, 135, 45, 28, 131, 111, 33, 82, 54, 148, 119, 114, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 66, 141, 147, 137, 88, 132, 112, 46, 130, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 120, 29, 47, 13, 99, 70, 40, 122, 42, 127, 2, 135, 45, 28, 131, 111, 33, 82, 54, 148, 119, 114, 86, 144, 50, 124, 60, 24, 80, 68, 107, 57, 27, 92, 104, 66, 141, 147, 137, 88, 132, 112, 46, 130, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 115, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 2, 135, 13, 70, 40, 99, 47, 127, 114, 119, 82, 54, 148, 33, 56, 86, 144, 50, 124, 60, 24, 80, 68, 104, 141, 147, 88, 132, 137, 66, 130, 112, 46, 27, 92, 57, 107, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 120, 29, 47, 13, 70, 40, 99, 131, 111, 28, 45, 122, 42, 2, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 106, 29, 120, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 94, 125, 81, 12, 75, 32, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 6, 116, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 72, 43, 113, 49, 81, 125, 94, 75, 32, 12, 145, 102, 4, 36, 146, 77, 51, 95, 38, 100, 120, 29, 106, 111, 131, 28, 45, 122, 42, 2, 70, 40, 99, 47, 13, 135, 127, 114, 119, 82, 54, 148, 33, 134, 139, 67, 84, 115, 1, 143, 63, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 139, 134, 84, 67, 72, 43, 113, 143, 63, 39, 53, 1, 49, 115, 81, 125, 94, 75, 32, 12, 145, 102, 36, 4, 77, 51, 95, 100, 106, 29, 120, 111, 28, 45, 122, 42, 2, 135, 127, 114, 119, 54, 82, 33, 148, 131, 13, 99, 70, 40, 47, 38, 146, 68, 60, 24, 80, 124, 50, 144, 86, 57, 27, 92, 147, 141, 104, 66, 107, 130, 112, 46, 88, 132, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 144, 86, 124, 50, 60, 80, 24, 68, 72, 49, 115, 1, 43, 143, 63, 39, 53, 113, 67, 84, 134, 139, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 38, 100, 51, 95, 77, 4, 36, 146, 102, 32, 75, 145, 12, 81, 94, 125, 107, 57, 27, 92, 104, 66, 147, 141, 130, 112, 46, 88, 132, 137, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 39, 53, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 39, 53, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 39, 53, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 39, 53, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 54, 82, 33, 148, 119, 114, 122, 42, 2, 135, 127, 45, 13, 47, 99, 70, 40, 131, 28, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 148, 54, 82, 119, 114, 122, 42, 127, 135, 13, 47, 99, 70, 40, 131, 28, 45, 2, 106, 100, 38, 146, 36, 4, 77, 51, 95, 81, 125, 94, 12, 75, 32, 145, 102, 120, 29, 111, 57, 27, 92, 130, 112, 46, 104, 66, 147, 141, 107, 39, 53, 1, 137, 132, 88, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 88, 104, 66, 147, 141, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 141, 147, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 53, 39, 137, 132, 88, 104, 66, 141, 147, 107, 92, 130, 27, 57, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 53, 39, 137, 132, 88, 104, 66, 141, 147, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 66, 147, 141, 107, 92, 130, 27, 57, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 66, 147, 141, 107, 92, 130, 27, 57, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 66, 147, 141, 107, 92, 130, 27, 57, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 66, 147, 141, 107, 92, 130, 27, 57, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 106, 29, 120, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 1, 39, 53, 137, 132, 88, 104, 66, 147, 141, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 88, 104, 141, 147, 107, 57, 27, 92, 130, 112, 46, 66, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 12, 75, 32, 145, 102, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 147, 107, 57, 27, 92, 130, 112, 46, 66, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 147, 107, 57, 27, 92, 130, 112, 46, 66, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 147, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 147, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 147, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 147, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 147, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 147, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 32, 145, 12, 75, 94, 125, 81, 1, 53, 39, 137, 132, 147, 104, 141, 107, 57, 27, 92, 130, 112, 46, 66, 88, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 96, 25, 123, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");

        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[128, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");
        assertThat(TestUtils.getTourString(mmas_mem_cmadtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[128, 65, 64, 117, 3, 118, 138, 55, 142, 79, 30, 41, 121, 7, 91, 129, 0, 62, 5, 48, 74, 18, 52, 133, 87, 15, 21, 69, 93, 136, 78, 105, 89, 23, 37, 103, 110, 101, 98, 17, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 139, 134, 84, 67, 72, 49, 115, 43, 143, 63, 113, 68, 80, 24, 60, 50, 124, 86, 144, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 47, 99, 70, 40, 2, 45, 28, 131, 111, 29, 120, 106, 38, 100, 95, 51, 77, 4, 36, 146, 145, 102, 32, 12, 75, 94, 125, 81, 1, 39, 53, 137, 132, 88, 147, 141, 104, 66, 107, 57, 27, 92, 130, 112, 46, 96, 123, 25, 128]");

    }

}